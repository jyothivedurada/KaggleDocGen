654	Adding some lag feature
114	FS with SelectFromModel and LinearSVR
25	Predicting for test data
759	Convert DCM to PNG
281	Which item do people put into the cart first
250	Creating the Model
228	Prediction and Submission
142	What is the AUC Score
754	Starting importance variables evaluation
104	Graph Representation of RNA structure
692	Making Vocabulary and Text Conversion
758	Data preparation for test
558	Exploratory Data Analysis
89	Combine it into a single function
604	Create test generator
432	Explore Time Variables
32	The data is not balanced
30	And finally lets look at the class distribution
95	What are their top categories
223	Meter Readings over time
238	Librairies and data
517	Train the LGBM model
616	Result of my new models
27	GPU version It is just function verification , not for performance evaluation
574	Padding process and resizing with OpenCV
203	Confusion Matrix for Train Data Predictions
733	Get metrics for validation dataset
665	At first , I made Europe future
718	CNN Model for multiclass classification
872	Save some memory
429	Create Training and Validation Set
225	Square feet size is positively Skewed
459	Aggregate Installments Data
603	Focal loss is good for unbalanced datasets , like this one
284	Visualizing Interest Level Vs Price
828	Perspective of Time
6	No surprises , since this is all presumably artificial data
777	Load and preprocess data
825	Stacking models and training
163	Make a Prediction
714	Apply invert scaling
869	Train the model , predict , etc
348	Dimensionality Reduction Techniques
850	Add leak to test
159	Load the pre processed data
220	Weekday and Meter Reading
781	Credit day prolong
344	Looks like there are no missing values in the dataframe
875	Now that we have dataset in desired form , i.e
94	More details on brands with a treemap
389	Use Ad Image to Identify Item Category
99	What words do people use
367	How much does this trust interval change over the real value for kappa
352	Bookings by year
618	Other columns are the digital value of pixels of kannada mnist
270	Fit an XGBoost classifier model
826	cut down features to avoid the kernel die
44	Unique count of Categorical values
747	Common things for training
470	DFS with Default Primitives
549	Finding best alpha
127	Divide features into groups
387	Remove Extreme Prices
80	Download rate by hour
565	TPU Strategy and other configs
300	Gaussian Noise on Target
643	Adding some lag feature
633	Plotting errors for one sample
370	Check Unique Label
591	Inference on Test Set
196	Newer products or products from newer stores are shorter than the oldest ones
721	Prediction for test
71	I updated importation for a faster version
46	Submission data prediction
677	Most of the dates overlap
233	Encoding Street Names
791	Show some examples of different mask
296	Bedroom Count Vs Log Error
81	Last click from the IP analysis
864	Relationships betweeen the sets
103	Generating Graph Matrices from the Structures
834	What are Lung Opacities
841	Solve the task
464	Grid Search Implementation
650	Train model by each meter type
373	missing value statistics
166	What is a python generator
379	Save objects for next step
363	Create variables of interest
214	Word map for most frequent Tags
686	targets in train.csv
273	Bounded region of parameter space
856	You can choose many palettes , which makes the graphs visually nice
699	Create Image Augmentation Generator
663	what already is known
73	What proportion of click generate downloads
623	Creating submission file
800	Predict all country greater than
175	Get the dupplicate clicks with different target values
546	Custom LR schedule
746	Check oversampled dataset
879	RF for feature selection
167	How to make a generator run infinitely
473	Remove Low Importance Features
388	A good item price binning should be based on the price distribution
276	At What Day Of The Week People Order
655	Train model by each meter type
704	process tabular features
570	Create real file paths dataframe
224	Meter Readings over time And Primary Use
701	process training images
332	Seperating the data into different data frame based on the labels
57	We should give CatBoost names of categorical features
234	Encoding Cordinal Direction
868	Let us split the variables one more time
323	China scenario since first entry
410	Per Capita Features
274	Lets Read In Data Files
67	Saving the model
216	Fitting Logistic Regression with OneVsRest Classifier
580	Plotting some random images to check how cleaning works
735	Hugging Face pretrained Bert model names
322	Comparison between Brazil and Italy
217	Importing Packages and Collecting Data
671	Binary Focal Loss
511	Split comments into array of words
405	Exploring Label Distribution
658	Fast data loading
469	Testing Results on Full Data
146	Set up the generator
271	Visualize the feature interaction
877	Read and Explore
252	Recurrent Neural Network
860	Explore distribution of single variable
551	Inspection of created samples , without normalization
269	Load data and fit some models
598	Load Model into TPU
438	Now we can evaluate the baseline model on the testing data
597	Create Dataset objects
408	Redundant Household Variables
816	Use machine learning model
775	Remove feature with only one value
141	Plot the Training Curves
521	add breed mapping
505	Train and validate
93	Which brands are most expensive
48	FVC Progression by SmokingStatus
112	Thanks to Automatic FE The main code for basic FE
156	Create a submission file
642	FIX Time Zone
845	LOAD DATASET FROM DISK
696	View Single Image
843	LOAD PROCESSED TRAINING DATA FROM DISK
610	Training the model
65	Create and set up the model
394	Initial Position and Momentum
390	Price Variance Within Identified Items
731	Try to load the latest checkpoint
479	Now for the next four hyperparameters versus the score
541	load mapping dictionaries
257	Types Of Features
566	Create Dataset objects
11	Model Validation on train data set
858	The competition metric relies only on the order of recods ignoring IDs
117	Implementing the SIR model
698	Number of Patients and Images in Test Images Folder
824	Some Feature Engineering
793	It seems Goblins are a little similar to Ghouls
656	Leak Data Validation
842	Ensure determinism in the results
883	Displaying sample image by host
819	For neutral samples , use original texts as they are
445	Applied to Full Dataset
161	Set up the Model Architecture
801	Predict all province greater than
3	Imputations and Data Transformation
749	Random Forest model
512	Choose and train a classifier
182	Manager function to call the create features functions in multiple processes
519	and batch aggregations examples for the rest of the tables ..
108	Read the data
640	Fast data loading
305	Thx Stackoverflow for realization
884	After we impute it , we can observe standard fluctuation
705	we add some squared features for some model flexability
788	Prediction with xgboost
859	Lib and Load data
736	Try the demo model
382	Let take some small visualizations with these bool features
165	Create the submission csv file
552	Inspection of created samples , with normalization
543	inspect validation samples
0	Load the metadata of each file
613	Reproducing simple baseline
331	Full data Analysis
500	Function to Aggregate Stats at the Client Level
19	The Shape of the Data
844	SAVE DATASET TO DISK
371	Non physical data augmentation
314	Prediction on test set
245	Create Document Vectors
59	See sample image
246	Document Vectors with TfidfVectorizer
764	Check the dataset
821	Plot the obtained tour
87	Deriving individual masks for each object
497	Function for KDE Plots of Variable
70	Hist Graph of scores
545	Finally , we are ready to load the whole series into one matrix
128	Showing Confusion Matrices
131	Code from notebook
486	Putting it all Together
562	OSIC training data Example
169	FS with the Pearson correlation
876	Applying it on text
540	Gaussian Approximation of Active Cases
621	Drop the blurry image
433	We can make the same plot by day of the week
765	Check null data
694	Count game trainsition
205	Transformations and Data Augmentation
319	Some —Åustom Loss functions
745	A method to get oversampled training dataset
813	Preparing the data
448	Standard imports for data science work
529	Run length encoding to reduce predictions size
462	Hyperparameter Tuning Implementation
123	Thanks for the example of ensemling different models from
253	Importing The Dataset
230	Variable Description , Identification , and Correction
730	Choose the model to use
346	Modeling and Prediction
21	Importing all Libraries
602	Pad and resize all the images
567	Load Model into TPU
235	Seting X and Y
651	Replace to UCF and UCL data
853	Create Magic features
7	Now there appears to be one feature that is not gaussian
72	How many different values does our categorial variables take
60	See how our generator work
771	Tabulet per family features
69	Make a simple restart of runtime at this point
770	BedRoom per family features
338	Import Packages and Functions
645	Replace to Leak data
526	Set data loading parameters
243	Training the model on CPU
285	Visuallizing Interest Level Vs Bathroom
678	Adding categorical features
219	Meter Reading and Meter Type
857	Plot several examples of input images
135	How many images are in each folder
584	Build datasets objects
590	Running the model on a Sample Image
484	Previous Credit and Cash
248	Document Vectors with hashing trick
629	This is a simple modify from
416	Machine Learning Modeling
194	Idea is to use clustering on images of one type to group data
96	What are the most expensive items
833	What Does a Normal Image Look Like
441	Example of Sampling from the Domain
362	Join all dataframes
667	We will also evaluate the position of the data points using the coordinates
420	Visualize Tree with No Maximum Depth
478	Plots of Hyperparameters vs Score
55	We should split our dataset to create validation and train parts
100	Can the length of the description give us some informations
62	Create Testing Generator
412	Redundant Individual Variables
347	Random Forest Regressor
111	Comparison of the all feature importance diagrams
254	Function for find out Numerical and categeical Variables
814	Calculate extra features for test set
625	Predict with pure text models
792	Null data check
852	Function which creates final video from list of images
143	Create a Confusion Matrix
732	Run on validation dataset
187	Display some of similar cars
636	Ploting one sample with the corresponding error as error bars
838	Composition of functions
255	Identifying Missing Value Present in Application Train Dataset
77	Does standard users download the app
453	Numeric Aggregation Function
563	Predict Test Set and Submit Result
862	Getting Prime Cities
51	Convert to lower case Clean contractions Clean special charactor Convert small caps
553	Visualize processed samples , resize
15	Maybe if we used the log plot things would be better
866	Label encoding Making it machine readable
242	Loading the data
170	FS with SelectFromModel and LinearSVR
626	Predict with mixed language models
635	Averaging over all instances with standard deviation as errorbar
492	Aggregated Stats of Bureau Balance by Client
218	Variable Description and Identification
768	Ratio feature can have infinite values
644	Train model by each meter type
168	Thanks to Automatic FE The main code for basic FE
780	Credit day overdue
2	Seems like a very wide range of values , relatively spaking
399	Start by pivoting the DataFrame to explore the label distribution over slices
670	Importing Library Files
465	First , we need to put our data into a long format dataframe
292	Create final submission DF
620	Validation on real world data
569	First downsize all the images
498	Function to Convert Data Types
158	Thanks for the example of ensemling different models from
609	Losses and Metrics
303	Preprocessing of features
222	Primary Use and Meter Reading
683	Next , we will make prediction with our LR Model
555	Process train data in parallel
615	Relevant attributes of identified objects are stored
321	Now a look at Italy
58	Prepare Traning Data
596	Save model and best hyperparams
488	Correlations of Aggregated Values with Target
514	Now predict the result for each toxic level
693	Making Feature Matrices
711	Using all features for model training
723	Compare timing for MixUp
520	load mapping dictionaries
82	Number of clicks from the IP during the last minute
190	Code from here and below is commented out because the kernel dies
810	Conversions by OS
763	Now , we can downcast numeric columns in the same way
240	Loading the data
413	For example , we can divide the years of schooling by the age
122	Its also builds on kernel functions but is appropriate for unsupervised learning
752	Show influence of economical factors on housing prices
40	Preparing the training data
83	Importation of a entire day data
854	Predict on test
535	SHAP Interaction Values
769	Room per family features
267	Rescaling the Image Most image preprocessing functions want the image as grayscale
209	Data load and process functions
787	Onehot encoding for categorical data
244	Splitting train into training and validation set
681	Merge seed for each team
873	What should good EDA be capable of
134	Using my notebook
307	So a unique operator will give us the unique filenames that contain ships
468	Sequence of Search Values
785	Find Null data
74	Zoom on this IP
9	Target varaible distribution
756	Set Model for prediction
102	Data Info Method
75	What proportion of IP download the app
587	Load text data into memory
518	Loading the data
725	Data Loading and Cleaning
632	This plot shows summarized information about feature impact against shap output
357	Same series of charts but for returns
556	Process test data in parallel
783	Check the dataset
378	y hist with defferent timestamps are similar
291	Resnext initialize functions
561	Add the actors to the renderer , set the background and size
660	Adding some lag feature
309	Let us load one image and its masks
8	Read data set
306	Let us read the masks
106	plotting the scan
137	Display a random sample of train images by class
829	Other special events
118	Join data , filter dates and clean missings
109	Test Input Pipeline
840	Is a program solution
139	Create a Directory Structure
144	Create a Classification Report
700	Get Tabular Data
107	Import Required Libraries
832	Load train and test dataframes and add length columns for Description and Name
786	Predict null data based on statistical method
836	Opacities That Are Not Related to Pneumonia
351	Bookings per day of week
324	Spain since first recorded case
436	Visualize Validation Predicted Target
527	Define data loading
258	Analysis Based on EXter Source Types
524	KFold LGB model training
675	Construct the graph and plot it
463	Learning Rate Domain
710	Make prediction and apply invert scaling
577	Group and Reduce
26	Load pneumonia locations
47	FVC Progression by Sex
502	Monthly Credit Data
666	There is a gap between them
424	Data Exploration and Data Cleaning
742	Get labels and their countings
22	Seed everything for reproducibility
1	Testing Time Augmentation
815	Judge machine learning model
729	Make TF record file for test dataset
66	Counting the metric score
326	USA since first case
539	Exponential Growth Curves
855	Loading libraries and data
797	Add active column
226	Imputing Missing variable
282	Visualizing Distribution Of Price Before and After Removing Outliers
361	Create dataframe listing the starting date of lockdowns
530	Map extracted timestamps to columns
287	Visualizing Interest Level Vs Hour
4	Impute any values will significantly affect the RMSE score for test set
772	phone per family features
38	Loading data etc
452	Drop Correlated Variables
353	Bookings by month
757	Test data preparation
76	Does bots download the app
279	Best Selling Products
18	Getting to Know the Data
427	Calculate Distance between points using Haversine distance
189	Define some constants for data location
298	Room Count Vs Log Error
477	Hyperparameters versus Iteration
531	Create DFs imitating public and private test subsets
839	The evaluation method
774	Mix region and education
652	Fast data loading
157	Its also builds on kernel functions but is appropriate for unsupervised learning
186	Display similar cars
407	Families without Heads of Household
440	Complete Bayesian Domain
20	Visualizing Raw Variables
183	Here is a plot of sorted category counts
507	Granted applications per number of children
349	Feature Agglomeration Results
823	Import libraries and data , reduce memory usage
341	Build the Model
52	Train on full data
181	Thanks for the example of ensemling different models from
581	The filtration step for RGB images may take a lot of time
286	Visualizing Interest Level Vs Bedrooms
208	Use the images from our validation dataset to check the precdictions
317	removing columns where correlation is high
383	High cardinality features
79	Attributed time analysis
121	Ridge Regression for one country
608	Save results as CSV files
409	Creating Ordinal Variables
415	Next we can rename the columns to make it easier to keep track
90	So , some categories are expensive , but most are cheap
211	CatBoost is RAM expensive so I prefer to utilize GPU
12	Roc AUC curve
91	Zoom on the second level
377	Divide the test set and the training set
485	Create Custom Feature Primitives
400	As a Neuroradiologist , this distribution looks pretty true to daily practice
210	CatBoost Pool and Regression
586	Create fast tokenizer
342	We can finally define the CNN architecture
376	yÁöÑÂºÇÂ∏∏ÂÄº drop samples which have exception value in y
435	Try with All Time Variables
559	Outlier Analysis and Feature Scaling
136	Create a Dataframe containing all images
806	this graph is adapted from
403	Combinations of TTA
359	Read the csv files on the Johns Hopkins CSSE database on github
617	Import the modules
195	Test on the data that is not seen by the network during training
688	train valid split
554	Visualize test processed samples , resize
113	FS with the Pearson correlation
532	train and test rows fraction intersection
649	Adding some lag feature
179	Some stats using jpg exif
697	Number of Patients and Images in Training Images Folder
454	Categorical Aggregation Function
116	Ensembling the solutions and submission
687	These labels are not in train
605	Inference on test set
337	It fills our perfect submission with n randomly distributed random answers i.e
98	Can we get some informations out of the item description
204	Confusion Matrix for Test Data Predictions
631	Split Trian and Valid
753	Dealing with missed variables
35	The data is not balanced
395	Correlation with Deal Probability
428	The test distribution seems to be similar to the training distribution
426	Rides on Map of NYC
328	Select the models to run setting bool variables below
260	Checking the Correlation Between The Features for Application Train Dataset
402	Demonstration how it works
691	Loading and Visualization of Data
767	Make new features using continuous feature
760	Split training set
14	And it looks like a fairly nice distribution , albeit still fairly asymetrical
776	Feature selection using shap
133	Using my notebook
431	Use More Features
297	Bathroom Count Vs Log Error
689	TPU Strategy and other configs
423	Submitting our Predictions
417	The data has no missing values and is scaled between zero and one
702	process test images
571	Load and freeze DenseNet
176	Display all test images
799	Predict by Specify Country
160	Initialize the generators
865	Feature primitives Basically which functions are we going to use to create features
310	Now we can read the masks for the specific image
261	Merging the bureau dataset along with application train dataset to do more analysis
583	Load text data into memory
197	Now , the clusters will be created using just the test set
295	No Of Storey Over The Years
97	Does shipping depends of price
130	My upgrade of parameters
487	Kernel Density Estimate Plots
668	Model Evaluation and Validation
489	Function for Numeric Aggregations
874	Reading in the data , as usual
266	Hit Rate Bar Chart
275	When Do People Generally Order
503	Split into training and validation groups
343	Imputing missing values
784	Moving average is so simple
455	Combined Aggregation Function
607	Reducing Image Size
444	Evolution of Search
340	Create the embedding layer
728	Hugging Face pretrained Bert model names
790	the difficuly of training different mask type is different
430	Train with Simple Features
339	Load and Explore Data
63	See predicted result with images
153	Set Up the Generators
259	Analysis based Averages values
751	Putting the principles in practice
447	Bayesian Optimization on the Full Dataset
544	inspect datagen output
782	This parted was taken from the helpful kernel
206	Converting the Input images to plot using plt
151	Train Test Split
283	Visualizing Outliers In Data
458	Aggregate previous loans at Home Credit
419	Recursive Feature Elimination with Random Forest
215	Featurization of Training Data
573	Save model and weights
871	Let us proceede with further interesting EDA
315	We can now create a submission file
522	extract different column types
154	Plot the Training Curves
207	Defining our Model
280	Top Reordered Products
365	Show one Example of landmark images
155	Define X and y
755	Best parameters are searched by GridSearchCV on my Laptop
450	Admit and Correct Mistakes
358	Read the csv files from kaggle
807	Only a small proportion of clicks were followed by a download
375	The following is features with fine hist
164	Process the Predictions
805	Here is a base model without parameter tuning .
830	Inspect the data at different time scale
762	Divide data into training and validation sets
707	Split into train and test sets
374	Exception value processing
592	Load and preprocess data
86	Dealing with color
43	Unique value counts
145	MAKE A TEST SET PREDICTION
263	Paths to data and metadata
171	FS with SelectFromModel and RandomForestRegressor
588	Build datasets objects
120	Add country details
715	These have their kitchen area larger than the total area of the house
115	Parameters and LB score visualization
101	Is there a correlation between description length and price
460	Aggregate Cash previous loans
669	They are very similar to each other
23	Defining DataBunch for FastAI
125	Prepare Training Data
637	train solved tasks
37	Ability to Detect Face
809	Conversions by App
212	Use of Bayesian Block in Santander Customer Transaction Prediction Challenge
294	Dependent variable logerror follows nice normal distribution
808	Explore ip counts
727	Distribution of product among different genders
716	Make a Baseline model
393	Hit Rate and Charge Distribution
124	Parameters and LB score visualization
538	New Daily Cases
582	Load and process data
54	Using LabelEncoding we just change string values to numbers
761	Predictions class distribution
737	Choose the model to use
434	Test Time Features
265	Apply reduction on some samples and visualize the results
237	Loading the data
882	We can safely store the two types into separate dataframes
422	Filling missing and infinite data by zeroes
568	Create fake filepaths dataframe
301	Composition of Augmentations
68	You can state below link to your copy of this MMDetection repo
443	Distribution of all Numeric Hyperparameters
528	Perform check on randomly chosen mask and prediction
162	Plot the Loss Curves
672	Efficient Net Architecture
499	Function to Calculate Missing Values
475	Distribution of Scores
878	Replace infs and imputing missing values by mean
619	Check some augmentation effect
572	Creating and Training the Model
778	Wiki News FastText Embeddings
132	Training prediction result visualization
126	Showing Confusion Matrices
564	A simple function from stack overflow that crops the image
364	Compare our forecast with actual evolution both for training and validation sets
628	Ensemble with my historical best
817	Start positions and end positions of selected texts in tokenized source texts
140	Set Up the Generators
647	Leak Data loading and concat
39	Show and save column comparision matrix and save row sets
329	Calculating the day when the number of infected individuals is max
311	For the same window we superimpose the masks above the image
510	Check the typical length of a comment
313	Training and callbacs
734	Run on test dataset
41	Training on the complete Dataset now
525	Initialize train and test DataFrames to access IDs and depth information
471	DFS with Selected Aggregation Primitives
523	Prepare for training
356	a quick check if demand distribution changes week to week
177	Basic skin detection
262	analyzing the numerical features disturbion in previous application dataset
180	Its also builds on kernel functions but is appropriate for unsupervised learning
335	Most important or common words in neutral data
16	Look at the data types and some basic info about the different columns
516	Predict validation and test set masks
504	Prediction for one image
84	The magical function
138	Balance the target distribution
119	Compute lags and trends
682	Train Our Linear Regression Model
594	Load and preprocess data
446	Random Search on the Full Dataset
213	Importing necessary libraries
398	Show Original Image
537	Examining the Growth Curves
231	City and Time features
372	Check if valid data looks all right
149	Create Binary Targets
178	Apply skin segmentation on all training data and visualize the result
5	Detect and Correct Outliers
634	Some correlation is indeed present
685	targets in labels.csv
630	Pick some frames to display
147	Make a prediction on the test images
744	Define the number of repetitions for each training example
474	Align Train and Test Sets
673	Dense Added Model
288	Bedrooms Vs Bathrooms Vs Interest Level
467	The following code repeats this plot for all the of the numeric hyperparameters
192	Load tabular data and create new features
236	Which Team Wins And Lost The Most Championships
796	Get data from
536	Get important features according to SHAP
773	combination using three features
515	Define helper functions
191	Lets validate the test files
188	Display some of similar cars
449	Now we want to combine the data without creating any duplicate rows
794	Logistic Regression seems to be a good classification algorithm for this dataset
334	Most important or common negative words
56	Using embedding in NN we can change dimensionality of categorical features
299	No Of Storeys Vs Log Error
495	Function to Aggregate Numeric Data
576	Load Model into TPU
612	Infer using trained model
653	FIX Time Zone
646	Fast data loading
327	Getting population for each country
622	Display the dropped images
779	Check null data
173	Set up the folds for cross validation
804	Difference varialbes were created to describe the difference beween maximum and minimum value
185	How many different cars in train dataset
42	Data loading and checking
318	Trivial segmentation stuff
641	Leak Data loading and concat
881	Load CSV files
421	Lets first check the Train Target Distribution
848	Find final Thresshold
360	Transpose the dataframes
476	Score versus Iteration
509	Read the data
355	expanding the aggregate
221	Time of Day and Meter Reading
457	Merge with the main dataframe
491	Putting the Functions Together
320	Replacing Mainland china with just China
34	Apply Underbalancing Techinique
513	Now train the models with a partial fit approach
811	Conversions by Device
863	NOTE Even tough it is automatic , we can incorporate some manual features
483	Plot for a sanity check
277	When Do People Generally Reorder
437	Evaluate Best Model from Random Search
676	Then transform to a datetime object supposing that it is an ordinal datetime
662	Replace to UCF data
251	Convolutional Neural Network
202	Using RandomForest Classifier
232	Total Time Stopped
812	Conversions by Channel
290	Main Config Variables
64	Split the data into train and validation parts
846	The mean of the two is used as the final embedding matrix
627	Blend and smooth for submission
648	FIX Time Zone
272	Visualize the default split and gains for all models
13	And now we embed each chunk individually
404	Read in Data and Look at Summary Information
472	Visualize Distribution of Correlated Variables
17	Do some simple plots for exploration
10	Text preprosesing source
713	Split into train and test sets
506	Locating a face within an image
820	Write a problem file
411	In most cases , the values are very similar
575	Pad and resize all the images
61	Prepare Testing Data
391	Price Variance in param
849	Add train leak
29	Data is still small enough for memory so read to memory using pandas
496	Function to Calculate Categorical Counts
661	Train model by each meter type
385	Predict test set and make submission
392	Affected Surface Object
835	The Definition of Opacity
818	This notebook will deal with positive , negative and neutral samples independently
557	Load Packages and Data
256	Checking the Imbalance of Target Variable
439	The number of leaves on the other hand is a discrete uniform distribution
861	We can see above the counts of higher damageDealt smoothly decrease
870	That is the size of one test example that we ought to predict
397	Here is the distribution of the maximum value for the remaining features
624	Build the original and translated test data
308	Let us plot some bounding boxes right from the dictionary we just created
50	All contraction are known
599	Will need those folders later for storing our jpegs
425	Empirical Cumulative Distribution Function Plot
493	An important consideration is the missing values in the dataframe
600	Saving as JPEG
867	NaN imputation will be skipped in this tutorial
533	differences between public and private test
88	Convert each labeled object to Run Line Encoding
184	Display a single car with its mask
354	Interactive booking , click , and percentage of booking trends with Bokeh
659	Leak Data loading and concat
795	You only have two areas to work on
480	First we need to format the data and extract the labels
316	Display train and test signals
743	Define the number of repetitions for each class
847	The method for training is borrowed from
53	Predict submission dates
105	Loading the files
481	Read in Data and Create Smaller Datasets
198	The number of samples in each cluster is the following
461	Aggregate Credit previous loans
712	Function to convert series to supervised learning
717	Create dataset for training and Validation
241	MERGE , MISSING VALUE , FILL NA
560	and background color definition
366	Data Exploration The label distribution shows clear label imbalance
384	Ordinal features mapping
740	Check saved checkpoints
368	filtering out outliers
739	Try to load the latest checkpoint
396	All Zero Features
174	Genetic program model , main code loop
451	Identify Correlated Variables
78	How many times , each categories of clickers download the app
880	Evaluate the Model
719	Create Inference Dataset
494	Calculate Information for Testing Data
482	Properly Representing Variable Types
589	Load model into the TPU
548	Load Model into TPU
293	Top Features Selection
684	Sampling the train data since too much data
606	Interest based on geographical location
31	Initialize Mobilenet Face Extractor
722	Compare timing for CutMix
638	evaluation solved tasks
278	How many orders users generally made
172	Load data files
490	Function to Handle Categorical Variables
639	All train tasks predictions
199	Using DecisionTree Classifier
85	We can now print the results
738	Get variables to apply weight decay in AdamW optimizer
657	Find Best Weight
709	Create dataset with look back
325	Iran since first case
802	Age distribution of male and female patients
381	Density plot of numeric features
706	Random Search Confidence
268	Interpreting ROC Plot
45	test prediction by LGBM and feature importance check
33	Check Validation Log Loss
148	Create a submission file
386	Draw network graph to see which ingredients are linked together
789	Target , prediction process
201	Confusion Matrix for Test Data Predictions
229	Importing Packages and Collecting Data
595	Unhide below to see all trials results
24	Unfreeze all layers and find best learning rate
369	using outliers column as labels instead of target column
674	OUTPUT OF AUGMENTATED IMAGES
239	MERGE , MISSING VALUE , FILL NA
200	Confusion Matrix for Train Data Predictions
333	most important or common positive words
827	At the scale of stores
406	Addressing Wrong Labels
680	Fitting the trend on the yearly time series
380	Import necessary libraries
724	Compare timing for GridMask
28	Define a Convolutional Neural Network following Yoon Kim model
193	Visualization of a single batch
601	Create new labels
501	Monthly Cash Data
579	Refit and Submit
803	Impact of bmi over old and young patients
851	Function which creates set of images for each axis
304	Text Processing of text data easily
414	Feature Engineering through Aggregations
110	Apply Logistic Regression
336	and target vector that correspond to the test data size
302	Loading and preprocessing data
466	Distribution of Search Values
831	Disable fastai randomness
679	Rolling monthly and yearly store means
695	Visualize by heatmap
152	Key No Diabetic Retinopathy Has Diabetic Retinopathy
748	Results from my own training
547	This images from validation data seem to be really strange labeled ...
418	Comparing Model Performance
585	Load model into the TPU
150	Balance the target distribution
741	An example usage
542	inspect training samples
247	Document Vectors with HashingVectorizer
227	Encoding Categorical Variable
703	process submission images
129	Code from notebook
264	Group signals metadata accroding to target
766	roof and electricity
664	make hour column from transactionDT
442	Learning Rate Distribution
330	Lets gets started
614	Comparing various kappa scoring
508	Income distribution and target value
726	Visualising the distribution of each product by age by boxplot
36	Take a look at predictions
611	Load Test dataframe
49	Count occurance of words
708	Convert an array of values into a dataset matrix
312	Train a simple CNN architecture
534	Distribution of months in train and test
550	Mismatches on a validation data
720	Define dataset and model
593	Evaluate training history
798	Predict by Specify Province
350	Predict on test set
822	Made a mask using the tour
578	Adding mode as feature
249	Keras Tokenizer API
690	Get Model into TPU
837	If you like the content of this notebook , please consider upvoting it
345	Exploratory Data Analysis
750	Data transformation and helper functions
456	Aggregate Grandchild Data Tables
289	Correlation Between Price and Other Features
92	Prices of the first level of categories
401	Examples of different hemorrhage subtypes
