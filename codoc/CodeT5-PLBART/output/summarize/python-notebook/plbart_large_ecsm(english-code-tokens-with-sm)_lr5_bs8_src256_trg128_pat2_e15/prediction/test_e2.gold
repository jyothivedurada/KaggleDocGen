436	Visualize Validation Predicted Target
285	Visuallizing Interest Level Vs Bathroom
706	Random Search Confidence
522	extract different column types
626	Predict with mixed language models
379	Save objects for next step
209	Data load and process functions
578	Adding mode as feature
243	Training the model on CPU
514	Now predict the result for each toxic level
264	Group signals metadata accroding to target
480	First we need to format the data and extract the labels
863	NOTE Even tough it is automatic , we can incorporate some manual features
722	Compare timing for CutMix
687	These labels are not in train
792	Null data check
878	Replace infs and imputing missing values by mean
618	Other columns are the digital value of pixels of kannada mnist
670	Importing Library Files
226	Imputing Missing variable
405	Exploring Label Distribution
303	Preprocessing of features
131	Code from notebook
245	Create Document Vectors
46	Submission data prediction
302	Loading and preprocessing data
367	How much does this trust interval change over the real value for kappa
879	RF for feature selection
585	Load model into the TPU
747	Common things for training
175	Get the dupplicate clicks with different target values
253	Importing The Dataset
247	Document Vectors with HashingVectorizer
810	Conversions by OS
872	Save some memory
653	FIX Time Zone
250	Creating the Model
625	Predict with pure text models
387	Remove Extreme Prices
304	Text Processing of text data easily
854	Predict on test
14	And it looks like a fairly nice distribution , albeit still fairly asymetrical
108	Read the data
62	Create Testing Generator
707	Split into train and test sets
190	Code from here and below is commented out because the kernel dies
779	Check null data
71	I updated importation for a faster version
646	Fast data loading
548	Load Model into TPU
787	Onehot encoding for categorical data
349	Feature Agglomeration Results
214	Word map for most frequent Tags
553	Visualize processed samples , resize
659	Leak Data loading and concat
691	Loading and Visualization of Data
643	Adding some lag feature
328	Select the models to run setting bool variables below
40	Preparing the training data
563	Predict Test Set and Submit Result
172	Load data files
479	Now for the next four hyperparameters versus the score
884	After we impute it , we can observe standard fluctuation
29	Data is still small enough for memory so read to memory using pandas
511	Split comments into array of words
685	targets in labels.csv
150	Balance the target distribution
208	Use the images from our validation dataset to check the precdictions
341	Build the Model
538	New Daily Cases
47	FVC Progression by Sex
509	Read the data
843	LOAD PROCESSED TRAINING DATA FROM DISK
327	Getting population for each country
526	Set data loading parameters
398	Show Original Image
70	Hist Graph of scores
869	Train the model , predict , etc
871	Let us proceede with further interesting EDA
725	Data Loading and Cleaning
380	Import necessary libraries
744	Define the number of repetitions for each training example
370	Check Unique Label
355	expanding the aggregate
399	Start by pivoting the DataFrame to explore the label distribution over slices
596	Save model and best hyperparams
11	Model Validation on train data set
65	Create and set up the model
295	No Of Storey Over The Years
294	Dependent variable logerror follows nice normal distribution
666	There is a gap between them
542	inspect training samples
282	Visualizing Distribution Of Price Before and After Removing Outliers
786	Predict null data based on statistical method
324	Spain since first recorded case
860	Explore distribution of single variable
389	Use Ad Image to Identify Item Category
568	Create fake filepaths dataframe
372	Check if valid data looks all right
689	TPU Strategy and other configs
836	Opacities That Are Not Related to Pneumonia
332	Seperating the data into different data frame based on the labels
117	Implementing the SIR model
503	Split into training and validation groups
400	As a Neuroradiologist , this distribution looks pretty true to daily practice
662	Replace to UCF data
674	OUTPUT OF AUGMENTATED IMAGES
839	The evaluation method
312	Train a simple CNN architecture
559	Outlier Analysis and Feature Scaling
233	Encoding Street Names
796	Get data from
174	Genetic program model , main code loop
242	Loading the data
609	Losses and Metrics
26	Load pneumonia locations
188	Display some of similar cars
115	Parameters and LB score visualization
407	Families without Heads of Household
143	Create a Confusion Matrix
5	Detect and Correct Outliers
44	Unique count of Categorical values
42	Data loading and checking
489	Function for Numeric Aggregations
284	Visualizing Interest Level Vs Price
187	Display some of similar cars
267	Rescaling the Image Most image preprocessing functions want the image as grayscale
868	Let us split the variables one more time
180	Its also builds on kernel functions but is appropriate for unsupervised learning
716	Make a Baseline model
401	Examples of different hemorrhage subtypes
572	Creating and Training the Model
437	Evaluate Best Model from Random Search
90	So , some categories are expensive , but most are cheap
151	Train Test Split
98	Can we get some informations out of the item description
234	Encoding Cordinal Direction
853	Create Magic features
459	Aggregate Installments Data
288	Bedrooms Vs Bathrooms Vs Interest Level
216	Fitting Logistic Regression with OneVsRest Classifier
471	DFS with Selected Aggregation Primitives
58	Prepare Traning Data
857	Plot several examples of input images
281	Which item do people put into the cart first
627	Blend and smooth for submission
189	Define some constants for data location
501	Monthly Cash Data
832	Load train and test dataframes and add length columns for Description and Name
350	Predict on test set
762	Divide data into training and validation sets
383	High cardinality features
552	Inspection of created samples , with normalization
193	Visualization of a single batch
225	Square feet size is positively Skewed
561	Add the actors to the renderer , set the background and size
229	Importing Packages and Collecting Data
610	Training the model
25	Predicting for test data
822	Made a mask using the tour
84	The magical function
211	CatBoost is RAM expensive so I prefer to utilize GPU
756	Set Model for prediction
856	You can choose many palettes , which makes the graphs visually nice
721	Prediction for test
94	More details on brands with a treemap
101	Is there a correlation between description length and price
45	test prediction by LGBM and feature importance check
556	Process test data in parallel
18	Getting to Know the Data
690	Get Model into TPU
742	Get labels and their countings
293	Top Features Selection
338	Import Packages and Functions
69	Make a simple restart of runtime at this point
223	Meter Readings over time
317	removing columns where correlation is high
106	plotting the scan
136	Create a Dataframe containing all images
50	All contraction are known
583	Load text data into memory
534	Distribution of months in train and test
486	Putting it all Together
677	Most of the dates overlap
27	GPU version It is just function verification , not for performance evaluation
669	They are very similar to each other
297	Bathroom Count Vs Log Error
10	Text preprosesing source
597	Create Dataset objects
780	Credit day overdue
371	Non physical data augmentation
263	Paths to data and metadata
665	At first , I made Europe future
504	Prediction for one image
129	Code from notebook
57	We should give CatBoost names of categorical features
265	Apply reduction on some samples and visualize the results
21	Importing all Libraries
467	The following code repeats this plot for all the of the numeric hyperparameters
455	Combined Aggregation Function
450	Admit and Correct Mistakes
96	What are the most expensive items
875	Now that we have dataset in desired form , i.e
837	If you like the content of this notebook , please consider upvoting it
737	Choose the model to use
163	Make a Prediction
140	Set Up the Generators
48	FVC Progression by SmokingStatus
570	Create real file paths dataframe
482	Properly Representing Variable Types
38	Loading data etc
445	Applied to Full Dataset
544	inspect datagen output
141	Plot the Training Curves
456	Aggregate Grandchild Data Tables
286	Visualizing Interest Level Vs Bedrooms
727	Distribution of product among different genders
876	Applying it on text
558	Exploratory Data Analysis
555	Process train data in parallel
39	Show and save column comparision matrix and save row sets
753	Dealing with missed variables
359	Read the csv files on the Johns Hopkins CSSE database on github
310	Now we can read the masks for the specific image
305	Thx Stackoverflow for realization
291	Resnext initialize functions
318	Trivial segmentation stuff
648	FIX Time Zone
442	Learning Rate Distribution
453	Numeric Aggregation Function
880	Evaluate the Model
218	Variable Description and Identification
142	What is the AUC Score
730	Choose the model to use
414	Feature Engineering through Aggregations
785	Find Null data
333	most important or common positive words
761	Predictions class distribution
717	Create dataset for training and Validation
201	Confusion Matrix for Test Data Predictions
709	Create dataset with look back
3	Imputations and Data Transformation
633	Plotting errors for one sample
412	Redundant Individual Variables
510	Check the typical length of a comment
77	Does standard users download the app
562	OSIC training data Example
741	An example usage
421	Lets first check the Train Target Distribution
165	Create the submission csv file
235	Seting X and Y
475	Distribution of Scores
466	Distribution of Search Values
224	Meter Readings over time And Primary Use
78	How many times , each categories of clickers download the app
392	Affected Surface Object
873	What should good EDA be capable of
723	Compare timing for MixUp
315	We can now create a submission file
592	Load and preprocess data
197	Now , the clusters will be created using just the test set
654	Adding some lag feature
802	Age distribution of male and female patients
431	Use More Features
373	missing value statistics
248	Document Vectors with hashing trick
207	Defining our Model
410	Per Capita Features
200	Confusion Matrix for Train Data Predictions
82	Number of clicks from the IP during the last minute
851	Function which creates set of images for each axis
507	Granted applications per number of children
316	Display train and test signals
335	Most important or common words in neutral data
668	Model Evaluation and Validation
337	It fills our perfect submission with n randomly distributed random answers i.e
443	Distribution of all Numeric Hyperparameters
750	Data transformation and helper functions
724	Compare timing for GridMask
258	Analysis Based on EXter Source Types
173	Set up the folds for cross validation
356	a quick check if demand distribution changes week to week
88	Convert each labeled object to Run Line Encoding
809	Conversions by App
340	Create the embedding layer
485	Create Custom Feature Primitives
434	Test Time Features
641	Leak Data loading and concat
257	Types Of Features
52	Train on full data
49	Count occurance of words
508	Income distribution and target value
712	Function to convert series to supervised learning
589	Load model into the TPU
205	Transformations and Data Augmentation
757	Test data preparation
396	All Zero Features
102	Data Info Method
841	Solve the task
334	Most important or common negative words
72	How many different values does our categorial variables take
306	Let us read the masks
289	Correlation Between Price and Other Features
184	Display a single car with its mask
726	Visualising the distribution of each product by age by boxplot
829	Other special events
95	What are their top categories
135	How many images are in each folder
697	Number of Patients and Images in Training Images Folder
680	Fitting the trend on the yearly time series
381	Density plot of numeric features
571	Load and freeze DenseNet
530	Map extracted timestamps to columns
745	A method to get oversampled training dataset
206	Converting the Input images to plot using plt
261	Merging the bureau dataset along with application train dataset to do more analysis
612	Infer using trained model
236	Which Team Wins And Lost The Most Championships
130	My upgrade of parameters
705	we add some squared features for some model flexability
270	Fit an XGBoost classifier model
32	The data is not balanced
336	and target vector that correspond to the test data size
221	Time of Day and Meter Reading
402	Demonstration how it works
449	Now we want to combine the data without creating any duplicate rows
766	roof and electricity
144	Create a Classification Report
374	Exception value processing
254	Function for find out Numerical and categeical Variables
322	Comparison between Brazil and Italy
541	load mapping dictionaries
12	Roc AUC curve
644	Train model by each meter type
708	Convert an array of values into a dataset matrix
675	Construct the graph and plot it
419	Recursive Feature Elimination with Random Forest
606	Interest based on geographical location
523	Prepare for training
630	Pick some frames to display
815	Judge machine learning model
624	Build the original and translated test data
866	Label encoding Making it machine readable
492	Aggregated Stats of Bureau Balance by Client
28	Define a Convolutional Neural Network following Yoon Kim model
619	Check some augmentation effect
763	Now , we can downcast numeric columns in the same way
496	Function to Calculate Categorical Counts
714	Apply invert scaling
452	Drop Correlated Variables
532	train and test rows fraction intersection
470	DFS with Default Primitives
861	We can see above the counts of higher damageDealt smoothly decrease
629	This is a simple modify from
547	This images from validation data seem to be really strange labeled ...
107	Import Required Libraries
0	Load the metadata of each file
60	See how our generator work
16	Look at the data types and some basic info about the different columns
376	y的异常值 drop samples which have exception value in y
593	Evaluate training history
352	Bookings by year
272	Visualize the default split and gains for all models
603	Focal loss is good for unbalanced datasets , like this one
323	China scenario since first entry
813	Preparing the data
484	Previous Credit and Cash
673	Dense Added Model
586	Create fast tokenizer
765	Check null data
4	Impute any values will significantly affect the RMSE score for test set
772	phone per family features
807	Only a small proportion of clicks were followed by a download
111	Comparison of the all feature importance diagrams
754	Starting importance variables evaluation
386	Draw network graph to see which ingredients are linked together
339	Load and Explore Data
638	evaluation solved tasks
358	Read the csv files from kaggle
118	Join data , filter dates and clean missings
162	Plot the Loss Curves
658	Fast data loading
806	this graph is adapted from
494	Calculate Information for Testing Data
800	Predict all country greater than
515	Define helper functions
760	Split training set
75	What proportion of IP download the app
844	SAVE DATASET TO DISK
529	Run length encoding to reduce predictions size
639	All train tasks predictions
676	Then transform to a datetime object supposing that it is an ordinal datetime
469	Testing Results on Full Data
804	Difference varialbes were created to describe the difference beween maximum and minimum value
348	Dimensionality Reduction Techniques
393	Hit Rate and Charge Distribution
256	Checking the Imbalance of Target Variable
76	Does bots download the app
123	Thanks for the example of ensemling different models from
147	Make a prediction on the test images
820	Write a problem file
321	Now a look at Italy
821	Plot the obtained tour
736	Try the demo model
733	Get metrics for validation dataset
86	Dealing with color
403	Combinations of TTA
81	Last click from the IP analysis
266	Hit Rate Bar Chart
110	Apply Logistic Regression
734	Run on test dataset
183	Here is a plot of sorted category counts
771	Tabulet per family features
203	Confusion Matrix for Train Data Predictions
416	Machine Learning Modeling
748	Results from my own training
460	Aggregate Cash previous loans
80	Download rate by hour
696	View Single Image
649	Adding some lag feature
439	The number of leaves on the other hand is a discrete uniform distribution
601	Create new labels
855	Loading libraries and data
97	Does shipping depends of price
252	Recurrent Neural Network
138	Balance the target distribution
661	Train model by each meter type
584	Build datasets objects
849	Add train leak
847	The method for training is borrowed from
368	filtering out outliers
269	Load data and fit some models
738	Get variables to apply weight decay in AdamW optimizer
652	Fast data loading
159	Load the pre processed data
682	Train Our Linear Regression Model
241	MERGE , MISSING VALUE , FILL NA
775	Remove feature with only one value
679	Rolling monthly and yearly store means
686	targets in train.csv
276	At What Day Of The Week People Order
194	Idea is to use clustering on images of one type to group data
155	Define X and y
296	Bedroom Count Vs Log Error
614	Comparing various kappa scoring
93	Which brands are most expensive
222	Primary Use and Meter Reading
819	For neutral samples , use original texts as they are
605	Inference on test set
476	Score versus Iteration
656	Leak Data Validation
735	Hugging Face pretrained Bert model names
795	You only have two areas to work on
874	Reading in the data , as usual
537	Examining the Growth Curves
357	Same series of charts but for returns
481	Read in Data and Create Smaller Datasets
92	Prices of the first level of categories
461	Aggregate Credit previous loans
462	Hyperparameter Tuning Implementation
251	Convolutional Neural Network
51	Convert to lower case Clean contractions Clean special charactor Convert small caps
164	Process the Predictions
275	When Do People Generally Order
255	Identifying Missing Value Present in Application Train Dataset
798	Predict by Specify Province
791	Show some examples of different mask
577	Group and Reduce
192	Load tabular data and create new features
816	Use machine learning model
384	Ordinal features mapping
220	Weekday and Meter Reading
524	KFold LGB model training
776	Feature selection using shap
867	NaN imputation will be skipped in this tutorial
237	Loading the data
279	Best Selling Products
520	load mapping dictionaries
565	TPU Strategy and other configs
68	You can state below link to your copy of this MMDetection repo
664	make hour column from transactionDT
498	Function to Convert Data Types
178	Apply skin segmentation on all training data and visualize the result
440	Complete Bayesian Domain
331	Full data Analysis
513	Now train the models with a partial fit approach
694	Count game trainsition
126	Showing Confusion Matrices
314	Prediction on test set
41	Training on the complete Dataset now
858	The competition metric relies only on the order of recods ignoring IDs
125	Prepare Training Data
179	Some stats using jpg exif
672	Efficient Net Architecture
441	Example of Sampling from the Domain
472	Visualize Distribution of Correlated Variables
827	At the scale of stores
19	The Shape of the Data
406	Addressing Wrong Labels
360	Transpose the dataframes
458	Aggregate previous loans at Home Credit
803	Impact of bmi over old and young patients
801	Predict all province greater than
551	Inspection of created samples , without normalization
61	Prepare Testing Data
33	Check Validation Log Loss
463	Learning Rate Domain
91	Zoom on the second level
307	So a unique operator will give us the unique filenames that contain ships
158	Thanks for the example of ensemling different models from
219	Meter Reading and Meter Type
519	and batch aggregations examples for the rest of the tables ..
590	Running the model on a Sample Image
292	Create final submission DF
582	Load and process data
777	Load and preprocess data
684	Sampling the train data since too much data
465	First , we need to put our data into a long format dataframe
698	Number of Patients and Images in Test Images Folder
870	That is the size of one test example that we ought to predict
824	Some Feature Engineering
569	First downsize all the images
361	Create dataframe listing the starting date of lockdowns
783	Check the dataset
865	Feature primitives Basically which functions are we going to use to create features
740	Check saved checkpoints
834	What are Lung Opacities
793	It seems Goblins are a little similar to Ghouls
171	FS with SelectFromModel and RandomForestRegressor
811	Conversions by Device
239	MERGE , MISSING VALUE , FILL NA
814	Calculate extra features for test set
278	How many orders users generally made
137	Display a random sample of train images by class
699	Create Image Augmentation Generator
823	Import libraries and data , reduce memory usage
427	Calculate Distance between points using Haversine distance
277	When Do People Generally Reorder
366	Data Exploration The label distribution shows clear label imbalance
417	The data has no missing values and is scaled between zero and one
64	Split the data into train and validation parts
825	Stacking models and training
204	Confusion Matrix for Test Data Predictions
620	Validation on real world data
365	Show one Example of landmark images
769	Room per family features
533	differences between public and private test
382	Let take some small visualizations with these bool features
581	The filtration step for RGB images may take a lot of time
182	Manager function to call the create features functions in multiple processes
273	Bounded region of parameter space
468	Sequence of Search Values
105	Loading the files
198	The number of samples in each cluster is the following
636	Ploting one sample with the corresponding error as error bars
831	Disable fastai randomness
195	Test on the data that is not seen by the network during training
623	Creating submission file
536	Get important features according to SHAP
395	Correlation with Deal Probability
474	Align Train and Test Sets
85	We can now print the results
415	Next we can rename the columns to make it easier to keep track
274	Lets Read In Data Files
24	Unfreeze all layers and find best learning rate
145	MAKE A TEST SET PREDICTION
228	Prediction and Submission
660	Adding some lag feature
651	Replace to UCF and UCL data
704	process tabular features
512	Choose and train a classifier
549	Finding best alpha
73	What proportion of click generate downloads
59	See sample image
422	Filling missing and infinite data by zeroes
580	Plotting some random images to check how cleaning works
695	Visualize by heatmap
451	Identify Correlated Variables
429	Create Training and Validation Set
426	Rides on Map of NYC
826	cut down features to avoid the kernel die
731	Try to load the latest checkpoint
1	Testing Time Augmentation
22	Seed everything for reproducibility
181	Thanks for the example of ensemling different models from
447	Bayesian Optimization on the Full Dataset
560	and background color definition
109	Test Input Pipeline
320	Replacing Mainland china with just China
846	The mean of the two is used as the final embedding matrix
758	Data preparation for test
850	Add leak to test
759	Convert DCM to PNG
840	Is a program solution
121	Ridge Regression for one country
506	Locating a face within an image
388	A good item price binning should be based on the price distribution
488	Correlations of Aggregated Values with Target
240	Loading the data
692	Making Vocabulary and Text Conversion
790	the difficuly of training different mask type is different
732	Run on validation dataset
308	Let us plot some bounding boxes right from the dictionary we just created
119	Compute lags and trends
53	Predict submission dates
15	Maybe if we used the log plot things would be better
122	Its also builds on kernel functions but is appropriate for unsupervised learning
301	Composition of Augmentations
343	Imputing missing values
210	CatBoost Pool and Regression
433	We can make the same plot by day of the week
20	Visualizing Raw Variables
667	We will also evaluate the position of the data points using the coordinates
852	Function which creates final video from list of images
715	These have their kitchen area larger than the total area of the house
298	Room Count Vs Log Error
156	Create a submission file
833	What Does a Normal Image Look Like
428	The test distribution seems to be similar to the training distribution
830	Inspect the data at different time scale
230	Variable Description , Identification , and Correction
615	Relevant attributes of identified objects are stored
490	Function to Handle Categorical Variables
404	Read in Data and Look at Summary Information
502	Monthly Credit Data
148	Create a submission file
99	What words do people use
545	Finally , we are ready to load the whole series into one matrix
574	Padding process and resizing with OpenCV
751	Putting the principles in practice
13	And now we embed each chunk individually
330	Lets gets started
363	Create variables of interest
611	Load Test dataframe
728	Hugging Face pretrained Bert model names
635	Averaging over all instances with standard deviation as errorbar
153	Set Up the Generators
104	Graph Representation of RNA structure
564	A simple function from stack overflow that crops the image
420	Visualize Tree with No Maximum Depth
812	Conversions by Channel
602	Pad and resize all the images
213	Importing necessary libraries
89	Combine it into a single function
650	Train model by each meter type
199	Using DecisionTree Classifier
710	Make prediction and apply invert scaling
35	The data is not balanced
287	Visualizing Interest Level Vs Hour
642	FIX Time Zone
375	The following is features with fine hist
859	Lib and Load data
628	Ensemble with my historical best
883	Displaying sample image by host
579	Refit and Submit
100	Can the length of the description give us some informations
749	Random Forest model
202	Using RandomForest Classifier
521	add breed mapping
54	Using LabelEncoding we just change string values to numbers
146	Set up the generator
543	inspect validation samples
599	Will need those folders later for storing our jpegs
249	Keras Tokenizer API
557	Load Packages and Data
683	Next , we will make prediction with our LR Model
755	Best parameters are searched by GridSearchCV on my Laptop
23	Defining DataBunch for FastAI
170	FS with SelectFromModel and LinearSVR
805	Here is a base model without parameter tuning .
794	Logistic Regression seems to be a good classification algorithm for this dataset
774	Mix region and education
397	Here is the distribution of the maximum value for the remaining features
495	Function to Aggregate Numeric Data
718	CNN Model for multiclass classification
491	Putting the Functions Together
591	Inference on Test Set
752	Show influence of economical factors on housing prices
454	Categorical Aggregation Function
166	What is a python generator
6	No surprises , since this is all presumably artificial data
342	We can finally define the CNN architecture
838	Composition of functions
657	Find Best Weight
575	Pad and resize all the images
587	Load text data into memory
300	Gaussian Noise on Target
739	Try to load the latest checkpoint
617	Import the modules
729	Make TF record file for test dataset
409	Creating Ordinal Variables
788	Prediction with xgboost
351	Bookings per day of week
566	Create Dataset objects
196	Newer products or products from newer stores are shorter than the oldest ones
743	Define the number of repetitions for each class
770	BedRoom per family features
232	Total Time Stopped
782	This parted was taken from the helpful kernel
112	Thanks to Automatic FE The main code for basic FE
527	Define data loading
268	Interpreting ROC Plot
594	Load and preprocess data
63	See predicted result with images
244	Splitting train into training and validation set
595	Unhide below to see all trials results
681	Merge seed for each team
311	For the same window we superimpose the masks above the image
43	Unique value counts
133	Using my notebook
56	Using embedding in NN we can change dimensionality of categorical features
127	Divide features into groups
30	And finally lets look at the class distribution
881	Load CSV files
784	Moving average is so simple
473	Remove Low Importance Features
326	USA since first case
74	Zoom on this IP
701	process training images
169	FS with the Pearson correlation
55	We should split our dataset to create validation and train parts
353	Bookings by month
797	Add active column
588	Build datasets objects
778	Wiki News FastText Embeddings
781	Credit day prolong
637	train solved tasks
634	Some correlation is indeed present
191	Lets validate the test files
539	Exponential Growth Curves
319	Some сustom Loss functions
413	For example , we can divide the years of schooling by the age
848	Find final Thresshold
161	Set up the Model Architecture
186	Display similar cars
645	Replace to Leak data
329	Calculating the day when the number of infected individuals is max
535	SHAP Interaction Values
103	Generating Graph Matrices from the Structures
7	Now there appears to be one feature that is not gaussian
713	Split into train and test sets
446	Random Search on the Full Dataset
647	Leak Data loading and concat
435	Try with All Time Variables
877	Read and Explore
411	In most cases , the values are very similar
517	Train the LGBM model
345	Exploratory Data Analysis
120	Add country details
767	Make new features using continuous feature
154	Plot the Training Curves
238	Librairies and data
531	Create DFs imitating public and private test subsets
215	Featurization of Training Data
818	This notebook will deal with positive , negative and neutral samples independently
711	Using all features for model training
385	Predict test set and make submission
457	Merge with the main dataframe
283	Visualizing Outliers In Data
160	Initialize the generators
34	Apply Underbalancing Techinique
616	Result of my new models
132	Training prediction result visualization
378	y hist with defferent timestamps are similar
613	Reproducing simple baseline
567	Load Model into TPU
152	Key No Diabetic Retinopathy Has Diabetic Retinopathy
764	Check the dataset
487	Kernel Density Estimate Plots
862	Getting Prime Cities
157	Its also builds on kernel functions but is appropriate for unsupervised learning
66	Counting the metric score
177	Basic skin detection
483	Plot for a sanity check
719	Create Inference Dataset
113	FS with the Pearson correlation
217	Importing Packages and Collecting Data
31	Initialize Mobilenet Face Extractor
79	Attributed time analysis
663	what already is known
448	Standard imports for data science work
598	Load Model into TPU
124	Parameters and LB score visualization
313	Training and callbacs
518	Loading the data
828	Perspective of Time
621	Drop the blurry image
246	Document Vectors with TfidfVectorizer
344	Looks like there are no missing values in the dataframe
83	Importation of a entire day data
576	Load Model into TPU
227	Encoding Categorical Variable
394	Initial Position and Momentum
497	Function for KDE Plots of Variable
550	Mismatches on a validation data
290	Main Config Variables
438	Now we can evaluate the baseline model on the testing data
347	Random Forest Regressor
369	using outliers column as labels instead of target column
444	Evolution of Search
671	Binary Focal Loss
464	Grid Search Implementation
185	How many different cars in train dataset
424	Data Exploration and Data Cleaning
364	Compare our forecast with actual evolution both for training and validation sets
259	Analysis based Averages values
354	Interactive booking , click , and percentage of booking trends with Bokeh
808	Explore ip counts
134	Using my notebook
817	Start positions and end positions of selected texts in tokenized source texts
655	Train model by each meter type
114	FS with SelectFromModel and LinearSVR
325	Iran since first case
346	Modeling and Prediction
478	Plots of Hyperparameters vs Score
17	Do some simple plots for exploration
425	Empirical Cumulative Distribution Function Plot
477	Hyperparameters versus Iteration
600	Saving as JPEG
36	Take a look at predictions
546	Custom LR schedule
864	Relationships betweeen the sets
149	Create Binary Targets
631	Split Trian and Valid
309	Let us load one image and its masks
8	Read data set
720	Define dataset and model
391	Price Variance in param
430	Train with Simple Features
87	Deriving individual masks for each object
554	Visualize test processed samples , resize
640	Fast data loading
693	Making Feature Matrices
604	Create test generator
700	Get Tabular Data
746	Check oversampled dataset
499	Function to Calculate Missing Values
262	analyzing the numerical features disturbion in previous application dataset
212	Use of Bayesian Block in Santander Customer Transaction Prediction Challenge
678	Adding categorical features
525	Initialize train and test DataFrames to access IDs and depth information
116	Ensembling the solutions and submission
260	Checking the Correlation Between The Features for Application Train Dataset
271	Visualize the feature interaction
842	Ensure determinism in the results
528	Perform check on randomly chosen mask and prediction
622	Display the dropped images
139	Create a Directory Structure
632	This plot shows summarized information about feature impact against shap output
540	Gaussian Approximation of Active Cases
493	An important consideration is the missing values in the dataframe
789	Target , prediction process
608	Save results as CSV files
377	Divide the test set and the training set
9	Target varaible distribution
835	The Definition of Opacity
231	City and Time features
67	Saving the model
882	We can safely store the two types into separate dataframes
176	Display all test images
299	No Of Storeys Vs Log Error
703	process submission images
799	Predict by Specify Country
423	Submitting our Predictions
773	combination using three features
688	train valid split
37	Ability to Detect Face
408	Redundant Household Variables
500	Function to Aggregate Stats at the Client Level
362	Join all dataframes
280	Top Reordered Products
768	Ratio feature can have infinite values
128	Showing Confusion Matrices
607	Reducing Image Size
505	Train and validate
432	Explore Time Variables
573	Save model and weights
167	How to make a generator run infinitely
845	LOAD DATASET FROM DISK
168	Thanks to Automatic FE The main code for basic FE
418	Comparing Model Performance
702	process test images
390	Price Variance Within Identified Items
516	Predict validation and test set masks
2	Seems like a very wide range of values , relatively spaking
