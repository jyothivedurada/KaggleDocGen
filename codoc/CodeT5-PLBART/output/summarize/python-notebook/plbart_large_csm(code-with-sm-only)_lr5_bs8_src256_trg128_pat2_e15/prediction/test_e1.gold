95	Create a Classification Report
480	Make prediction and apply invert scaling
224	Select the models to run setting bool variables below
506	Random Forest model
147	Fitting Logistic Regression with OneVsRest Classifier
68	Can we get some informations out of the item description
41	Prepare Traning Data
23	Apply Underbalancing Techinique
327	Testing Results on Full Data
185	Apply reduction on some samples and visualize the results
285	Machine Learning Modeling
304	Visualize Validation Predicted Target
495	Run on validation dataset
229	most important or common positive words
156	Square feet size is positively Skewed
370	inspect datagen output
589	Replace infs and imputing missing values by mean
62	Deriving individual masks for each object
246	a quick check if demand distribution changes week to week
474	process test images
565	LOAD DATASET FROM DISK
481	Using all features for model training
455	Train Our Linear Regression Model
446	At first , I made Europe future
413	Save results as CSV files
16	Seed everything for reproducibility
126	Its also builds on kernel functions but is appropriate for unsupervised learning
558	If you like the content of this notebook , please consider upvoting it
571	Loading libraries and data
501	Check saved checkpoints
24	The data is not balanced
519	combination using three features
119	Load data files
575	Explore distribution of single variable
11	Maybe if we used the log plot things would be better
445	make hour column from transactionDT
477	Split into train and test sets
270	Start by pivoting the DataFrame to explore the label distribution over slices
248	Read the csv files on the Johns Hopkins CSSE database on github
116	FS with the Pearson correlation
440	Fast data loading
405	Unhide below to see all trials results
366	Get important features according to SHAP
544	Conversions by Device
109	Plot the Loss Curves
203	Room Count Vs Log Error
77	FS with the Pearson correlation
227	Full data Analysis
209	Text Processing of text data easily
139	Using RandomForest Classifier
451	OUTPUT OF AUGMENTATED IMAGES
483	Make a Baseline model
459	targets in train.csv
420	Other columns are the digital value of pixels of kannada mnist
520	Mix region and education
321	Aggregate Credit previous loans
504	Define the number of repetitions for each class
160	Variable Description , Identification , and Correction
14	The Shape of the Data
452	Then transform to a datetime object supposing that it is an ordinal datetime
392	Plotting some random images to check how cleaning works
111	Process the Predictions
219	China scenario since first entry
476	we add some squared features for some model flexability
178	Types Of Features
217	Now a look at Italy
169	Loading the data
309	Applied to Full Dataset
410	Pad and resize all the images
353	Predict validation and test set masks
406	Save model and best hyperparams
168	MERGE , MISSING VALUE , FILL NA
271	As a Neuroradiologist , this distribution looks pretty true to daily practice
159	Prediction and Submission
118	FS with SelectFromModel and RandomForestRegressor
130	Define some constants for data location
512	Data preparation for test
398	Load text data into memory
552	At the scale of stores
92	Balance the target distribution
225	Calculating the day when the number of infected individuals is max
158	Encoding Categorical Variable
365	SHAP Interaction Values
59	Importation of a entire day data
267	Affected Surface Object
112	Create the submission csv file
331	Remove Low Importance Features
262	Ordinal features mapping
49	Saving the model
273	Combinations of TTA
249	Transpose the dataframes
176	Importing The Dataset
534	You only have two areas to work on
290	Lets first check the Train Target Distribution
472	Get Tabular Data
122	Get the dupplicate clicks with different target values
79	Parameters and LB score visualization
439	Leak Data loading and concat
348	Granted applications per number of children
183	Paths to data and metadata
579	Feature primitives Basically which functions are we going to use to create features
457	Sampling the train data since too much data
310	Random Search on the Full Dataset
343	Monthly Cash Data
37	Convert to lower case Clean contractions Clean special charactor Convert small caps
91	Create a Dataframe containing all images
163	Seting X and Y
566	The mean of the two is used as the final embedding matrix
430	Split Trian and Valid
215	Prediction on test set
52	Hist Graph of scores
27	Loading data etc
538	Predict all country greater than
494	Choose the model to use
48	Counting the metric score
554	Load train and test dataframes and add length columns for Description and Name
187	Interpreting ROC Plot
240	Predict on test set
315	Drop Correlated Variables
408	Will need those folders later for storing our jpegs
503	Get labels and their countings
193	When Do People Generally Reorder
161	Encoding Street Names
137	Confusion Matrix for Train Data Predictions
238	Random Forest Regressor
382	First downsize all the images
429	Pick some frames to display
211	So a unique operator will give us the unique filenames that contain ships
317	Merge with the main dataframe
145	Word map for most frequent Tags
409	Create new labels
533	Logistic Regression seems to be a good classification algorithm for this dataset
543	Explore ip counts
26	Ability to Detect Face
444	what already is known
281	Redundant Individual Variables
346	Prediction for one image
254	Non physical data augmentation
94	What is the AUC Score
306	Now we can evaluate the baseline model on the testing data
371	This images from validation data seem to be really strange labeled ...
25	Take a look at predictions
99	Create a submission file
120	Set up the folds for cross validation
385	Creating and Training the Model
268	All Zero Features
389	Group and Reduce
557	Opacities That Are Not Related to Pneumonia
242	Bookings by year
303	Try with All Time Variables
113	What is a python generator
108	Initialize the generators
18	Unfreeze all layers and find best learning rate
263	Predict test set and make submission
102	Train Test Split
580	Label encoding Making it machine readable
140	Confusion Matrix for Train Data Predictions
377	OSIC training data Example
505	Check oversampled dataset
295	Rides on Map of NYC
380	Load Model into TPU
347	Train and validate
252	using outliers column as labels instead of target column
195	Visuallizing Interest Level Vs Bathroom
279	Per Capita Features
127	Thanks for the example of ensemling different models from
61	Dealing with color
325	First , we need to put our data into a long format dataframe
293	Data Exploration and Data Cleaning
341	Aggregated Stats of Bureau Balance by Client
441	Find Best Weight
324	Grid Search Implementation
260	Import necessary libraries
30	Training on the complete Dataset now
518	Ratio feature can have infinite values
214	For the same window we superimpose the masks above the image
31	Data loading and checking
462	Get Model into TPU
188	Load data and fit some models
247	Read the csv files from kaggle
152	Time of Day and Meter Reading
397	Create fast tokenizer
177	Function for find out Numerical and categeical Variables
179	Analysis based Averages values
206	Composition of Augmentations
105	Its also builds on kernel functions but is appropriate for unsupervised learning
265	Use Ad Image to Identify Item Category
314	Identify Correlated Variables
541	Difference varialbes were created to describe the difference beween maximum and minimum value
531	Null data check
226	Lets gets started
269	Show Original Image
355	Loading the data
437	Leak Data loading and concat
298	Train with Simple Features
458	targets in labels.csv
549	Write a problem file
450	Importing Library Files
222	USA since first case
578	NOTE Even tough it is automatic , we can incorporate some manual features
253	Check Unique Label
524	Check null data
230	Most important or common negative words
83	Thanks for the example of ensemling different models from
576	We can see above the counts of higher damageDealt smoothly decrease
356	and batch aggregations examples for the rest of the tables ..
407	Load Model into TPU
456	Next , we will make prediction with our LR Model
78	FS with SelectFromModel and LinearSVR
423	Creating submission file
471	Create Image Augmentation Generator
73	Import Required Libraries
516	Check null data
427	Ensemble with my historical best
425	Predict with pure text models
447	There is a gap between them
87	Code from notebook
205	Gaussian Noise on Target
328	DFS with Default Primitives
220	Spain since first recorded case
585	What should good EDA be capable of
426	Predict with mixed language models
291	Filling missing and infinite data by zeroes
180	Checking the Correlation Between The Features for Application Train Dataset
582	Let us split the variables one more time
499	Choose the model to use
593	We can safely store the two types into separate dataframes
326	Distribution of Search Values
349	Income distribution and target value
492	Hugging Face pretrained Bert model names
100	Create Binary Targets
465	Making Feature Matrices
114	How to make a generator run infinitely
460	These labels are not in train
574	Lib and Load data
296	The test distribution seems to be similar to the training distribution
354	Train the LGBM model
537	Predict by Specify Country
443	Leak Data loading and concat
241	Bookings per day of week
311	Bayesian Optimization on the Full Dataset
245	expanding the aggregate
361	Set data loading parameters
319	Aggregate Installments Data
379	TPU Strategy and other configs
378	Predict Test Set and Submit Result
128	Manager function to call the create features functions in multiple processes
32	Unique value counts
12	Look at the data types and some basic info about the different columns
453	Most of the dates overlap
381	Create fake filepaths dataframe
182	analyzing the numerical features disturbion in previous application dataset
132	Lets validate the test files
320	Aggregate Cash previous loans
526	Moving average is so simple
154	Meter Readings over time
124	Apply skin segmentation on all training data and visualize the result
88	My upgrade of parameters
373	Load Packages and Data
340	Putting the Functions Together
432	Plotting errors for one sample
153	Primary Use and Meter Reading
433	train solved tasks
335	First we need to format the data and extract the labels
63	Convert each labeled object to Run Line Encoding
424	Build the original and translated test data
467	Visualize by heatmap
486	Create Inference Dataset
417	Comparing various kappa scoring
294	Empirical Cumulative Distribution Function Plot
523	Load and preprocess data
204	No Of Storeys Vs Log Error
21	And finally lets look at the class distribution
412	Reducing Image Size
438	Fast data loading
359	Prepare for training
149	Variable Description and Identification
280	In most cases , the values are very similar
330	Visualize Distribution of Correlated Variables
15	Importing all Libraries
461	TPU Strategy and other configs
13	Getting to Know the Data
418	Relevant attributes of identified objects are stored
478	Convert an array of values into a dataset matrix
592	Load CSV files
369	load mapping dictionaries
540	Age distribution of male and female patients
403	Evaluate training history
358	extract different column types
134	Test on the data that is not seen by the network during training
584	Save some memory
20	Data is still small enough for memory so read to memory using pandas
284	Next we can rename the columns to make it easier to keep track
532	It seems Goblins are a little similar to Ghouls
416	Infer using trained model
508	Show influence of economical factors on housing prices
496	Get metrics for validation dataset
500	Get variables to apply weight decay in AdamW optimizer
104	Define X and y
64	So , some categories are expensive , but most are cheap
484	Create dataset for training and Validation
117	FS with SelectFromModel and LinearSVR
394	Load text data into memory
396	Load model into the TPU
502	An example usage
150	Meter Reading and Meter Type
553	Disable fastai randomness
151	Weekday and Meter Reading
51	Make a simple restart of runtime at this point
255	Check if valid data looks all right
171	Document Vectors with TfidfVectorizer
1	Imputations and Data Transformation
466	Count game trainsition
207	Loading and preprocessing data
545	Preparing the data
234	Load and Explore Data
391	Refit and Submit
536	Predict by Specify Province
223	Getting population for each country
261	High cardinality features
216	Replacing Mainland china with just China
513	Convert DCM to PNG
485	CNN Model for multiclass classification
569	Add leak to test
384	Load and freeze DenseNet
0	Seems like a very wide range of values , relatively spaking
336	Properly Representing Variable Types
3	Detect and Correct Outliers
85	Prepare Training Data
564	SAVE DATASET TO DISK
82	Its also builds on kernel functions but is appropriate for unsupervised learning
299	Use More Features
350	Read the data
548	For neutral samples , use original texts as they are
388	Pad and resize all the images
372	Process test data in parallel
509	Best parameters are searched by GridSearchCV on my Laptop
74	Apply Logistic Regression
181	Merging the bureau dataset along with application train dataset to do more analysis
449	They are very similar to each other
142	Converting the Input images to plot using plt
233	Import Packages and Functions
256	missing value statistics
431	This plot shows summarized information about feature impact against shap output
448	Model Evaluation and Validation
133	Idea is to use clustering on images of one type to group data
200	No Of Storey Over The Years
286	The data has no missing values and is scaled between zero and one
28	Show and save column comparision matrix and save row sets
510	Set Model for prediction
121	Genetic program model , main code loop
305	Evaluate Best Model from Random Search
387	Padding process and resizing with OpenCV
259	Save objects for next step
300	Explore Time Variables
342	Calculate Information for Testing Data
435	All train tasks predictions
479	Create dataset with look back
110	Make a Prediction
404	Load and preprocess data
34	FVC Progression by SmokingStatus
173	Document Vectors with hashing trick
517	Make new features using continuous feature
312	Standard imports for data science work
232	and target vector that correspond to the test data size
19	Predicting for test data
197	Correlation Between Price and Other Features
93	Set Up the Generators
292	Submitting our Predictions
6	Read data set
244	Interactive booking , click , and percentage of booking trends with Bokeh
363	Create DFs imitating public and private test subsets
497	Run on test dataset
90	How many images are in each folder
53	I updated importation for a faster version
386	Save model and weights
141	Confusion Matrix for Test Data Predictions
5	Now there appears to be one feature that is not gaussian
210	Let us read the masks
415	Load Test dataframe
84	Parameters and LB score visualization
550	Plot the obtained tour
587	Applying it on text
323	Learning Rate Domain
107	Load the pre processed data
277	Redundant Household Variables
421	Drop the blurry image
282	For example , we can divide the years of schooling by the age
71	Is there a correlation between description length and price
96	MAKE A TEST SET PREDICTION
482	These have their kitchen area larger than the total area of the house
186	Rescaling the Image Most image preprocessing functions want the image as grayscale
239	Feature Agglomeration Results
283	Feature Engineering through Aggregations
22	The data is not balanced
7	Text preprosesing source
307	Example of Sampling from the Domain
442	Fast data loading
231	Most important or common words in neutral data
4	No surprises , since this is all presumably artificial data
106	Thanks for the example of ensemling different models from
70	Can the length of the description give us some informations
498	Hugging Face pretrained Bert model names
175	Creating the Model
547	This notebook will deal with positive , negative and neutral samples independently
33	FVC Progression by Sex
235	Create the embedding layer
375	and background color definition
184	Group signals metadata accroding to target
551	Import libraries and data , reduce memory usage
38	Predict submission dates
302	Test Time Features
436	Fast data loading
489	Compare timing for CutMix
542	Here is a base model without parameter tuning .
568	Add train leak
57	Attributed time analysis
97	Set up the generator
66	What are their top categories
65	Prices of the first level of categories
390	Adding mode as feature
581	NaN imputation will be skipped in this tutorial
136	Using DecisionTree Classifier
334	Plots of Hyperparameters vs Score
414	Training the model
172	Document Vectors with HashingVectorizer
588	Read and Explore
135	The number of samples in each cluster is the following
344	Monthly Credit Data
428	This is a simple modify from
383	Create real file paths dataframe
123	Basic skin detection
86	Divide features into groups
329	DFS with Selected Aggregation Primitives
400	Load model into the TPU
190	Lets Read In Data Files
45	Create Testing Generator
583	That is the size of one test example that we ought to predict
288	Recursive Feature Elimination with Random Forest
507	Data transformation and helper functions
35	Count occurance of words
399	Build datasets objects
546	Use machine learning model
454	Rolling monthly and yearly store means
529	Onehot encoding for categorical data
213	Now we can read the masks for the specific image
522	Feature selection using shap
511	Test data preparation
157	Imputing Missing variable
376	Add the actors to the renderer , set the background and size
490	Compare timing for MixUp
411	Create test generator
39	Using LabelEncoding we just change string values to numbers
42	See sample image
530	Target , prediction process
237	Imputing missing values
101	Balance the target distribution
313	Now we want to combine the data without creating any duplicate rows
251	filtering out outliers
272	Demonstration how it works
36	All contraction are known
493	Make TF record file for test dataset
337	Putting it all Together
58	Download rate by hour
362	Perform check on randomly chosen mask and prediction
528	Predict null data based on statistical method
351	Check the typical length of a comment
228	Seperating the data into different data frame based on the labels
338	Correlations of Aggregated Values with Target
167	Loading the data
46	Split the data into train and validation parts
473	process training images
17	Defining DataBunch for FastAI
55	Zoom on this IP
333	Distribution of Scores
560	The evaluation method
402	Load and preprocess data
9	And now we embed each chunk individually
364	Distribution of months in train and test
258	y hist with defferent timestamps are similar
250	Join all dataframes
208	Preprocessing of features
301	We can make the same plot by day of the week
76	Thanks to Automatic FE The main code for basic FE
275	Addressing Wrong Labels
50	You can state below link to your copy of this MMDetection repo
146	Featurization of Training Data
162	Encoding Cordinal Direction
264	Remove Extreme Prices
115	Thanks to Automatic FE The main code for basic FE
555	What Does a Normal Image Look Like
395	Build datasets objects
174	Keras Tokenizer API
201	Bedroom Count Vs Log Error
487	Define dataset and model
164	Loading the data
562	Ensure determinism in the results
393	Load and process data
401	Inference on Test Set
196	Visualizing Interest Level Vs Bedrooms
103	Set Up the Generators
470	Number of Patients and Images in Test Images Folder
488	Prediction for test
257	y的异常值 drop samples which have exception value in y
29	Preparing the training data
2	Impute any values will significantly affect the RMSE score for test set
357	load mapping dictionaries
289	Visualize Tree with No Maximum Depth
218	Comparison between Brazil and Italy
515	Check the dataset
54	How many different values does our categorial variables take
129	How many different cars in train dataset
559	Composition of functions
202	Bathroom Count Vs Log Error
322	Hyperparameter Tuning Implementation
131	Code from here and below is commented out because the kernel dies
567	The method for training is borrowed from
591	Evaluate the Model
590	RF for feature selection
586	Reading in the data , as usual
468	View Single Image
72	Graph Representation of RNA structure
561	Solve the task
80	Ensembling the solutions and submission
525	Check the dataset
274	Read in Data and Look at Summary Information
527	Find Null data
170	Create Document Vectors
47	Create and set up the model
60	We can now print the results
89	Using my notebook
199	Create final submission DF
577	Getting Prime Cities
419	Import the modules
464	Making Vocabulary and Text Conversion
10	And it looks like a fairly nice distribution , albeit still fairly asymetrical
189	Bounded region of parameter space
138	Confusion Matrix for Test Data Predictions
463	Loading and Visualization of Data
67	Does shipping depends of price
475	process submission images
166	MERGE , MISSING VALUE , FILL NA
144	CatBoost is RAM expensive so I prefer to utilize GPU
192	At What Day Of The Week People Order
69	What words do people use
236	Build the Model
278	Creating Ordinal Variables
521	Remove feature with only one value
98	Make a prediction on the test images
155	Meter Readings over time And Primary Use
81	Implementing the SIR model
266	Price Variance Within Identified Items
352	Define helper functions
374	Outlier Analysis and Feature Scaling
308	Learning Rate Distribution
556	What are Lung Opacities
287	Comparing Model Performance
563	LOAD PROCESSED TRAINING DATA FROM DISK
469	Number of Patients and Images in Training Images Folder
572	You can choose many palettes , which makes the graphs visually nice
297	Create Training and Validation Set
573	The competition metric relies only on the order of recods ignoring IDs
339	Function to Handle Categorical Variables
125	Some stats using jpg exif
43	See how our generator work
368	Gaussian Approximation of Active Cases
243	Bookings by month
75	Comparison of the all feature importance diagrams
332	Align Train and Test Sets
40	Using embedding in NN we can change dimensionality of categorical features
514	Predictions class distribution
56	Does bots download the app
491	Compare timing for GridMask
367	Exponential Growth Curves
44	Prepare Testing Data
8	Model Validation on train data set
221	Iran since first case
318	Aggregate previous loans at Home Credit
165	Librairies and data
198	Main Config Variables
194	How many orders users generally made
539	Predict all province greater than
276	Families without Heads of Household
535	Add active column
422	Display the dropped images
143	Data load and process functions
360	Initialize train and test DataFrames to access IDs and depth information
212	Let us load one image and its masks
570	Function which creates final video from list of images
316	Combined Aggregation Function
148	Importing Packages and Collecting Data
191	When Do People Generally Order
434	evaluation solved tasks
345	Split into training and validation groups
