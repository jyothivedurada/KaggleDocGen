0	Convert XML data to a list of URLs .
1	Download a Dail motion site .
2	Download from Sina .
3	Return a string representation of the given text .
4	Print a log to stderr .
5	Print an error message and exit .
6	Print a message and exit .
7	Return a string describing the OS .
8	Downloads videos from vimeo .
9	Get information about a video .
10	Return a video url from a video id .
11	Return the real M3U url and segments_size
12	Strip leading and trailing spaces from the given text .
13	Download by pid and title .
14	Download a stream .
15	Download by VID .
16	Return a list of strings that match all of the given patterns .
17	Parse a query parameter from a URL .
18	Get the content of a URL .
19	POST content to url .
20	Parse host and return hostname and port .
21	Get roomid from showroom - live .
22	Return the title of the topic part .
23	Downloads all topics in the given json_api_content .
24	Download by course topic part .
25	Return True if there is a task for the given task instance .
26	Get the event buffer for the given dag_ids .
27	Get a snowflake connection .
28	Return the AWS access key and secret access key .
29	Returns the value for the given field name .
30	Copy expert data to a file .
31	Copy data from a table to a temporary file .
32	Executes the upload operation .
33	Get the maximum number of rows in a table .
34	Get a connection to the database .
35	Get the current state of a task
36	Restarts all workers in the gunicorn master process .
37	Get a connection to the server .
38	Translates the given values to the given target language .
39	Get information about an instance .
40	Create a new instance .
41	Updates an instance .
42	Delete an instance .
43	Get information about a database .
44	Create a new database .
45	Patch a database .
46	Delete a database .
47	Export an instance .
48	Starts the sql proxy .
49	Stops the sql proxy .
50	Returns the version of the SQL Server .
51	Create a connection to the database .
52	Retrieve a connection from the database .
53	Delete a connection .
54	Return an instance of CloudSqlProxyRunner .
55	Gets the database hook .
56	Cleanup the database hook .
57	Reserve free TCP port .
58	Normalizes a ML Engine job_id .
59	Get the error code from an exception .
60	Removes all DagRun records from the database .
61	Removes all task instances from the database .
62	Sets the paused state of all dags in the database .
63	Print statistics about the task instances .
64	Check to see if all the tasks in perf_dag_1 and per_dag_2 have a schedule interval
65	Invoke a Lambda function .
66	Create evaluate operators for the given data_format .
67	Create a directory .
68	Convert string to float if possible .
69	Converts a naive datetime to a timezone - aware datetime .
70	Converts a naive datetime to a naive datetime .
71	Return a datetime object for the given arguments .
72	Get a connection to druid broker .
73	Return a requests . Session object for the given connection .
74	Send the request to the given endpoint .
75	Raise AirflowException if the response is not valid .
76	Execute a prepped request and check the response .
77	Context manager to create a session .
78	Decorator to provide a session for a function .
79	Remove all tables from the database .
80	Returns a pretty representation of an exception .
81	Returns a list of records matching the given query .
82	Get a pandas dataframe from a query .
83	Runs the query .
84	Insert rows into a table .
85	Gets the Cosmos API client .
86	Checks if a collection exists .
87	Create a new collection .
88	Checks if a database exists .
89	Create a new database .
90	Delete a database .
91	Delete a collection .
92	Insert a list of documents into a collection .
93	Delete a document .
94	Get a document .
95	Returns a list of documents matching the given SQL query string .
96	Get a function by name .
97	Create a new function .
98	Updates a function .
99	Uploads a zip file to the specified location .
100	Delete a function .
101	Gets all task dependencies for the given ti .
102	Checks if the given ti is met .
103	Gets all failure reasons for the given ti .
104	Parse S3 config file .
105	Returns a list of credentials for the given region .
106	Get a connection to the vertica database .
107	Flush the buffer .
108	Check if fileloc is a zip file .
109	Return a list of file paths for the given directory .
110	Constructs a TaskInstance for this task .
111	Starts the DagFileProcessorManager .
112	Terminate the Dag parsing .
113	Exit gracefully upon receiving a signal .
114	Starts the DagFileProcessorManager .
115	Starts the Dag parsing process in an asynchronous way .
116	Starts the Dag parsing process in - sync .
117	Refresh the Dag directory .
118	Print file processing stats .
119	Remove all import errors from the database .
120	Log file processing stats for the given file paths .
121	Sets the file paths to the given file paths .
122	Wait until all worker threads have finished .
123	Heartbeat of the DagFileProcessor .
124	Terminate all child processes .
125	Create SSH connection to remote host .
126	Create a new transfer job .
127	Get the details of a transfer job .
128	Returns a list of all jobs that match the filter .
129	Updates an existing transfer job .
130	Delete a GCP transfer job .
131	Cancels a transfer operation .
132	Pauses a transfer operation .
133	Resumes a transfer operation .
134	Wait for a GCP transfer job to complete .
135	Return a TaskReschedule object for the given task instance .
136	Return the number of slots in the pool .
137	Run a command and return its output .
138	Removes an option from a section .
139	Get the configuration for a section .
140	Return a list of keys allocated to this project .
141	Begin a transaction for this project .
142	Commit changes to the project .
143	Look up the project with the given keys .
144	Rollback a transaction .
145	Runs a query .
146	Get an operation by name .
147	Delete an operation .
148	Poll an operation until it is done .
149	Export project data to storage bucket .
150	Import a file from a storage bucket .
151	Publish a message to a target .
152	Gets the hostname of the host .
153	Gets the connection to the service .
154	Analyze entities in a document .
155	Annotates a text document .
156	Classify a text document .
157	Return a list of template fields for the given class .
158	Create a role for a template field .
159	Disposes the connection pool .
160	Adds configuration and plugins to sys . path .
161	Checks the task id for the target task .
162	Return True if there is an X - Cache configuration variable present in the config file .
163	Convert a SQLAlchemy object to a dictionary .
164	Split items into chunks of size chunk_size .
165	Reduce the elements of an iterable in chunks .
166	Chain multiple tasks together .
167	Print a table from a list of rows .
168	Render a log filename .
169	Return an instance of dataproc services facade .
170	Wait for an operation to complete .
171	Return a deep string representation of a nested dictionary .
172	Handles the databricks operator execution .
173	Runs a PIG script .
174	Fetch the current state of a celery task .
175	Return the number of tasks per send process .
176	Return the number of tasks per fetch process .
177	Return the default value for the given key .
178	Get a connection to LXC .
179	Create a ML Engine job .
180	Get a MLEngine job .
181	Wait for a job to complete .
182	Create a new version .
183	Set the default version for a project .
184	Returns a list of versions for the given project and model .
185	Delete a version .
186	Create a new model .
187	Get a model by name .
188	Writes batch data to DynamoDB .
189	Integrate all the executors modules .
190	Return the default executor .
191	Return an executor for the given executor name .
192	Called when a segment error occurs .
193	Return a pymssql connection to the database .
194	Trigger a Dag .
195	Delete a Dag .
196	Get information about a task .
197	Return a list of all configured pools .
198	Create a new pool .
199	Delete a pool .
200	Create or update a container group .
201	Returns a tuple of state exitcode and detail status of an instance .
202	Returns a list of all messages for the given instance view .
203	Returns a list of logs for a container .
204	Delete a container group .
205	Checks if a container group exists .
206	Decorator to apply default parameters to a function .
207	Constructs an ingest query for the given columns .
208	Pushes a message to one of the channels .
209	Return a DagRun object for the given parameters .
210	Get all task instances for this dag .
211	Get a TaskInstance for the given task_id .
212	Get the previous DagRun .
213	Get the previous scheduled DagRun .
214	Updates the state of all tasks in the current Dag .
215	Verify that all tasks in the dag are in the same state .
216	Sends a Jenkins request to the Jenkins server and returns the response as a dict .
217	Convert context to AIRFLOW variables .
218	conditionally trigger a DagRun object .
219	Send a metric to a datapoint .
220	Query Metric .
221	Return a Dag instance corresponding to the given dag_id .
222	Kill a list of zombies .
223	Bags all subdags of the given dag .
224	Return a list of all DagBags in the given folder .
225	Generate a DagBag report .
226	Add a number of days to a dataset .
227	Format ds to output_format .
228	Return True if the file should be processed .
229	Return True if the file should be overwritten .
230	Removes all task instances from the database .
231	Return the try number for this task .
232	Generate a command to run a task .
233	Return the current state of this task instance .
234	Record the task instance as FAILED .
235	Refresh the task instance from the database .
236	Removes all XCom data associated with this task .
237	Return the key for this task .
238	Checks if this task is dependent on other tasks .
239	Return the next retry datetime for this task .
240	Return True if retry is ready for retry .
241	Check if the pool is full .
242	Get a DagRun object for the given session .
243	Push a new value into the execution date of this task .
244	Pull a list of tasks from the database .
245	Initializes the run context .
246	Close the logger .
247	Get a connection to the compute instance .
248	Start an instance .
249	Set the machine type for a resource .
250	Get information about an instance template .
251	Insert an instance template .
252	Get information about an instance group manager .
253	Update an existing instance group manager .
254	Wait for an operation to complete .
255	Check to see if a bucket exists .
256	Create a S3 bucket .
257	Check if prefix is present in bucket .
258	Returns a list of all prefixes for the given bucket .
259	Returns a list of all keys in a bucket .
260	Check if a key exists in S3 .
261	Get an object from S3 .
262	Read a key from S3 .
263	Select a key from S3 .
264	Checks if a wildcard key exists .
265	Get a key matching a wildcard key .
266	Load a file from S3 .
267	Load a string from S3 .
268	Load a file - like object from S3 .
269	Load a file - like object from S3 .
270	Copy an object from one bucket to another .
271	Query the Cassandra database .
272	Convert a user type to a dictionary .
273	Sends an email to one or more recipients .
274	Get an instance of SpeechClient .
275	Recognize a speech .
276	Executes the query .
277	Load entry point plugins .
278	Check if plugin_obj is a valid plugin .
279	Skip one or more tasks from a DagRun
280	Gets an AzureDLFileSystem API connection .
281	Checks whether the file at file_path exists .
282	Upload a file to ADL .
283	Return a list of files under the given path .
284	Execute the query .
285	Uncompress a file .
286	Query MsSql database .
287	Decorator to add logging to CLI functions .
288	Build metrics for the given function and namespace .
289	Create a cgroup at the given path .
290	Delete a cgroup .
291	Parse a host string and return it .
292	Perform API call .
293	Get a Salesforce connection .
294	Make a query for all objects .
295	Get information about an object .
296	Returns a list of all available fields for the given object .
297	Makes a query to retrieve objects from Salesforce
298	Convert a column to a timestamp .
299	Writes the query results to a file .
300	Return a connection to the database .
301	Return a collection object for the given mongo_collection .
302	Replace multiple documents in a collection .
303	Checks if an email attachment exists in the specified folder .
304	Returns a list of attachments for the given name .
305	Downloads all mail attachments for the given name .
306	Returns a list of attachments with the given name .
307	Return the filename and payload of the file .
308	Updates one or more records in the delivery stream .
309	Gets the status of the task that should be rescheduled .
310	Send email to a list of email addresses .
311	Send an e - mail to the SMTP server .
312	Process a result value .
313	Check if a blob exists .
314	Checks if there is a blob with the given prefix .
315	Load a string into an S3 bucket .
316	Read a file from a container .
317	Delete a file from a container .
318	Return a list of facts for a given path .
319	Get FTP connection .
320	Return a list of all files in a directory .
321	Retrieve a file from FTP .
322	Store the file at remote_full_path into local_full_path .
323	Get modification time for a path .
324	Execute the bot .
325	Get a connection to the file service .
326	Check if a directory exists .
327	Checks if a file exists in the specified directory .
328	Returns a list of all directories and files in a directory .
329	Create a directory .
330	Load a file from a file path .
331	Load a file from a text file .
332	Load a file from a stream .
333	Gets the connection to storage .
334	Copy an object from one bucket to another .
335	Download a file from S3 .
336	Upload a file to a bucket .
337	Check if an object exists in a bucket .
338	Check if an object is updated after a given timestamp .
339	Delete a blob .
340	Returns a list of blobs in a bucket .
341	Returns the file size of an object in a bucket .
342	Get the crc32c checksum of an object in a bucket .
343	Get the md5 hash of an object in a bucket .
344	Create a new bucket .
345	Composes the given source objects to the given destination object .
346	Checks if the secondary training status has changed .
347	Returns a list of secondary training status messages for the given job and previous description .
348	Upload a file or directory to S3 .
349	Configure S3 resources .
350	Check if the input S3 URL is valid .
351	Get an instance of the logs API .
352	Create a training job .
353	Create a new hyper parameter tuning job .
354	Create a transform job .
355	Create a new endpoint .
356	Given a list of training jobs and a list of log streams .
357	Checks the status of a SageMaker job .
358	Checks the training status of a training job .
359	Execute a dataflow job .
360	Runs all migrations .
361	Run all migrations .
362	Delete an instance .
363	Create an instance .
364	Create a table for the given instance .
365	Delete a table .
366	Updates a cluster .
367	Prepares the command to be executed .
368	Convert a dictionary to a list of key = value pairs .
369	Load a DataFrame from a table .
370	Load data from a text file .
371	Return a thrift . Thrift . Thrift . Thrift . Thrift . Thrift . Thrift . Thrift . Thrift . Thrift . Thrift . Thrift . Thrift . Thrift . GSSAPI .
372	Checks for a named partition .
373	Checks if a table exists .
374	Get a connection to the Hiveserver2 database .
375	Get the results for a given query .
376	Writes results to a csv file .
377	Returns a list of records matching the given criteria .
378	Returns a pandas dataframe from the results of a query .
379	Get an instance of ProductSearchClient .
380	Get an endpoint to send to .
381	Send Dingding message to Dingding Webhook .
382	Bind parameters to an operation .
383	Replace special characters with backslashes .
384	Cast a string field to a BQ type .
385	Validate that a value is of the expected type .
386	Gets a BigQueryConnection for this query .
387	Get a bigquery service .
388	Checks if a table exists .
389	Create an empty table .
390	Updates an existing table .
391	Cancels the query .
392	Runs a table delete .
393	Updates an existing table .
394	Grant a view access to a dataset .
395	Returns a dataset resource for the given dataset_id .
396	Returns a list of datasets for the given project .
397	Inserts multiple rows into a single table .
398	Executes an operation on the database .
399	Executes the given operation with the given sequence of parameters .
400	Gets the next result from the query .
401	Query the database .
402	Create intermediate directories for remote_directory .
403	Create a queue .
404	Sends a message to a queue .
405	Run a command .
406	Called when the session is finished .
407	Main entry point for nvd3 .
408	Builds the HTML header .
409	Builds the HTML for the container .
410	Builds the JS chart .
411	Create an x axis .
412	Create a Y axis .
413	Get a connection to the database .
414	Decorator to add logging to the session .
415	Decorator to gzip - compress a response .
416	Get the last DagRun for the given DagRun ID .
417	Create a new DagRun .
418	Send a message to the queue .
419	Return a JSON response from an object .
420	Open a file if it is a zip file .
421	Create a cache key for a request .
422	Returns an instance of VideoIntelligenceServiceClient .
423	Annotates a video .
424	Get Osidie API Key .
425	Return a requests . Session object for the HTTP connection .
426	Execute the Alert API .
427	Build an opsgenie payload .
428	Execute an Opsgenie alert .
429	Gets the connection to the client .
430	Runs a query .
431	Checks the status of a query .
432	Poll the status of a query .
433	Return a pysftp . Connection object for this connection .
434	Handles rate limit exception .
435	Call the Zendesk API .
436	Returns a list of partitions for the given database and table .
437	Get information about a table .
438	Get the location of a table .
439	Returns the status of a cluster .
440	Delete a cluster .
441	Returns a list of snapshots for the given cluster .
442	Restores a cluster from a cluster snapshot .
443	Create a cluster snapshot .
444	Execute a Slack API call .
445	Create a new job flow .
446	Filter for filesize in files .
447	Filter result for ignored extensions .
448	Execute a query against S3 .
449	Get a pool .
450	Create a new pool .
451	Delete a pool .
452	Converts a Python dictionary to a protobuf .
453	Wait for an operation to complete .
454	Get information about an operation .
455	Appends a label to the cluster proto .
456	Create a cluster .
457	Get a cluster .
458	Get webhook endpoint from webhook_endpoint or http_conn_id .
459	Build a JSON representation of the discord message .
460	Execute the bot .
461	Encrypts the given plaintext with the given key .
462	Import a table into the database .
463	Import a query into the database .
464	Export a table .
465	Get an instance of TextToSpeechClient .
466	Synthesize input data .
467	Close connection to S3 .
468	Return a list of init containers .
469	Return a dictionary of environment variables for the worker .
470	Return a list of Secret objects for each environment .
471	Gets the security context for the worker .
472	Get extra links for the given operator .
473	Heartbeat for this job .
474	Launch a new process .
475	Starts the DagFileProcessor .
476	Return True if the job is done .
477	Exit gracefully upon receiving a signal .
478	Update the errors of the imported files .
479	Process the task instances in the given DagRun .
480	Change the state of the tasks in simple_dag_bag to new_state .
481	Get the concurrency maps for the given states .
482	Change the state of the task instances to a list of acceptable states .
483	Enqueue task instances with queued state .
484	Execute the task instances for the given simple_dag_bag .
485	Change the state of the tasks failed to execute .
486	Processes all executor events for a simple_dag_bag
487	Process the given file_path for the given zombies .
488	Update the counters for the given task instance .
489	Manages the state of the running tasks .
490	Get a DagRun for the given date .
491	Return a dictionary of task instances for the given dag_run .
492	Execute the task instances for the given dates .
493	Set all unfinished dag_runs to failed .
494	Executes the BackfillJob .
495	Heartbeat callback .
496	Returns a client for the given project .
497	Get a single instance .
498	Apply a function to an instance .
499	Create a new instance .
500	Updates an instance .
501	Delete an instance .
502	Gets the database for the given database_id .
503	Create a new database .
504	Updates an existing database .
505	Delete a database .
506	Checks if the attachment is in the mailbox .
507	Prepare additional parameters for image_context .
508	Get a connection to the database .
509	Check if a table exists in the cluster .
510	Check if a record exists in the database .
511	Builds the command to poll for driver status .
512	Submit a Spark application .
513	Process the spark submit log .
514	Process Spark driver status log .
515	Return a task runner for local task job .
516	Wait for the job to complete .
517	Query MySQL database .
518	Create a CSV file from a file handle .
519	Writes the schema to a local schema file .
520	Return a dictionary of column types for the schema .
521	Map a MySQL type to a string .
522	Execute the query .
523	Decorator to apply a lineage to this operator .
524	Return extra data in json format .
525	Return a list of dates between start_date and end_date
526	Scale time_seconds_arr to the given unit .
527	Return the number of days ago .
528	Initializes permissions for a role .
529	Delete a role .
530	Return a list of roles for the authenticated user .
531	Returns a list of all permissions views for the current user .
532	Checks if the role_name_or_list is in the user s roles .
533	Checks if the user has permission for the given permission name .
534	Delete faulty permissions .
535	Merge a permission with a view menu .
536	Update admin permissions .
537	Synchronize permissions on a DagView .
538	Create permissions for all dags .
539	Return a Fernet object .
540	Poke the partition for this table .
541	Return an instance of AwsGlueCatalogHook .
542	Pops a message from the SQSHook .
543	Get a connection to HDFS .
544	Return an AirflowWebHDFSHook instance for the webhdfs connection .
545	Checks whether the given path is valid or not .
546	Upload a file to HDFS .
547	Get a connection to the pinot broker .
548	Return a connection URI for this connection .
549	Converts a date to a dictionary .
550	Converts a time object to a dictionary .
551	Return a redis connection object for the given connection id .
552	Get a pandas dataframe from a SQL query .
553	Run a SQL query .
554	Set the connection to autocommit .
555	Insert rows into a table .
556	Return a string representation of a cell .
557	Check the health of the scheduler .
558	Get extra links for a task .
559	Get a connection to the cloudant server
560	Execute the webhook hook .
561	Get credentials from a JSON or P12 key file .
562	Authorized Http .
563	Catch an http exception from a function .
564	Fallback to default project_id .
565	Return a list of unfinished tasks .
566	Prepares the command to be executed .
567	Convert a PIL Image to a torch . Tensor .
568	Normalize a torch image to the given mean and standard deviation .
569	Resizes an image to the given size .
570	Pad an image with padding .
571	Crop an image .
572	Resizes the image to the specified size .
573	Flip left and right pixels of an image .
574	Return a perspective image from startpoints and endpoints .
575	Flip top and bottom of an image .
576	Crop an image .
577	Adjust the brightness of an image .
578	Adjust the contrast of an image .
579	Adjusts the saturation of an image .
580	Adjust the hue of an image .
581	Adjust the gamma of an image .
582	Rotate an image .
583	Translates an image .
584	Converts an image to grayscale .
585	Save image to file .
586	Find all the classes in a directory .
587	Read image file .
588	Read the info file and return a torch . LongTensor .
589	Reads the matches file and returns a torch . LongTensor .
590	Computes the accuracy of the model .
591	Setup for distributed printing .
592	Download url to root .
593	Return a list of all directories under root .
594	Return a list of all files in a directory .
595	Download a file from Google drive .
596	Get the parameters of an image .
597	Return a list of parameters for a given width and height .
598	Get random parameters from an image .
599	Returns a list of parameters for the given brightness contrast saturation and hue .
600	Get translation and shear parameters .
601	Download files from Flickr .
602	Download all the files in the processed_folder .
603	Downloads all the files in the raw folder .
604	Get the current theme name .
605	Run Autocompleter .
606	Show preferences page .
607	Return a list of themes in templates_path .
608	Return searx query .
609	Return a list of results for the given response .
610	Creates a custom gradient .
611	Performs a multivariate normal .
612	Computes the joint log - probability for the eight - school joint distribution .
613	Benchmarks the eight -schools hmc model .
614	Expands the docstring of a function .
615	Return a simple name for the given distribution .
616	Build a custom RV given a distribution and sample_shape .
617	Return a random variable from a distribution .
618	Create a random variable for the given distribution class .
619	One - step predictive model .
620	Runs the forecast model .
621	Return the maximum mask for non - finite values .
622	Assert that x is a finite value .
623	Raise an AssertionError if x is not less than the given rank .
624	Helper function for _event_shape .
625	Evaluate all one hot tensors .
626	Converts a string identifier to a tf . Tensor object .
627	Computes the number of components and the number of component parameters .
628	Gets the next interceptor .
629	Decorator to mark a function as being interceptable .
630	Yields the results of a function as a dictionary .
631	Generate toy logistic data .
632	Visualize the decision matrix .
633	Builds an input pipeline .
634	Checks that map_values is valid .
635	Applies the given function to the given state .
636	Calls a function with the given arguments .
637	Call fn with args and return the result and gradients .
638	Broadcasts from_structure to_structure if necessary .
639	Applies the given log_prob function to the given bijector .
640	LeapFrog step .
641	Performs the metropolis hastings step .
642	r Hamiltonian MonteCarlo .
643	Sign adaptation .
644	Create a Kernel from a dictionary of parameters .
645	Convert x to a tf . Tensor .
646	Create a scale operator .
647	Returns a random walk normal function .
648	Returns a random walk uniform function .
649	Expands x to the event rank .
650	Returns the lower bound of the distribution .
651	Computes the log_probs for each component of the Categorical .
652	Validate that outcomes and logits have the same shape .
653	Ensures that TensorFlow is installed .
654	Logistic regression .
655	Returns the covertype features and labels .
656	Computes a cholesky covariance matrix .
657	Standard deviation .
658	Calculates the variance of the given data .
659	Make a positive axis from a list or 1D array .
660	Squeeze x along the given axis .
661	Return the Z of x .
662	Inverse z .
663	Trend transition matrix .
664	SemiLocalLinearTrend transition noise .
665	Samples a halton sequence .
666	Returns a list of random samples from a list of dimension values .
667	Gets the indices for the _get_indices op .
668	Expands a number to a number of base .
669	Return a list of primes that are less than n .
670	Return the machine eps for the given dtype .
671	Hager Zhang model .
672	Fix the value and gradient functions to the given value_and_gradients .
673	Returns a HagerZhangLineSearch for the given value and gradients function .
674	Hager Zhang line search afterracketing .
675	Return a new HagerZhangLineSearch with inner bisection .
676	Prepares the values and gradients functions for the given value and gradient function .
677	Returns a tf . compat . v1 . Print for the given values .
678	Hermite quadrature scheme .
679	Fully quantiles for the quadrature scheme .
680	Raise an exception if param is not a quadrature parameter .
681	Determine batch event shapes based on endpoint affine .
682	Interpolate loc from a bimixture grid .
683	Interpolate a bimixture .
684	Scale op to w .
685	Concatenate vectors .
686	Log - vector matrix .
687	Log - matrix .
688	Helper function for _vector_matrix .
689	Extract log probabilities from a distribution .
690	Marginal hidden probabilities .
691	Posterior marginals .
692	Posterior mode .
693	Return a random direction for each of the input components .
694	Samples the next batch .
695	Helper function to call fn with the given list of arguments .
696	Pad x with zeros to the right .
697	Runs one step of the model .
698	Builds a trainable posterior distribution .
699	Builds a factored variational loss .
700	Minimize in graph .
701	Compute the moments of masked time series .
702	Returns the initial value of a masked time series .
703	Broadcasts the batch_shape of the distributions .
704	Computes the Jacobian of the joint distribution .
705	Computes the sum of distributions .
706	Estimates the empirical statistics of the observed time series .
707	Expand trailing dim from observed_time_series_tensor
708	Canonicalizes observed time series with a mask .
709	MixtureSameFamily mixes over posterior draws .
710	Returns the range for the given name .
711	Return a function that can be used as a summary statistic .
712	Unify the call signature of a distribution function .
713	Resolves the distribution names .
714	Returns a tuple of the required arguments for the given function .
715	Computes the Kullback - Leibler divergence between the joint distributions .
716	Builds the distribution function .
717	Resolves the graph of the distribution .
718	Calculate the entropy of the distribution .
719	Check that the argument is in the support of the distribution .
720	Create an image summary .
721	Visualize reconstruction images .
722	Visualize qualitative analysis .
723	Summarize a distribution .
724	Summarize mean across nats and bits .
725	Returns a tfd . MultivariateNormalDiag .
726	Return the zero state of the model .
727	Runs the model on the given inputs .
728	Calls the convolutional convnet .
729	Generate a model from a list of samples .
730	Reconstructs data from inputs .
731	Sample a batch of samples from the static prior .
732	Samples dynamic prior .
733	The shape of the prior batch .
734	Returns a Tensor representing the batch shape of the prior .
735	Create a new state space model .
736	Samples the prior distribution .
737	Compute the minimum event dimension for the given list of bijectors .
738	Converts a vector size to a square matrix .
739	Sort a list of values in ascending or descending order .
740	Sort the values along an axis .
741	Converts a numpy array to a Tensor .
742	Compute the N - vector x .
743	r N - tri product .
744	LogNDTR .
745	Log - NTR asymptotic series .
746	Return the inverse of x .
747	Computes the log cdf of x .
748	Computes the joint log - probability of a set of text messages .
749	Benchmarks text messages in HMC .
750	Determines whether the marginal GP at index_points is a multivariate Gaussian .
751	Returns the marginal distribution given a list of index points .
752	Return a GaussianProcess instance with a value for index_points .
753	Create an IAF stack .
754	Performs one step on the current state .
755	Bootstrap results from the optimizer .
756	Compute the outer squared difference between x and y .
757	Returns the value and batch jacobian of the given function .
758	Prevents the second derivative of x .
759	Applies the distributional transform to the given data .
760	Split a covariance matrix into marginals .
761	Decomposes the model from posterior marginals .
762	Decomposes the observed time series by component .
763	Decomposes the forecast distribution by component .
764	Converts a dense tensor to a sparse tensor .
765	Decorator for operator overloading .
766	Return a string representation of a tensor .
767	The shape of the sample .
768	Returns a tf . Tensor representing the sample shape .
769	Return the value of the distribution .
770	Evaluate the value .
771	Return the numpy representation of the value .
772	Conjugates known scale posterior .
773	Default template for real MLP .
774	Return a uniform unit norm .
775	Log unnormalized probability .
776	Calculates the log normalization .
777	Returns the common dtype for the given list of arguments .
778	Return a function that can be used as a summary statistic .
779	Broadcast tensors to target_tensors .
780	Return the PDF at the peak .
781	Effective sample .
782	Calculate the effective sample size for a single sample .
783	Potential scale reduction for a single state .
784	Returns the product of x across the given axis .
785	Helper function to broadcast secondary_arg to a list of states .
786	r Gauss - Hermite quadrature distribution .
787	Create a quadrature scheme with lognormal quantiles .
788	Merge x and y into a new mapping .
789	Removes a field from the mapping .
790	Merge two values .
791	Recursively convert a dict or list to a tuple .
792	Increments the left doubling increments .
793	Find the index of the best interval .
794	Slice bounds by doubling .
795	Sample with shrinkage .
796	Slice Sampler for one dimension .
797	Create a function that sets random variable values to its aligned value .
798	Create a function that accumulates the log - probability of inputs according to joint probability distribution .
799	Returns a dictionary of function inputs for the given function .
800	Convolution 2D block .
801	Builds a tree for the given value and gradients .
802	Wraps a function which checks for None gradients .
803	Return True if there is no u_turn between the two states .
804	LapFrog .
805	Log Joint .
806	Return a randombernoulli .
807	Default loc scale function .
808	Default mean field normal function .
809	Default multivariate normal function .
810	Deserializes a function .
811	Serialize a function to JSON .
812	Broadcasts the given structure to the given structure .
813	Converts a nested structure to a tf . Tensor .
814	Convert a list of arguments to a Tensor .
815	Calls a function with the given arguments .
816	Return a dictionary of Tensor like attributes .
817	Make a mixture prior .
818	Pack images into a batch of images .
819	Download a file from a directory .
820	Builds the training and evaluation input functions for the given batch size .
821	Validate that the block sizes and bijectors are valid .
822	Checks that all elements in flat_xs have the same shape .
823	Create a multivariate normal tril .
824	Bernoulli layer .
825	Normal function .
826	Create a Poisson layer .
827	Mala Euler method .
828	Gets the drift of a set of steps and volatility parts .
829	Compute log acceptance correction correction .
830	Calls volatility_fn and grads if they are not None .
831	Broadcast volatility parts to state_parts .
832	Create an AR transition matrix from a list of coefficients .
833	Returns the shape of the batch or event .
834	Reshape input .
835	Call fn and reshape the output .
836	Compute Bullback - Bullback - Bullback - Bullback - Bullback - Bullback - Bullback - Bullback divergence .
837	Return a list of samples from the joint distribution .
838	Create a latent dirichlet allocation .
839	Create a ldavariational model .
840	Returns a list of string representations of the given topics .
841	Download and load a newsgroups dataset .
842	Builds a batch of training and evaluation data .
843	Builds an iterator over training batches and eval batches .
844	Optimization .
845	Adds EMA control dependencies to the codebook .
846	Save a 2D array to a file .
847	Visualize the training data .
848	Load Bernoulli dataset .
849	Convert a dtype to a numpy dtype .
850	Returns the base dtype of the given dtype .
851	Return True if dtype is boolean .
852	Check if dtype is complex .
853	Returns the maximum value of the given dtype .
854	Returns the name of a dtype .
855	Return the size of the given dtype .
856	Assert that all items have the same base type .
857	Asserts that tensors and dtype are of the same dtype .
858	Optimization .
859	Nelder - Mead one step .
860	Accept reflected function .
861	Expansion function .
862	Return a function that can be used as a contraction .
863	Shrinks an objective function to the best vertex .
864	Replaces the values at index with replacement .
865	Checks the convergence of a simplex .
866	Prepare arguments for batch_evaluate_objective .
867	Prepare args with initial simplex and batch_evaluate_objective tensors .
868	Prepare arguments for batch_evaluate_objective .
869	Evaluate the objective function multiple times .
870	Plots the weight posteriors .
871	Plots for heldout prediction .
872	Builds a fake data .
873	Returns a dictionary of configuration parameters for this model .
874	Create a TensorSpec from a dictionary .
875	Matrix multiplication .
876	Helper function for _std_var_helper .
877	Assigns the log moving mean exp to the given variable .
878	Makes a columnar version of x .
879	Return a random rademacher .
880	Random Ray Leigh .
881	Picks a scalar condition .
882	Finish the log_prob for one fiber .
883	Finish a prob for one fiber .
884	Try to rotate x if rotate_right is True .
885	Undo batch normalization .
886	Validate that layer is an instance of BatchNormalization .
887	Slice a single parameter .
888	Converts a dictionary of parameters into a dictionary of parameters .
889	Apply a single step to a distribution .
890	Applies the slice sequence to the distribution .
891	Apply a batch of parameters to a distribution .
892	Fit the model to the given response .
893	Return a function that returns True if the model s convergence criteria has changed .
894	Prepare arguments for model_matrix and response .
895	Returns the number of columns in x .
896	Prefer static_fn from original_fn .
897	Copy docstring from original_fn to new_fn .
898	Returns a boolean value for the given predicate .
899	Returns the rank of a tensor based on its shape .
900	Return a function that returns True iff pred_fn_pairs are True .
901	Returns a name scope for the given name and default_name .
902	Calculate the mean and standard deviation of a mixture distribution .
903	Make a tril scale .
904	Make a diagonal scale .
905	Determines shapes from loc and scale tensors .
906	Checks if scale is a diagonal scale .
907	Check that the distribution is a scalar distribution .
908	Pad mixture distribution and categorical distribution .
909	Pick scalar condition .
910	Move a dimension from source_idx to dest_idx .
911	Check that x is a non - negative integer form .
912	Returns a Tensor indicating whether a and b have the same shape .
913	If x is None return it . If x is None return it .
914	Return True if dtype is known to be unsigned .
915	Return True if dtype is signed .
916	Returns the integer of the largest integer of the given dtype .
917	Return the smallest integer of the given dtype .
918	Check whether the given dtype is integer like by dtype .
919	Checks that the given categorical_param is of the given dtype .
920	Computes the log - combinations of the given counts .
921	Rotate x by shift .
922	Pick a vector based on a condition .
923	Prefer static broadcast shape from shape1 and shape2 .
924	Generate a new seed .
925	Computes the diagonal of a batch of vectors .
926	Returns the dimension of x along the given axis .
927	Process quadrature grid and probs .
928	Returns a dictionary containing the arguments and keyword arguments for the parent frame .
929	Expands x to the shape of x .
930	Returns a new Tensor with the given output_tensor .
931	Validate that the rightmost_transposed_ndims is a scalar .
932	Validate that perm is a permutation vector .
933	Converts self . rightmost_transposed_ndims to shape .
934	Concatenates x with other .
935	Returns a list of dimension values of x .
936	Merge x with other .
937	Wrapper for with_rank_at_least .
938	Checks that dynamic_shape and static_target_shape are fully defined .
939	Augments the full_sample_and_batch_shape and batch_shape of partial_batch_dist .
940	Build a single step of backward smoothing .
941	Compute backward smoothing update .
942	Build a single step of Kalman filtering .
943	Updates a linear Gaussian model .
944	Kalman transition function .
945	Build a Kalman mean step .
946	Build a Kalman covariance step .
947	Builds a Kalman sample step .
948	Propagate mean .
949	Propagate covariance matrix .
950	Backward smoothing pass .
951	Samples the joint state space .
952	Smooth posterior marginals .
953	Calculate the joint mean of the model .
954	Joint covariance .
955	Converts latent means and covs to observations .
956	Log normalization .
957	Return the mean direction and concentration .
958	Rotation function .
959	Samples from the von mises fisher .
960	Return a copy of a function .
961	Removes keys and values from a dictionary .
962	Recursively replace a dictionary for a pretty dictionary .
963	Get samples from a distribution .
964	Return True if x is namedtuple like .
965	Return the base case .
966	Return a new instance of the accepted class with the given name .
967	Safish sum .
968	Wrapper for _value_and_gradients .
969	Try to call fn_arg_list with result and grads .
970	Smart for loop .
971	Performs a trace scan on the graph .
972	Create an innermost setter .
973	Decorator to create the innermost getter .
974	Enables parameters in the kernel .
975	Replace event_shape_in_tensorshape with output_tensorshape .
976	Replaces input_tensorshape with event_shape_in and event_shape_out .
977	Raise an error if shape is not valid .
978	Return True if converged or failed .
979	Returns the initial state arguments for the given value and gradient function .
980	Perform a line search step .
981	Restricted ValueAndGradient function .
982	Updates the state with respect to the given position .
983	Check whether the current position and next_position are consistent .
984	Broadcast value to target .
985	Return the harmonic number of x .
986	Default Exchange Proposed Function .
987	Get a field from a kernel_results object .
988	Gets the exchanged states for each replica .
989	Computes the variance of each concentration .
990	Computes the forward log - det of the given bijector .
991	Returns the forward transform function for the given bijector .
992	Inverse transform function .
993	Perform one step of the model .
994	Return a Tensor representing the elements of tval that satisfy the given condition .
995	r Secant 2 .
996	Sant 2 inner function .
997	Updates a secant 2 inner function .
998	Updates the value and gradient function at the given trial point .
999	Bisection function for the given value and search interval .
1000	Return the bisect of the given value and gradient function .
1001	Given a function value and a function value and a function value and a function value and a function value and a function value and a function value and a function value and a function value and a function value and a function value and a function value and a function value and a function value and a function value and a function value and a function value and a function value and a function value .
1002	Check whether two values are finite .
1003	Returns True iff_lim and f_lim are satisfied .
1004	Return the secant ratio between two DataFrames .
1005	Create a simple step update policy .
1006	Lapfrog integrator for one step .
1007	Computes the log - acceptance correction .
1008	Performs one step of the model .
1009	Bootstrap results for the given init_state .
1010	Bayesian ResNet model .
1011	ResNet block .
1012	Create encoder function .
1013	Create a decoder for a bag of words model .
1014	Create a prior for a given number of topics .
1015	Sample a chain .
1016	Deep Exponential family .
1017	Trainable positive - deterministic variable .
1018	Trainable Gamma .
1019	Download and load NIPS 2011 papers .
1020	Initialize self . _params .
1021	Returns the kl function for the given type_a and type_b .
1022	Read image from file .
1023	Download and unzip data_sprites directory .
1024	Create a character .
1025	Create a sequence of frames from the given character .
1026	Create a random sequence .
1027	Create a dataset for a list of actions and directions .
1028	Validate that the distributions have the same dtype .
1029	Flatten a list of summands .
1030	Flatten a list of _ProductKernel objects .
1031	Builds the fake data .
1032	Counts the integers in an array .
1033	Finds bins for the given data .
1034	Histogram .
1035	Returns a tf . Tensor containing quantiles .
1036	Returns the static value of x .
1037	Inserts the last dimension of x into the given axis .
1038	Makes a non - negative list of the given number of dimensions .
1039	Moves the given axis to the end of x .
1040	Sorts a tensor by k .
1041	Create component state space models for each model .
1042	Computes the amari alpha .
1043	Computes the Kullback - Kullback - Kullback - Kullback - Kullback divergence .
1044	Jensen shannon .
1045	Pearson .
1046	Squared Shinger .
1047	Calculates the Pearson triangular distribution .
1048	Computes the t_power of the given logu .
1049	Log1p absolute function .
1050	Compute Jeffreys .
1051	Modified GAN .
1052	Dual SISZAR function .
1053	Computes the symmetrized siszar function .
1054	Monte - Carlo F - Divergence .
1055	Helper function for the CSISZAR vimco_helper .
1056	Assert that x has the correct number of elements .
1057	Helper function for batch_gather_with_broadcast .
1058	Broadcast event and params to the given dtype .
1059	Returns the expectation importance sampler log - space .
1060	Broadcasts the event and samples to the same shape .
1061	Optimizer for a given value and gradient function .
1062	Checks that the inverse Hessian is symmetric .
1063	Update the inverse Hessian .
1064	Inverse Hessian update .
1065	Multiply the right - dimension of mat with the right - dimension of vec
1066	Compute the product of two tensors .
1067	Transposes a batch of tensors .
1068	Pad x with zeros at the end .
1069	Computes the sum of x with the given number of axes .
1070	Computes the square root of the square root of x .
1071	Returns a tf . float32 if all elements of arg_list are None .
1072	Optimization .
1073	Returns a LBfgsOptimizerResults for the given value and gradient function .
1074	Compute L - BGS two - loop algorithm .
1075	Create an empty queue for the given element .
1076	Push new_vecs onto the queue .
1077	Returns a PSD mask for the given matrix .
1078	Returns a tf . Tensor whose determinant is PSD .
1079	Return a uniform correlation matrix .
1080	Calculates the distribution of rejection samples .
1081	Calculate the Clopper - Pearson confidence interval .
1082	Estimating volume rejection samples .
1083	Von - Mises cdf series .
1084	A helper function that is passed to value_and_gradient .
1085	Perform one step of the model .
1086	Optimize an objective function .
1087	Returns the initial arguments for the given function .
1088	Finds the best value in the given population .
1089	Checks the convergence of the given population .
1090	Constructs the starting population .
1091	Generate a binary crossover distribution .
1092	Returns a list of mutants for the given population and mixing_indices .
1093	Gets the indices of the two distributions .
1094	Ensures a tensor_or_list is a list .
1095	Returns a tf . Tensor for the given tolerance .
1096	Soft thresholding operator .
1097	Clip by value preserving gradient .
1098	Builds an input pipeline from a list of images .
1099	Plots generated images .
1100	Converts a list of productions to a string .
1101	Runs the model on the given inputs .
1102	Runs latent code posterior model .
1103	Inverse of _hat_integral .
1104	Computes the inverse of x .
1105	Returns the rank of the matrix a .
1106	Pins a matrix .
1107	Solve a linear system .
1108	Inverse Lu matrix .
1109	Asserts that lower_upper and perm have at least 2 dimensions .
1110	Solve the Lullback - Leibler problem .
1111	Constructs a block - diagonal matrix from a sparse matrix .
1112	Raise an error if a is not a matrix .
1113	Compute gradient for negative log - likelihood and fim .
1114	Fit a model on a sparse matrix .
1115	Generate a list of slices for the given number of blocks .
1116	Generate a mask .
1117	Masked dense layer .
1118	Create input_order array from input_size
1119	Create a list of degrees between 0 and 1 .
1120	Create hidden and hidden masks for a list of degrees .
1121	Create a masked initializer based on a mask .
1122	Constructs a TensorArray from the input shape .
1123	Calls the model on x .
1124	Draws a sample from a batch of logits .
1125	Return a zero - dimensional multivariate normal diagonal .
1126	Returns an observation noise function for a timeseries .
1127	Converts parameters to weights .
1128	Return the depth of the given graph .
1129	Return a list of unvisited dependencies sorted by depth .
1130	Flatten a dictionary of named_makers into a single rule .
1131	Build a JointDistributionSequential .
1132	Compute the variational loss .
1133	Optimal variation posterior .
1134	Builds is_last_day_of_season op .
1135	Builds the matrix that converts effects to residuals .
1136	Builds the seasonal transition matrix .
1137	Builds the seasonal transition noise for the given drift scale .
1138	Builds the constrained seasonal transition noise .
1139	Checks if the observation data is empty .
1140	Validate that observation data is broadcastable .
1141	Add a new scheduler .
1142	Sets the checkpoint at checkpoint_path .
1143	Sets the gradient clip constant .
1144	Optimize the model .
1145	Sets the training summary .
1146	Sets the value summary .
1147	Create an optimizer for the given training set and criterion .
1148	Sets the training data .
1149	Sets the summary trigger .
1150	Read data sets .
1151	Return a list of text samples for news20 .
1152	Download and parse GloVE W2V .
1153	Compile the function with the given optimizer and loss .
1154	Fit the model to the given data .
1155	Evaluate the function over the given data .
1156	Return the prediction for the given data .
1157	Get the MNI dataset .
1158	Preprocess MNIST dataset .
1159	Returns a MaxEpoch or MaxIteration based on options . endTriggerType .
1160	Validate the optimizer with the given test data .
1161	Return the value of the field .
1162	Calls a bigdl function .
1163	Call a Java function with the given arguments .
1164	Convert an RDD to an RDD of Java objects .
1165	Convert Python objects to Java objects .
1166	Returns a BLayer object for the given activation name .
1167	Create an instance from a numpy . ndarray .
1168	Gets the label of the image feature .
1169	Read a Parquet file .
1170	Writes data to a Parquet file .
1171	Get the image corresponding to the given float key .
1172	Converts the image to a list of numpy arrays .
1173	Get the label of this image frame .
1174	Returns a list of predicts for this image frame .
1175	Predicts the model on the given data .
1176	Fit the model on the given data .
1177	Transform this image to a new dataset .
1178	Save a keras model definition to a JSON file .
1179	Builds a keras model .
1180	PredictClass for the given data_rdd .
1181	Sets the weights of this tensor .
1182	Returns a list of weights for this layer .
1183	Saves the value to a TF file .
1184	Returns the training set .
1185	Load a torch model from a file .
1186	Load a Keras model from a JSON file or HDF5 file .
1187	Create a new Criterion instance of the given type .
1188	Load weights from a JSON file .
1189	Loads the imdb dataset .
1190	Builds a keras model .
1191	Returns the input shape .
1192	Returns the output shape of the output variable .
1193	Get the MNIST dataset .
1194	Read data sets from data_dir .
1195	Returns the path to the bigdl jar .
1196	Return True if pyspark version is below 2 . 0 .
1197	Exports a checkpoint to a dictionary .
1198	Saves a dictionary of tensors to target_path .
1199	Expands the given units to the given axis .
1200	Precompute the future symbols of the trie .
1201	Simple Attention .
1202	Attention layer .
1203	Compute BLEU for each reference and translation .
1204	Get the log file for this agent .
1205	Log the given utterance .
1206	Compute summaries of gradient updates for all trainable variables .
1207	Dump weights to a checkpoint .
1208	Read data by configuration .
1209	Train an evaluation model from a configuration file .
1210	Interact with an agent .
1211	Convert labels to one - hot labels .
1212	Convert a list of probabilities to one - hot labels .
1213	Returns a tf . Session for the config .
1214	Loads the model from disk .
1215	Return the momentum variable of the optimizer .
1216	Updates the graph variables .
1217	Calculate the F1 of the predicted data .
1218	Process a word into a list of strings .
1219	Stacked convolutional network .
1220	Bi - rnn model .
1221	Stacked BiRNN model .
1222	Stacked highway cnn model .
1223	Create an embedding layer .
1224	r CudnnGRU .
1225	Cudnn compatible gru .
1226	Cudnn LSTM .
1227	Wrapper for cudnn_compatible_lstm .
1228	Wrapper for cudnn_bi_gru .
1229	Wrapper for cudnn_bi_gru .
1230	Stacked Bi - GRU .
1231	Dropout for variational units .
1232	Builds the model .
1233	Builds a word convolutional network .
1234	Builds the basic network .
1235	Train on a batch of data .
1236	Return a list of labels for each object in a batch .
1237	Converts a list of tokens to a list of integers .
1238	Converts a list of tags into a list of integers .
1239	Calculate the BLEU score .
1240	Verify that the given S3 URL is valid .
1241	Extract certificates from a PEM file .
1242	Verify certificates in a list of certificates .
1243	Verify signature .
1244	Verify that a certificate is valid .
1245	Return a list of JSON representations of the control .
1246	Return a list of all ms_bot_framework objects .
1247	Return a list of all Telegram messages .
1248	Return a list of all alexa controls .
1249	Main entry point for DeepPavlov .
1250	Wrap a function with a graph .
1251	Wrap a function with a session .
1252	Computes the accuracy of the predicted data .
1253	Calculate the round accuracy between the predicted and predicted data .
1254	Pre - trained initializer .
1255	Read data from file .
1256	Create a hello bot agent .
1257	Converts x to one - hot coordinates .
1258	Convert a list of metrics to a dictionary .
1259	Populate the default settings directory .
1260	Loads the model from disk .
1261	Saves the model to a file .
1262	Returns a tf . Tensor representing the training op .
1263	Search for a word .
1264	Create default operation costs .
1265	Starts the timer .
1266	Handles a request .
1267	Return a list of agents for the given utterance .
1268	Generate the response for the given request .
1269	Handles an intent request .
1270	Handles a launch request .
1271	Handles an unsupported request .
1272	Return a pretty representation of this struct .
1273	Converts an elmo loss to PDL .
1274	Build a Chainer from a configuration dictionary .
1275	Interactively interact with the model .
1276	Run on a stream of data .
1277	Reads the input file into a list of dictionaries .
1278	Converts a function name to a callable .
1279	Decorator to register a function as a metric .
1280	Get a metric by name .
1281	Create a DecayType from a string .
1282	Return the best value for the given values and losses .
1283	Encode a list of tokens into a list of vectors .
1284	Read requirements from requirements . txt .
1285	Log - loss .
1286	Export a weight file to a hub .
1287	Show details of an item .
1288	Create an instance of EcommerceAgent .
1289	Runs the bot framework server .
1290	Download a file from a remote server .
1291	Unzip file at file_path .
1292	Download a file from a URL and decompress it .
1293	Recursively updates a dictionary recursively .
1294	Set the path to be md5 .
1295	Set a query parameter .
1296	Return a dictionary representation of the AMLC response .
1297	Return the JSON representation of the control .
1298	Returns a dictionary describing the bot framework .
1299	Return the JSON representation of the control .
1300	Return a dictionary describing the bot framework .
1301	Compute F1 score for Squad v2 .
1302	Calculate recall at given k .
1303	Check to see if GPU is available .
1304	Parse a config property .
1305	Parse config into a dictionary .
1306	Expand the given path into a single path .
1307	Create a component from a dictionary .
1308	Runs the request loop .
1309	Delete a conversation .
1310	Refresh expired certificates .
1311	Verifies a signed request .
1312	Handles a request .
1313	Return an instance of a class from a string .
1314	Decorator to register a model class .
1315	Get a model by name .
1316	GetGLMRegPath for the given model .
1317	Create an H2OGeneralized linear model .
1318	Create a H2OCluster object from a list of keyvals .
1319	Shutdown the H2O instance .
1320	Check if the H2O server is running .
1321	Show status of H2O cluster .
1322	Return a list of all jobs .
1323	Returns a new H2OFrame with a list of timezones .
1324	Fills this object from an H2Cluster object .
1325	Return dictionary of metalearner parameters .
1326	Stabilize a test function .
1327	Get a summary of the frames in a column .
1328	Delete a frame .
1329	Get a list of model builders .
1330	Validate model parameters .
1331	Compute the model metrics for the given model and frame .
1332	Get a list of model metrics .
1333	Delete a model .
1334	Return a tabular representation of the data .
1335	Runs a number of EC2 instances .
1336	Terminate one or more EC2 instances .
1337	Stops one or more instances .
1338	Start one or more EC2 instances .
1339	Reboot one or more EC2 instances .
1340	Wait for SSH to one or more hosts .
1341	Return the full name of a function .
1342	Find a function from a code object .
1343	Return the function s arguments as a string .
1344	Wrap text to wrap_at spaces .
1345	Wait for the job to complete .
1346	Train the model on the given data .
1347	Train the model on the given data .
1348	Returns a dictionary of the parameters of the model .
1349	Handles a SIGTERM signal .
1350	Wipe the output directory .
1351	Removes an RSandbox directory .
1352	Scrape the port from the output file .
1353	Scrape a number of cloud instances from the output file .
1354	Stops the child process .
1355	Stop all nodes and all client nodes .
1356	Return the IP address of the node .
1357	Return the port of the node .
1358	Return the ROC of the model .
1359	Determine the vector of the pre - trained model .
1360	Compute mean absolute error .
1361	Compute mean squared error .
1362	Calculate H2O median absolute error .
1363	Compute h2o_explained variance score .
1364	Assert that a variable is of one of the given types .
1365	Raise an exception if v does not match the given regex .
1366	Raise an exception if v is not satisfies the given condition .
1367	Retrieve assert arguments from the source file .
1368	Checks whether the given variable is of the given type .
1369	Return a type name for the given type .
1370	Return the source code for the given lambda function .
1371	Check if a variable is a valid type .
1372	Check if a variable is valid .
1373	Return the H2OConfig instance .
1374	Read the config file .
1375	Search for . h2oconfig in current directory and all parent directories
1376	Executes the given function asynchronously .
1377	Store the model progress .
1378	Recalculate the model parameters .
1379	Estimate the completion time based on the progress data .
1380	Guess next poll interval .
1381	Compute progress at given time .
1382	Return the time at progress x_target .
1383	Draws the given text to the screen .
1384	Compute the number of widgets required to render the progress bar .
1385	Return the width of the terminal .
1386	Set the encoding of the file .
1387	Fit the model to the given dataframe .
1388	Return a H2OFrame object for the given frame id .
1389	Refresh the internal cache .
1390	Return the type of a column .
1391	Return a new DataFrame with columns of the given type .
1392	Return a summary of this H2OFrame .
1393	Returns a dictionary describing the contents of the DataFrame .
1394	Return the first n rows and columns in the DataFrame .
1395	Multiply the matrix with the current frame .
1396	Return a list of the levels of this expression .
1397	Returns the number of levels .
1398	Sets the level of this frame .
1399	Set the levels of the domain .
1400	Rename columns in - place .
1401	Set the column names .
1402	Set the name of a column .
1403	Return True if item is contained in this H2OFrame .
1404	Return the remainder of the column .
1405	Return the stratified k - fold column .
1406	Return the structure of the H2OFrame .
1407	Return the data as a pandas dataframe .
1408	Pop the column at index i .
1409	Return the quantile of the data .
1410	Concatenate a list of frames .
1411	Bind data to this data frame .
1412	Bind a list of dataframes to a data frame .
1413	Split a single frame into multiple sub - frames .
1414	Group by clause .
1415	Fill missing values .
1416	Impute the values in the given column .
1417	Merge two DataFrames .
1418	Return the relevel of y .
1419	Insert missing values into the dataset .
1420	Return the variance of the data .
1421	Computes the correlation between each row and column .
1422	Calculates the distance between x and y .
1423	Return a factor representation of this expression .
1424	Return a new H2OFrame with rows split by the given pattern .
1425	Return a new H2OFrame with the number of rows and columns that match the given pattern .
1426	Return a new DataFrame with rows and columns between start_index and end_index
1427	Return a new dataframe with rows and columns removed .
1428	Return the entropy of this matrix .
1429	Return a new H2OFrame with the number of valid substrings .
1430	Return a table expression .
1431	Calculate the histogram of the data .
1432	Return an expression that is greater than or equal to num_words .
1433	Replace first occurrence of pattern with replacement .
1434	Return the toupper of this frame .
1435	Return a new H2OFrame with elements matching the given pattern .
1436	Return a new H2OFrame with missing values removed .
1437	Compute the difference between the two columns of a DataFrame .
1438	Return a new H2OFrame with is . NA columns .
1439	Return the minute portion of the expression .
1440	Return a new H2OFrame with rows equal to the number of rows in the DataFrame .
1441	Return a random stratified split .
1442	Return a new |H2OFrame| object that is a subset of this dataframe .
1443	Return the index of the maximum value in this DataFrame .
1444	Apply a function to this frame .
1445	Parse text into a Code object .
1446	Parse code from a file .
1447	Move the data to the given row and column .
1448	Unparse the tokens .
1449	Return the number of cells in the model .
1450	Return a list of the centers of the model .
1451	Returns a list of the standard deviation of the model .
1452	Connect to the H2O server .
1453	Perform an H2O API request .
1454	Check the version of H2O .
1455	Lazy import of a module .
1456	Upload a file to the database .
1457	Import data from a file .
1458	Import a Hive table .
1459	Import a SQL table .
1460	Import an SQL SELECT query .
1461	Parse a raw H2OFrame .
1462	Deep copy an H2OFrame .
1463	Get the model for the given model_id .
1464	Get a H2OGridSearch object for the given grid_id
1465	Returns a H2OFrame with the given id .
1466	Download a PoJ model .
1467	Download CSV file .
1468	Download all H2O logs .
1469	Export a file from a frame .
1470	Convert data to a list of H2OFrames .
1471	Create a demo for a function .
1472	Load a dataset from a relative path .
1473	Create model metrics for the given predicted and actual frames .
1474	Puts the file at file_path to dest_key
1475	Upload custom metric .
1476	Raise an exception if the frame_id is invalid .
1477	Return a human readable representation of a byte size .
1478	Normalize a slice to the given total .
1479	Check if a slice is normalized .
1480	Given a pandas dataframe return a pandas dataframe .
1481	Predicts the model from a csv file .
1482	Deprecated decorator .
1483	Wait for the job to finish .
1484	Deepfeatures for each model .
1485	Return a summary of the model .
1486	Shows the model .
1487	Returns a list of hyperparameters for the given id .
1488	Returns a dictionary of hyperparameters for the given model id .
1489	Get a H2OGridSearch instance for this model .
1490	Computes the F1 of each model .
1491	Return the variance of the model .
1492	Create a new prediction model with the given test data .
1493	Plots the mean and standard deviation of the model .
1494	Translates a name .
1495	Dedent the text at the given index .
1496	Extract run information from a log text file .
1497	Main entry point for extractGLRMRuntime .
1498	Close the H2O session .
1499	The session id for the current session .
1500	Start logging all API requests to a file .
1501	Helper function to prepare data payload .
1502	Prepare file payload .
1503	Log start transaction .
1504	Log end of a transaction .
1505	Write a message to the log file .
1506	Process response to H2OConnection .
1507	Print a message to stdout .
1508	Returns a H2OFrame for the given project .
1509	Download a PoJ model .
1510	Download MoJ model .
1511	Fit the model to X .
1512	Applies the means and standard deviation to X .
1513	Inverse transform .
1514	Extracts true string from string_content .
1515	Find the node name from each line .
1516	Find git_hash_branch in each line and remove it .
1517	Return True if the build timeout was found .
1518	Find build failure .
1519	Return True if there is a build_id in each line .
1520	Extracts the build URL from a job build URL .
1521	Grab all bad messages associated with the unit test .
1522	Save test info to a dictionary .
1523	Update the summary file .
1524	Write content of file2read to file2read
1525	Writes a Java message .
1526	Load messages from pickle file .
1527	Normalize an enum constant .
1528	Return a list of synonyms for a word .
1529	Polling the job .
1530	Converts the Assembly to a POJO file .
1531	Fit the Assembly to a H2OFrame
1532	Return a percentile of a list .
1533	Return a dictionary of default parameters .
1534	Return a dictionary of the actual parameters of the model .
1535	Get the deepfeatures of the model .
1536	Return the score history of the model .
1537	Print the model .
1538	Return a pandas dataframe of variable importances .
1539	Compute residual degrees of freedom .
1540	Return a dictionary of the coefficients of the model .
1541	Download a pojo .
1542	Download MOJO .
1543	Saves the details of the model .
1544	Check that y_actual and y_predicted have the same length .
1545	Return a list of all cross - validation models .
1546	Demo of H2O s Gradient Boosting estimator .
1547	Deeplediction model .
1548	Create an example of an H2O model .
1549	Wait for a keypress .
1550	Convert to pandas . DataFrame .
1551	Print the table .
1552	Starts a new process .
1553	Returns the path0 if path0 is not None otherwise .
1554	Yields the path to the h2o . jar file .
1555	Return the hit ratio table for this model .
1556	Return a csv . DictWriter for the given file .
1557	Converts a URI to a file path .
1558	Converts a path to a URI .
1559	Parse a list of lines into a list of functions and classes .
1560	Generate documentation for the given uri .
1561	Return a list of all modules for this package .
1562	Write documentation for all modules in the project .
1563	Writes rst files to the given directory .
1564	Converts the table to a list of integers
1565	Load messages from file .
1566	Adds a new message .
1567	Updates the message_dict with the given action .
1568	Extracts a message from a test file .
1569	Save a dictionary to file .
1570	Print all messages in a dictionary .
1571	Parse command line arguments .
1572	Print usage of the script .
1573	Return a list of all files under root_dir .
1574	Find Magic in a file .
1575	Runs the tokenizer on the given files .
1576	Transforms data to H2OFrame .
1577	Summarize all failed tests .
1578	Extracts intermittens from collected failed tests .
1579	Plots the ROC curve .
1580	Calculate the confusion matrix given a list of metrics and a list of thresholds
1581	Return True if deepwater is available .
1582	Trim the data back to the given month .
1583	Return a dictionary of endpoint groups .
1584	Updates Site model .
1585	Convert data to JSON .
1586	Comment a user .
1587	Return a list of credentials for the given username .
1588	Like a user .
1589	Like a hashtag .
1590	Check if a user is not a bot .
1591	Read a list from a file .
1592	Schedule the message .
1593	Mark the message as defer .
1594	Download for a resource group .
1595	Guess service info from a specification path
1596	Update a node .
1597	Delete an application definition .
1598	Create or update an application definition .
1599	Return a URI for the given request .
1600	Return a RequestsConnection object for the given request .
1601	Perform a HTTP request .
1602	Execute script actions for a resource group and cluster .
1603	Checks front - door name availability .
1604	Purge a deleted Vault .
1605	Gets the authorization server .
1606	Validate that the request_uri is valid .
1607	Loads the CLI profile .
1608	Get login credentials for a resource or tenant .
1609	Resolves an existing query .
1610	Checks the name availability of a resource .
1611	Opens a request .
1612	Sets the timeout for the request .
1613	Sets the request header .
1614	Returns a list of all response headers for this request .
1615	Sends the request to the client .
1616	Return the status of the request .
1617	Gets the status text of the request .
1618	Returns the response body of the request .
1619	Sets the client certificate .
1620	Send an HTTP PUT request .
1621	Sets the HTTP request header .
1622	Send a request body to the server .
1623	Returns a _Response object representing the response .
1624	Returns a readable identifier from the given id_name .
1625	Return the serialization name for the given element name .
1626	Verify face to person .
1627	Adds a job to this batch .
1628	Get entry properties from XML node entry .
1629	Returns a list of child nodes for the given path .
1630	Find namespaces from a child node .
1631	Convert an XML string to a ServiceBus namespace .
1632	Convert an XML string to a ServiceBusRegion object .
1633	Converts an XML string to a namespace availability response .
1634	Converts an XML string to a dictionary of metrics .
1635	Replace a runbook content .
1636	Gets a list of recommendations for this domain .
1637	Updates an existing Kb .
1638	Gets a paginated list of member groups for the specified object .
1639	Build Package from PR number .
1640	Import data for a resource group .
1641	Publish a runbook to a resource group .
1642	Renew the session lock .
1643	Replaces the specified word alterations .
1644	Adds a new value to a secret value resource .
1645	Gets the properties for a storage account .
1646	Gets the keys for a storage account .
1647	Regenerates the keys for a storage account .
1648	Create a new storage account .
1649	Updates an existing storage account .
1650	Delete an existing storage account .
1651	Checks the storage account name availability for a service .
1652	Get properties for a hosted service .
1653	Create a hosted service .
1654	Delete an existing hosted service .
1655	Create a new deployment .
1656	Delete a deployment .
1657	Swap an existing deployment .
1658	Changes the deployment configuration for a deployment .
1659	Updates the deployment status for a deployment .
1660	Upgrade a deployment .
1661	Walks the upgrade domain for the given deployment .
1662	Reboot a role instance .
1663	Delete a list of role instances for a deployment .
1664	Check availability of a hosted service .
1665	List all certificates for a given service .
1666	Gets a certificate for a given service .
1667	Adds a certificate to an existing service .
1668	Delete a service certificate .
1669	Gets the management certificate for the given thumbprint .
1670	Adds a new management certificate to this subscription .
1671	Delete a management certificate .
1672	Gets the properties for the given affinity group .
1673	Create an affinity group .
1674	Delete an affinity group .
1675	Gets a list of all subscriptions .
1676	Create a reserved IP address .
1677	Delete a reserved IP address .
1678	Associate a reserved IP address .
1679	Disassociates a reserved IP address .
1680	Gets a ReservedIP address by name .
1681	Gets a role by name .
1682	Create a virtual machine deployment .
1683	Adds a role to a deployment .
1684	Updates an existing role .
1685	Delete a role .
1686	Capture a role .
1687	Starts a role .
1688	Starts roles for the given service and deployment .
1689	Restarts a role .
1690	Shuts a role .
1691	Shuts one or more roles in a deployment .
1692	Adds a DNS server .
1693	Updates a DNS server .
1694	Delete a DNS server .
1695	Fetches a list of all resource extensions for a publisher and extension .
1696	Replicates a virtual machine image .
1697	Unreplicates a VM image .
1698	Share a VM image .
1699	Create a new VM image .
1700	Delete a VM image .
1701	Returns a list of all VM images .
1702	Updates a VM image .
1703	Adds an OS image .
1704	Updates an OS image .
1705	Updates an OS image from an image reference .
1706	Delete an OS image .
1707	Get information about a data disk .
1708	Adds a new data disk .
1709	Updates a data disk .
1710	Delete a data disk .
1711	Adds a disk .
1712	Updates a disk .
1713	Delete a disk .
1714	Summarize policy states for a management group .
1715	Builds the receiver .
1716	Fetch next message from the server .
1717	Renews the session lock .
1718	Create or update a virtual machine scale set .
1719	Converts a resource group to a single placement group .
1720	Create a new ScreenText object .
1721	Create a new key .
1722	Import a key from a vault .
1723	Updates an existing key .
1724	Sets a secret .
1725	Sets a certificate issuer .
1726	Create a SharedAccessKey from a connection string .
1727	Returns a SubscriptionClient for the given topic and subscription name .
1728	List all subscriptions for a specific topic .
1729	Send one or more messages .
1730	Get a new sender .
1731	Get a new receiver for this entity .
1732	Gets a new receiver for the deadletter queue .
1733	Parse the response for an async operation .
1734	Perform a GET request .
1735	Perform an HTTP PUT request .
1736	Wait for an operation status .
1737	Gets the operation status for a request .
1738	Adds Content - Length and Content - Type headers to the request .
1739	Build package .
1740	Get certificates for a VaultBase .
1741	Gets a list of all regions in the service bus .
1742	Gets a list of all namespaces for this service bus .
1743	Gets the namespace for the specified service bus .
1744	Create a new namespace .
1745	Delete a namespace .
1746	Checks availability of a namespace .
1747	Returns a list of all topics for the given topic name .
1748	Gets a list of all notification hubs for the given name .
1749	Returns a list of RelayDescription objects for the given name .
1750	Gets the metrics rollups for a queue .
1751	Get metrics rollups for a given topic and metric .
1752	Gets the metrics rollups for a given hub .
1753	Gets the metrics rollups for a given relay .
1754	Create a new environment .
1755	Create a virtualenv with packages .
1756	Create a new server .
1757	Sets the admin password for a server .
1758	Returns a list of quotas for the specified server .
1759	Gets a list of server event logs for the given start date and interval size .
1760	Create a firewall rule .
1761	Updates a firewall rule .
1762	Delete a firewall rule .
1763	Returns a list of all firewall rules for the specified server .
1764	Returns a list of all service level objectives for the specified server .
1765	Create a new database .
1766	Updates an existing database .
1767	Delete a database .
1768	Gets a list of all databases for the given name .
1769	Returns a paginated list of all agreements for the specified domain .
1770	Close this message handler .
1771	Close the connection to the receiver .
1772	Gets the session state of the session .
1773	Sets the session state .
1774	Receive deferred messages .
1775	Updates an existing reservation order .
1776	Validate that the challenge is Bearer .
1777	Purge an item from a resource group .
1778	Returns an ErrorAction for the given error .
1779	Create a queue .
1780	Delete a queue .
1781	Gets a queue .
1782	Create a new topic .
1783	Get information about a topic .
1784	Create a new rule .
1785	Gets a single rule .
1786	List all rules for a topic and subscription .
1787	Create a subscription .
1788	Get information about a subscription .
1789	List all subscriptions for a topic .
1790	Sends a message to a topic .
1791	Unlocks a subscription message .
1792	Sends a batch of messages to a queue .
1793	Unlocks a queue message .
1794	Receive a queue message .
1795	Receive a subscription message .
1796	Create an event hub .
1797	Updates an event hub .
1798	Get an event hub .
1799	Send an event to a hub .
1800	Adds Content - Length and Authorization headers to the request .
1801	Return the authorization string for the request .
1802	Check if a token is expired .
1803	Returns a token for the given host and path .
1804	Update request . path and request . query .
1805	Reset the service principal profile for a resource group .
1806	Delete this message from the broker .
1807	Unlocks this message .
1808	Renew the lock for this message .
1809	Adds headers to the request .
1810	Converts the message to a dictionary suitable for JSON serialization .
1811	Gets a Cluster Health object .
1812	Gets a cluster health using policy .
1813	Unprovisions an application type .
1814	Gets the task list associated with this user .
1815	Submit Property Batch .
1816	General Error handler .
1817	Starts a new Web Site Network Trace operation .
1818	Returns a paginated list of slot differences for a resource group .
1819	Swap a slot in a resource group .
1820	Gets a list of events for a given application and event type .
1821	Adds a face from a stream .
1822	Handles a redirect request .
1823	Create and start a migration .
1824	Publish events to a topic .
1825	Move resources from one resource group to another .
1826	Set the profile to the given profile .
1827	Gets a paginated list of query results for a management group .
1828	Create a queue .
1829	Delete a queue .
1830	Create a new topic .
1831	Delete a topic .
1832	Create a subscription .
1833	Create a SharedAccessKey from a connection string .
1834	Return a dictionary of properties for this queue .
1835	Return True if the lock is expired .
1836	Create a new session .
1837	Create a new subscription .
1838	Export request rate by interval .
1839	Handles the output queue .
1840	Add a batch of tasks to the results queue .
1841	Handles the task collection thread .
1842	Manage the configuration of the nspkg package
1843	Resets the password for the specified user .
1844	Start an environment .
1845	Create a message from a response .
1846	Converts an ElementTree element to a Rule object .
1847	Converts an ElementTree element to a Queue object .
1848	Converts an ElementTree element to a Topic object .
1849	Converts an Atom feed element to a Subscription object .
1850	Create a new certificate .
1851	Deletes a certificate .
1852	Get a client from a CLI profile .
1853	Gets a GraphRbacManagementClient object from a JSON dictionary .
1854	Load a client from an auth file .
1855	Parse a list of enumeration results .
1856	Return a dictionary of entry properties from an ElementTree element .
1857	Delete a certificate .
1858	Gets an existing queue .
1859	Return a list of all queues for this service .
1860	Returns a TopicClient for the given topic name .
1861	Return a list of all available topics .
1862	Receive deferred messages .
1863	Settle deferred messages .
1864	Get information about a site .
1865	Create a new website .
1866	Delete a site .
1867	Updates an existing website .
1868	Restarts a website .
1869	Gets historical usage metrics for a given webspace and website .
1870	Gets a list of MetricDefinitions for a given website .
1871	Gets the publish profile XML for the specified website .
1872	Gets the publish profile for the specified website .
1873	Updates the policies for the specified resource group .
1874	Create a new cloud service .
1875	Checks the name of a job collection .
1876	Gets a specific job collection .
1877	Complete a Restore Request .
1878	Cancels scheduled messages .
1879	Send all pending messages .
1880	Reconnect to the server .
1881	Gets a certificate from a publishsettings file .
1882	Load all cached cookies .
1883	Return the terminal width of a string .
1884	Return the cut prefix of a string .
1885	Print an inplace message to stderr .
1886	Format a file size into a human - readable string .
1887	Format time in hours minutes seconds .
1888	Create a status line .
1889	Print the progress of an iterator .
1890	Return a list of segment numbers for this playlist .
1891	Iterate over the segments for this representation .
1892	Waits for a given time .
1893	Put a segment into the queue .
1894	Put a value into the queue .
1895	Return parameters for a given pvswf .
1896	Extracts the nonce from the last call to the redirect URL .
1897	Look for a vpid on the given url .
1898	Parse JSON data .
1899	Parse XML data into an ElementTree object .
1900	Parse query string .
1901	Search dict by key .
1902	Spawns a new process .
1903	Return a list of Tag objects for the given HTML tag .
1904	Parse manifest .
1905	Determine the JSON encoding for the given sample .
1906	Parse a JSON response .
1907	Parse XML response .
1908	Parses a list of cookies .
1909	Parse headers into self . headers .
1910	Parse query parameters .
1911	Return a string representation of the message .
1912	Create a new LogRecord .
1913	Login to LiveEdu account .
1914	Load a support plugin .
1915	Updates the query string with the given dictionary .
1916	Iterate over the tags in chunks .
1917	Yields the required arguments for the given plugin .
1918	Check if file exists and force it .
1919	Create a file output from command line arguments .
1920	Create an HTTP server .
1921	Iterate over http requests .
1922	Starts an HTTP server to output streams .
1923	Output stream passthrough .
1924	Opens the given stream .
1925	Write stream to output .
1926	Read data from an output stream .
1927	Handles a stream .
1928	Fetch streams for the given plugin .
1929	Fetch streams from the given plugin retrying every interval seconds .
1930	Return the stream name for the given stream name .
1931	Return a list of streams that are valid for the given plugin .
1932	Handles a streamlink URL .
1933	Print all available plugins .
1934	Authenticate with Twitch .
1935	Load plugins from a list of directories .
1936	Load arguments from config files .
1937	Setup the console .
1938	Setup HTTP session .
1939	Loads the plugins from the plugins directory .
1940	Setup options for streaming .
1941	Log current versions of Python .
1942	Return the stream_id from the given text .
1943	Gets an iframe from the given text .
1944	Set an option .
1945	Return the value for the given key
1946	Set plugin option .
1947	Get a plugin option .
1948	Resolve a URL .
1949	Load all the plugins in the given path .
1950	Return the number of hours minutes seconds in seconds .
1951	Checks if a string starts with a string .
1952	Check if string ends with string .
1953	Check if string is contained in value .
1954	Return an attribute of a value .
1955	Apply a function to the values of a dict or dict - like object .
1956	Apply a function to a dictionary or dictionary - like object .
1957	Validate a URL .
1958	Find an element by xpath .
1959	Find all elements that match the given XPath expression .
1960	Find player URL from response . text .
1961	Load data into a M3U8 object .
1962	Return a player that supports the given command .
1963	Login to Dologin .
1964	Extracts a stream_id from an HTML string .
1965	Extracts the stream info from the given HTML string .
1966	Login to the website .
1967	Apply a function to each element of the sequence .
1968	Call the Crunchyroll API .
1969	Start a session .
1970	Get information about a media .
1971	Create a Crunchyroll API .
1972	Compress string using Compressor .
1973	Format to output a character .
1974	Format string to output .
1975	Read a number of bytes from the file .
1976	Return the value of this code .
1977	Return an explanation of this code .
1978	Sets the number of symbols with unknown length .
1979	Sets the length table for each length .
1980	Print a table of all symbols .
1981	Read a tuple from the stream .
1982	Return the explanation for the given index .
1983	Return the value at index .
1984	Return the span of the table at the given index .
1985	Return the value at the given index .
1986	Return the mnemonic for the given index .
1987	Return the mnemonic for the given index .
1988	Return a list of compiled actions .
1989	Runs the given action .
1990	Return a string representation of the data at the given position .
1991	Process a stream .
1992	Read the metablock length from the stream .
1993	Return True if uncompressed data .
1994	Sets the kind of the block .
1995	Return the IMTF of a list of values .
1996	Reads a list of prefix codes for the given kind .
1997	Monochrome .
1998	Return a 2D array with the given colors .
1999	Create an arrow table from a pandas dataframe .
2000	Patch a function .
2001	Adds the virtual columns of the cartesian velocities .
2002	Adds the virtual columns to the model .
2003	Return a Graphviz object representing this expression .
2004	Return a list of value counts for each column in the dataset .
2005	Map a dictionary to a list of values .
2006	Return a Vaex application .
2007	Open multiple files .
2008	Create a table from an SAMP message .
2009	Create a DatasetAstropyTable from an astropy . table . Table
2010	Create a DataFrame from a dictionary of arrays .
2011	Create an array from a dictionary of scalar values .
2012	Create a pandas dataframe from a pandas dataframe .
2013	Create a DataFrame from a CSV file .
2014	Create a server instance for the given URL .
2015	Return a Zeldovich dataset .
2016	Concatenate a list of DataFrames .
2017	Create a range from start to stop .
2018	Open a dataset .
2019	Evaluate the dataset .
2020	Wraps a function that returns a list of promises .
2021	Return a list of columns that should be included in the query .
2022	Run a task .
2023	Sorts the data .
2024	Return information about a Gadget file .
2025	Clears the background and ellipse .
2026	Wait for the last plot to finish
2027	Open a document .
2028	Context manager to write to a file .
2029	Split arrays into a list of arrays and a mask .
2030	Apply a function to the elements of an expression .
2031	Returns the first element of the query .
2032	Compute the mean of the values in an expression .
2033	Compute the sum of the given expression .
2034	Return the standard deviation of an expression .
2035	Calculates the covariance between the values of x and y .
2036	Compute the minimum and maximum of an expression .
2037	Compute the minimum value of an expression .
2038	Return the median approximation of an expression .
2039	Plot widget .
2040	Return the number of healpixs for each source .
2041	Plots the healpix data .
2042	Plots 3D data .
2043	Return the dtype of an expression .
2044	Return the private directory for this server .
2045	Return a dictionary representation of the state .
2046	Sets the state to the given dictionary .
2047	Removes the virtual meta . yaml file .
2048	Writes the virtual meta data to a yaml file .
2049	Write meta data to meta . yaml file .
2050	Return a list of the subspaces of this table .
2051	Set a variable .
2052	Evaluate a variable .
2053	Evaluate a selection mask .
2054	Return a dictionary representation of the model .
2055	Return a copy of the table .
2056	Convert to pandas dataframe .
2057	Convert a DataFrame to an arrow table .
2058	Convert to astropy . table . Table
2059	Add a column to the DataFrame .
2060	Rename a column .
2061	Add virtual columns to polar coordinates .
2062	Adds virtual columns to spherical velocities .
2063	Add virtual columns to polar velocities .
2064	Add virtual columns and velocities to cartesian coordinates .
2065	Add new columns to the model .
2066	Add virtual columns to cartesian coordinates .
2067	Adds the virtual columns to the Spherical model .
2068	Add a new column to the table .
2069	Delete a virtual column .
2070	Add a variable to the model .
2071	Delete a variable .
2072	Returns the last n elements of the sequence .
2073	Print the table head and tail .
2074	Returns a dictionary mapping feature names to their mean and std values .
2075	Print the contents of i1 and i2 .
2076	Set the current row .
2077	Return a list of column names .
2078	Removes all non - filtered values from the dataframe .
2079	Return a copy of this DataFrame with the given indices .
2080	Return a subset of this range .
2081	Return a random sample of the data .
2082	Split the data into random chunks .
2083	Split a sequence into chunks of a given fraction .
2084	Sort the array according to the given criteria .
2085	Materialize the data for the given column .
2086	Undo a selection .
2087	Redo a selection .
2088	Check if a selection can be redo .
2089	Select the given boolean expression .
2090	Select rows that are not missing .
2091	Drops all non - missing values from the table .
2092	Select a rectangle .
2093	Select boxes that are within the given list of limits .
2094	Select a circle .
2095	Select an ellipse .
2096	Select Lasso .
2097	Selects the inverse of the current selection .
2098	Set a selection .
2099	Create a new selection .
2100	Find a valid name for the given initial name .
2101	Return a list of the root nodes of the expression graph .
2102	Return a Graphviz representation of the graph .
2103	Categorize a column .
2104	Return the ordinal of the values in the given column .
2105	Return a list of Datas for this model .
2106	Return the length of the array .
2107	Horizontally stack DataFrames .
2108	Concatenates two DataFrames .
2109	Export data to an HDF5 file .
2110	Add a column to the DataFrame .
2111	Patch a DataFrame .
2112	Decorator to register a function in a given scope .
2113	Fill NaN with the given value .
2114	Return the dayofweek for each day of the week .
2115	Return the day of year for each day of the year .
2116	Return the is_leap_year for each year .
2117	Return a pandas Series containing the year of each day .
2118	Return the month of a DataFrame .
2119	Return the month name of a DataFrame .
2120	Return the day of each day in a DataFrame .
2121	Return the day name of a DataFrame .
2122	Return a pandas Series of weekofyear data .
2123	Return a pandas Series containing the hour of each day .
2124	Return the minute values of the given time series .
2125	Return the second value of a time series .
2126	Capitalizes a string .
2127	Concatenate two strings together .
2128	Return True if x contains the given pattern .
2129	Return the number of elements in x that match the given pattern .
2130	Find the first occurrence of sub in x .
2131	Get the string at index i .
2132	Find the first occurrence of substring sub in x .
2133	Converts a string to lowercase .
2134	Strip leading whitespace from a string .
2135	Pads a string to the given width .
2136	Repeats the string x with the given number of repeats .
2137	Find the first occurrence of sub in x .
2138	Return the index of substring sub between start and end .
2139	Return a string of the given length .
2140	Strip trailing whitespace from a string .
2141	Slice a string .
2142	Strip trailing whitespace from a string .
2143	Create a ColumnStringArrow representing the title of x .
2144	Converts a string to its upper - case representation .
2145	Return the autocorrelation of a numpy array .
2146	Convert a dictionary to a numpy . recarray .
2147	Write properties to a file .
2148	Write a comment to the file .
2149	Writes a property file .
2150	Iterate over a file - like object properties .
2151	Return a list of newlines from a file .
2152	Show all installed versions .
2153	Renames a keyword argument .
2154	Set the FFT library .
2155	Create a beat track from an input file .
2156	Adjust the pitches associated with the harmonic harmonic component .
2157	Convert frames to samples .
2158	Convert samples to frames .
2159	Convert time series to frames .
2160	Convert a midi number to a note number .
2161	Convert Hz frequencies to Mel .
2162	Convert mel_mel to Hz .
2163	Computes the frequencies of the spectral harmonic frequencies .
2164	CQT frequencies .
2165	Calculate mel frequencies of mel bands .
2166	Calculates the A weighting for the given frequencies .
2167	Time - wise log - likelihood .
2168	Converts an array of frames to samples .
2169	Hybrid CQT model .
2170	Project onto the pseudo - cqt basis C .
2171	r Calculates the IQT filter .
2172	Compute the CQT filter for each bin .
2173	Trim a stack of cqt_resp .
2174	Computes the response energy of the CQT .
2175	Calculate the number of octaves that should be downsampled .
2176	Downsampling with respect to the number of octaves .
2177	Calculate the cost for each step in D .
2178	Returns the backtracking path for the given number of steps .
2179	Calculates the viterbi distribution for the given log probability .
2180	Discriminative Discrimination .
2181	Return a uniform transition matrix .
2182	Create a transition matrix from a probability matrix .
2183	Return the transition matrix for a given number of states .
2184	Local transition .
2185	Detect onset strength profiles .
2186	Compute onset strength .
2187	Find points where energy is non - increasing .
2188	Compute onset strength for multiple samples .
2189	Write times and annotations to a CSV file .
2190	Write a waveform to a file .
2191	Return a colormap for the given data .
2192	Plot the waveplot of a time series .
2193	Set the current image .
2194	Return a dictionary of coordinates for a mesh .
2195	Checks that axes is an instance of matplotlib . axes .Axes .
2196	Scale axes based on axis_type .
2197	Return a 2D array centered at the center of the frequency range .
2198	Calculates the mel_frequencies for a given frequency range .
2199	Calculate the coordination of the CQT bins .
2200	Calculates chroma coordinates .
2201	Convert a time frame to a time frame .
2202	Estimate pitch tuning from piptrack .
2203	Calculate the piptrack of a time series .
2204	Compute Harm and percussives from the STFT matrix .
2205	Compute harmonic harmonic .
2206	Compute the percussive value of a vector .
2207	Compute the time stretch of a time series .
2208	Pitchshift function .
2209	Remix events from the audio buffer .
2210	Convert a signal to a frame .
2211	Removes all non - silent frames .
2212	Split a signal into frames and samples .
2213	Pad 0 columns to simplify boundary logic .
2214	Converts an amplitude to a database .
2215	Compute magnitude spectrogram from input data .
2216	HPSS beats on percussive component
2217	Decomposes the input data into n_components components .
2218	Filter for the non - similarity matrix S .
2219	Calculate the non - zeros out of the recurrence matrix .
2220	Calculates the mel bands of each frequency bin .
2221	Calculate the chroma of the spectral spectral flux .
2222	Wrapper for _float_window .
2223	Calculate the constant q .
2224	Calculates the number of bins per octave and the number of bins per octave .
2225	Merge fractional bins into target chroma .
2226	Calculate the bandwidth of a window .
2227	Return a window of size Nx .
2228	Multiirate Bandwidth Filter .
2229	Return the center frequencies and sample rates for a given tuning .
2230	Fills a window with a window of size hop_length
2231	Compute the sum square of a window .
2232	Apply a diagonal filter to a window .
2233	Calculate the spectral centroid of the input data .
2234	Spectral Rolloff .
2235	Spectral flatness .
2236	Compute the polynomial features for each frame .
2237	Calculate the zero crossing rate .
2238	Calculate the chroma stft .
2239	Map to chroma CQT .
2240	Mel spectrogram .
2241	Calculate Jaccard distance between two integers .
2242	Given a query and a list of intervals return the index of the interval that overlaps with the query .
2243	Given a list of intervals_from and a list of intervals_to find the intersection of the two .
2244	Return True if the given list of intervals match the given list of intervals .
2245	Given a list of events_from and a list of events_to and a boolean indicating whether they should be matched .
2246	Calculates the salience of the harmonic data .
2247	Interpolate harmonics .
2248	Estimate the harmonic energy at each frequency across time .
2249	Compute the harmonics for each value in the non - interpolated axis .
2250	Load a sound file into a numpy array .
2251	Load audio data from a file .
2252	Convert audio data to mono data .
2253	Resample data to target_sr .
2254	Calculate the autocorrelation of a time domain .
2255	Return the LPC of an audio signal .
2256	Create a set of clicks for the given time and frames .
2257	Compute the tone of a frequency .
2258	Calculate the chirp of a frequency range .
2259	Return a list of all files in the given directory .
2260	Stretch a WAV file .
2261	Process command - line arguments .
2262	Runs the HPSS test .
2263	Estimate BPM of a track .
2264	Return a list of beats for the given bpm .
2265	Calculates the local score of onset_envelope .
2266	Find the best beat track for the given local score .
2267	Return the last beat for a given cumulative score .
2268	Convert a recurrence matrix to a lag matrix .
2269	Convert a lag matrix to a recurrence matrix .
2270	Decorator to wrap a function into a time - lag filter .
2271	Return a subsegment of the given data .
2272	Agglomerative clustering .
2273	Compute the path enhance .
2274	Run onset detection on a wav file .
2275	Calculate the number of frames that will fit in the input buffer .
2276	Validate that the audio data is valid .
2277	Validate that x is a valid integer .
2278	Fix the length of data to the given size .
2279	Sort a 2D array along an axis .
2280	Normalize a vector .
2281	Return True if x is greater than or equal to x .
2282	Return the peak of the input array .
2283	Sparsify the rows of a matrix .
2284	Roll a sparse matrix along an axis .
2285	Convert a data buffer to a float .
2286	Convert an index set to a list of slices .
2287	Sync data with the given index set .
2288	Compute the softmask of X_ref .
2289	Return the tiny value of x .
2290	Convert frames to video files .
2291	Read the image from the device .
2292	Get the image for the given frame id .
2293	Converts the image to frames .
2294	Track the progress of the given function on the given tasks .
2295	Helper function to track parallel progress of a function .
2296	Flip image in the given direction .
2297	Rotate an image .
2298	Clip a list of bounding boxes .
2299	Scales a list of bounding boxes by a given number .
2300	Crop the image with the given bounding boxes .
2301	Return the impad of an image .
2302	Converts an image to multiple pixels .
2303	Scale size to a given number of pixels .
2304	Resizes an image to a given size .
2305	Resizes an image to the same size as the original image .
2306	Rescale an image .
2307	Register a handler for a list of file formats .
2308	Converts a priority to a Priority enum value .
2309	Dequantizes an array to a given number of levels .
2310	This function is used to display an image .
2311	Plots the bounding boxes of the image .
2312	Read data from a flow file .
2313	Writes a flow to a file .
2314	Dequantizes a flow .
2315	Loads the state_dict from the checkpoint .
2316	Load a checkpoint from a file .
2317	Converts a dictionary of weights to a dictionary of CPU weights .
2318	Save checkpoint to file .
2319	Initializes a torch . optim . Optimizer object from a dictionary .
2320	Initializes the logger .
2321	Return a list of parameters for the current optimizer .
2322	Register a hook .
2323	Run the workflow with the given data_loaders .
2324	Register training hooks .
2325	Convert a video file to a video file .
2326	Resizes a video .
2327	Cut a video file .
2328	Concatenate a list of video files together .
2329	Return a list of items from a file .
2330	Create a dictionary from a file .
2331	Conv2d with 3x3 kernel .
2332	Create an object from a dictionary .
2333	Read an image from disk .
2334	Convert a byte string to a numpy array .
2335	Write image to file_path .
2336	Converts an image to grayscale .
2337	Convert a grayscale image to BGR .
2338	Cast an iterable to a given destination type .
2339	Check if a sequence is of the expected type .
2340	Slice a list by the given number of elements .
2341	Decorator to check prerequisites .
2342	Calculate the average of the values in the history .
2343	Scatter op .
2344	Return a color value from a Color object .
2345	Check the time of a timer .
2346	Starts the simulation .
2347	Return the time since the start of the timer .
2348	Check to see if the timer is running .
2349	Show the flow .
2350	Converts a flow to RGB values .
2351	Make a color wheel from a list of bins .
2352	Computes the accuracy of the model .
2353	Scatter for the given inputs .
2354	Scatter the inputs and kwargs .
2355	Fetch a resource from S3 .
2356	Return a JSON representation of the resource .
2357	Return a text representation of the resource .
2358	Handles a callback .
2359	Perform multiple requests .
2360	Make a request to a URL .
2361	Start the master .
2362	Normalize task for Ansible 2 . 0 .
2363	Parse a YAML file into a dictionary .
2364	Return the name of the distribution .
2365	Return the name of the archive .
2366	Add setup . py requirements to setup . py
2367	Convert an egg - info file to a distribution file .
2368	Create a text message .
2369	Create a new Activity with a list of suggested actions .
2370	Create an attachment activity .
2371	Create a list of attachments .
2372	Create an attachment activity for the given URL .
2373	Create a new trace activity .
2374	Sets the telemetry client .
2375	Reads the given keys from the database .
2376	Write changes to the database .
2377	Delete one or more keys from the database .
2378	Create a StoreItem from a Cosmos result .
2379	Create a dictionary from a StoreItem
2380	Ensures that the key is valid .
2381	Create database and container .
2382	Create a database if it doesn t exist .
2383	Gets or creates a container from the database .
2384	Fill in QNATelemetry event .
2385	Return a conversation reference for the activity .
2386	Get the step name for the given index .
2387	Check if the channel supports suggested actions .
2388	Check if the channel supports card actions .
2389	Gets the channel_id of the activity .
2390	Checks if a token is valid from the emulator .
2391	Create a hero card attachment .
2392	Return a list of parameters defined in the definition .
2393	Mirrors the definition of this instance .
2394	Inverse gate .
2395	Set the control register to the given value .
2396	Return a copy of this object .
2397	Adds the if statement to the string .
2398	Return a string representation of the query .
2399	Runs all passsets in the circuit .
2400	Runs the passed in pass_ on the given dag .
2401	Return a list of all passes .
2402	Return a dictionary representation of this FlowController .
2403	Create a new FlowController .
2404	Return a new UBase object with the given parameters .
2405	Return parameters for a single gate .
2406	Return the single gate matrix for a given gate .
2407	Create an einsum matrix multiplication for a list of gate indices .
2408	Returns the einsum of the given gate indices .
2409	Helper function for _einsum_matmul_index .
2410	Convert a circuit to a DAGCircuit .
2411	Exponential fit function .
2412	Calculate the osc fit function .
2413	Plots the coherence .
2414	Calculate the shape of the RB data .
2415	Plots the RB data .
2416	Splits a list of runs on parameters .
2417	Compose two U3 parameters .
2418	Convert YY and ZYZ angles .
2419	Validate that the input is a valid quantum state .
2420	Removes all pixels from the image .
2421	Get the gate span for the given list of qregs .
2422	Converts a circuit to an instruction .
2423	Runs all qubits in the given dag .
2424	Return a subset of the connectivity matrix .
2425	Create a Barrier with the given qubits .
2426	Calculate the average data for the given counts and observable .
2427	Processes a bit id .
2428	Process a custom unitary node .
2429	Process a gate node .
2430	Process a CNOT node .
2431	Process a Measure node .
2432	Processes an if node .
2433	Create a gate for a Dag .
2434	Returns the duration of the given channels .
2435	Start time for one or more channels .
2436	Stop time for one or more channels .
2437	Yield Instruction objects for the given time .
2438	Check that the value is of the expected type .
2439	Dump additional data into a dictionary .
2440	Load additional data .
2441	Create a schema based on a schema class .
2442	Validate a model instance .
2443	Raise a ValidationError if the schema is invalid .
2444	Return a dictionary representation of the model .
2445	Create a model from a dictionary .
2446	Fourier transform .
2447	Partial trace vector .
2448	Vectorize a density matrix .
2449	r Devectorize a vector matrix .
2450	Convert a cholesky to a rauli matrix .
2451	Chop the array so that the real and imaginary parts are zero .
2452	Return the outer product of two vectors .
2453	r Calculates the concurrence of a qubit .
2454	Shannon entropy .
2455	Return the entropy of the given state .
2456	Calculates the mutual information of the state .
2457	Calculate the entanglement of the given density matrix .
2458	Calculate the end - of - qubit .
2459	Flatten a schedule into a single schedule .
2460	Shift a schedule to a given time .
2461	Insert a child component into a schedule .
2462	Append a child schedule to the parent schedule .
2463	U3 gate .
2464	Return a BackendStatus object for this backend .
2465	Start the simulation .
2466	Return the time remaining to be completed .
2467	Disassemble a QObject into a list of dictionaries .
2468	Return the Hamming distance between two strings .
2469	Create a Quaternion from an axis rotation .
2470	Return quaternion from euler angles .
2471	Normalize the data .
2472	Convert to a 2D matrix .
2473	Convert to Ez coordinate .
2474	Process data .
2475	Plot a histogram of data .
2476	Check the type of the value .
2477	Raise QiskitIndexError if j is out of range .
2478	Return True if mat is a square matrix .
2479	Return True if mat is a diagonal matrix .
2480	Check if op is a symmetric matrix .
2481	Return True if mat is a Hermitian matrix .
2482	Return True if mat is a positive semidefinite matrix .
2483	Check if a matrix is an identity matrix .
2484	Return True if mat is unitary matrix .
2485	Convert a quantum channel to a chi channel .
2486	Convert data to SuperOp .
2487	Convert data to Kraus .
2488	Convert data to Chi or Operator .
2489	Convert data to PTM .
2490	Convert data to StinesSpring data .
2491	Convert data to operator .
2492	Return the data and output_dim from an operator .
2493	Convert data to Operator representation .
2494	Helper function for _superop_to_choi
2495	Helper function for _choi to_superop
2496	Converts kraus_l and kraus_r .
2497	Convert Choi matrix to Kraus matrix .
2498	Convert a list of stines to a list of kraus vectors .
2499	Convert a 2D array to a 2D array .
2500	Convert kraus data to stine pairs .
2501	Convert kraus data to superoperator .
2502	Transform from Pauli data tochoi .
2503	Convert chi data to Pauli data .
2504	Reshuffle indicies .
2505	Transform from Pauli data .
2506	Check that input_dim is an n - qubit channel of output_dim .
2507	Hide ticklines and labels of an axis .
2508	Set the label convention .
2509	Clear all points and vectors .
2510	Add a list of vectors to the model .
2511	Add an annotation to the qubit .
2512	Render the Bloch sphere .
2513	Plots the front of the sphere .
2514	Show the plot .
2515	Return two qubit kak function .
2516	Return the top of the layer .
2517	Return the mid of the layer .
2518	Return the bot .
2519	Return the length of the message .
2520	Return a list of parameters for a label instruction .
2521	Return a label for a box instruction .
2522	Return a LaTeX representation of this parameter .
2523	Compile a list of circuits .
2524	Filter deprecation warnings .
2525	Return information about the local hardware .
2526	Checks if a connection exists for the given hostname and port
2527	Check the status of a job variable .
2528	Return a constant array .
2529	square of a time series .
2530	Calculate the triangle of a time series .
2531	Calculate the cosine between a frequency and phase .
2532	Fix the width of the gaussian data .
2533	Return the Gaussian at given times centered at center .
2534	Derivative of the Gaussian function .
2535	r Calculate the square of a time series .
2536	Default pass manager .
2537	Default pass manager simulator .
2538	Check if the register is a QuantumRegister or ClassicalRegister .
2539	Return a copy of this Circ with the mirrored data .
2540	Return a copy of the inverse circ .
2541	Append an instruction onto the wire .
2542	Attach an instruction to the container .
2543	Add a number of registers to the circuit .
2544	Raise QiskitError if there are duplicate qubits
2545	Raise QiskitError if qargs is not a list of qubits .
2546	Raise QiskitError if cargs is not a classical register .
2547	Checks that the two cregs are compatible .
2548	Return a string representing the QASM instruction .
2549	Draw the circuit .
2550	Return the size of the gate .
2551	Return the width of the program .
2552	Return a dictionary of the number of ops for each instruction .
2553	Return the number of connected components .
2554	Bind parameters to the circuit .
2555	Bind a parameter to a value .
2556	Plot a pulse drawer .
2557	Search forward n swaps in a given layout .
2558	Map a list of gates to a list of free gates .
2559	Calculate the distance between all gates in a layout .
2560	Return the score of the given step .
2561	Copy the circuit metadata to the target Dag .
2562	Transform gate for layout .
2563	Return a list of SwapGate nodes for the given edge .
2564	Return a list of gates for each qubit in the DAG .
2565	Add a physical qubit to the coupling graph .
2566	Add an edge between two qubits .
2567	Return a sub - graph of the given list of nodes .
2568	Return a list of all qubits in the graph .
2569	Check if the graph is weakly connected .
2570	Computes the distance between all pairs in the graph .
2571	Return the distance between two qubits .
2572	Deprecated . Use qiskit . compiler . transpile
2573	Cu1 gate .
2574	Inverse all the instructions .
2575	Adds the given number of qregs to the gate .
2576	If the condition is true then the condition is true else the condition is false .
2577	Subscribe to an event .
2578	Dispatch an event to all subscribers .
2579	Unsubscribe an event .
2580	Publish an event .
2581	Initialize a QuantumRegister with the given parameters .
2582	Defines the circuit .
2583	Return a qubit circuit for the disentangler .
2584	Calculate the bloch angles from a pair of complex vectors .
2585	Create a multiplex gate from a list of angles .
2586	Return True if value is a virtual register .
2587	Return a copy of this layout .
2588	Combine the wire map of this layout into an edge map .
2589	Add a ToffoliGate to the gate .
2590	Inserts this component into the schedule .
2591	Raise a TranspilerAccessError if the fenced object has a protected property .
2592	Converts gates and qregs to indices .
2593	Runs the stochastic swap .
2594	Update the state of the layer at index i .
2595	Create a Pauli group for the given number of qubits .
2596	Create a Qiskit instance from a label .
2597	Initialize this Qiskit instance from a boolean vector .
2598	Multiply two Pauli products .
2599	Return a |Operator| object representing this circuit .
2600	Converts the circuit to an instruction .
2601	Updates the z matrix with the given indices .
2602	Updates x with the given indices .
2603	Insert paulis into self .
2604	Append a paulis to the pauli list .
2605	Delete qubits at given indices .
2606	Return a random boolean array .
2607	Return a Pauli instance for a single qubit .
2608	Calculate the outcome of a qubit .
2609	Add a sample measure to the state vector .
2610	Add a qubit to the classical state .
2611	Resets the quantum state of a qubit .
2612	Validate that the initial state vector is correct .
2613	Set to default state of all qubits .
2614	Get the state vector .
2615	Validates that there is at least one measurement instruction in the experiment .
2616	Run a job for the given QObject .
2617	Run a job .
2618	Raise BasicAerError if the number of qubits is too large .
2619	Validate that the initial unitary is valid .
2620	Initializes the unitary .
2621	Get the unitary .
2622	Run a job .
2623	Validate that all qubits are valid .
2624	Return True if obj is a bit type .
2625	Runs all qubits in the DAG .
2626	Return True if this interval has overlap with this interval .
2627	Shift the interval to the given time .
2628	Return a Timeslot shifted to the given time .
2629	Return the start time for the given channels .
2630	Return the stop time for the given channels .
2631	Check if the given timeslots are mergeable with the given timeslots .
2632	Merge the timeslots into a new TimeslotCollection .
2633	Return a new TimeslotCollection shifted to the given time .
2634	Report the issue at the given commit .
2635	Process data into a dictionary .
2636	Plot state in PauliveC .
2637	Create a RZZ gate .
2638	Swap two FredkinGates .
2639	Initializes the backend property .
2640	Create a program graph for the given dag .
2641	Select the next program edge .
2642	Selects the best item to use for each gate .
2643	Select the best qubit for the given prog_qubit .
2644	Run the program .
2645	Return a list of all instructions in the circuit .
2646	Inverse the data .
2647	Apply the q_if function to each gate .
2648	Set the c_if gate to the given value .
2649	Return True if the matrix is unitary .
2650	Return the conjugate of the operator .
2651	Transposes the data .
2652	Return the power of the operator .
2653	Returns a tuple of the output and input dimensions .
2654	Converts a QuantumCircuit to an Operator .
2655	Update the current layer with the swap gates .
2656	Separate a bitstring by the number of creg_sizes .
2657	Format level 0 memory .
2658	Format level 1 memory .
2659	Converts a list of shot memory objects to a list of memory objects .
2660	Convert a dictionary of counts to a dictionary of counts .
2661	Format a state vector into a complex array .
2662	Format a matrix to be unitary .
2663	Decorator to require a job to be submitted .
2664	Submit the job .
2665	Return the status of the job .
2666	Return True if this interval includes the given lo_freq .
2667	Plots the bloch multivector .
2668	Return a copy of the qubit los .
2669	Return a copy of the measurement frequencies for the given user .
2670	Runs the circuit on the given DAG .
2671	Plot an iplot of the state of a quantum sphere .
2672	Select k elements from n .
2673	Return the index of the first k elements in a list .
2674	Plots a Pauli group .
2675	Return a list of all available BMQ backends .
2676	Return the op node of this node
2677	Return a sampled constant pulse .
2678	Returns a SamplePulse with zero pulse .
2679	Create a square pulse .
2680	Sawtooth pulse .
2681	Create a new triangle pulse .
2682	Create a cosine pulse .
2683	Spherical Pulse .
2684	Generate a Gaussian pulse .
2685	Generates a gaussian derivative pulse .
2686	Generate a Gaussian square pulse .
2687	Calculates the real distance between the x and y axes .
2688	Return a string representation of the expression .
2689	Return an instance of backend_cls .
2690	Rename a register .
2691	Removes all ops named opname from the graph .
2692	Add a QuantumRegister instance to the circuit .
2693	Add a ClassicalRegister instance to the circuit .
2694	Adds a wire to the graph .
2695	Raise an error if the condition is not valid .
2696	Return a list of all bits in a condition .
2697	Add an operation node to the graph .
2698	Applies an operation back to the graph .
2699	Raise a DAGCircuitError if any of the edges are not mapped .
2700	Check that the wire map is valid .
2701	Map the condition to the given wire map .
2702	Extend the current state of the graph with the new state of the graph .
2703	Compose the circuit back to the input circuit .
2704	Check that a list of wires is valid .
2705	Create the predecessor and successor maps for the given node .
2706	Compute the full predecessor and successor maps for each output node .
2707	Return the topological nodes in the multi - graph .
2708	Iterate over the edges of the graph .
2709	Returns a list of op nodes for the given op .
2710	Return a list of all gate nodes .
2711	Returns a list of nodes with the given names .
2712	Returns a list of two - q gate nodes .
2713	Returns the predecessors of the given node .
2714	Return a list of predecessors of the given node .
2715	Return the ancestors of the given node .
2716	Return a list of successors of a quantum register .
2717	Removes an op node .
2718	Removes all ancestors of node .
2719	Removes all descendants of node .
2720	Removes nonancestors of a node .
2721	Removes all nondescendants of a node .
2722	Return a deep copy of this circuit .
2723	Return a dictionary of all the serial layers .
2724	Iterate over the multigraph layers .
2725	Return a list of runs for the given namelist .
2726	Yield nodes on a given wire .
2727	Count the number of ops in the graph .
2728	Return a dictionary of the properties of the model .
2729	Return a TomographyBasis object for the given basis .
2730	Pauli Meas gates .
2731	Create a tomography set from a list of qubits .
2732	Create a tomography set from a list of qubits .
2733	Create the tomography circuits for the given circuit .
2734	Return data for a tomography circuit .
2735	Return the marginal counts for the given counts .
2736	Fit tomographic data to a model .
2737	Compute the leastsq model for the given data .
2738	Projector projection .
2739	Calculate the linear inversion of a list of ops .
2740	Calculates the wizard for the given rho .
2741	Calculate the wigner data .
2742	Measure gate .
2743	Checks the status of a job .
2744	Monitor the status of a job .
2745	Calculate the euler angles of a unitary matrix .
2746	Simplify a 2D U - 2D U - 2D U - 3D gate .
2747	Runs the model on the given dag .
2748	Create a qubits tab .
2749	Displays the job history for the given backend .
2750	Plots the history of a list of IBMQJobs .
2751	Draw a pulse drawer .
2752	Add a Cu3 gate .
2753	Build a Bell circuit .
2754	Converts a list of circuits to a list of TranspileJobs .
2755	Runs the given circuit .
2756	Run the given experiments .
2757	Return the drive .
2758	Return the control channel for this pulse .
2759	Return the measurement channel for this pulse .
2760	Return the acquire channel associated with this pulse .
2761	Calculates the input state of a qubit .
2762	Assemble a list of experiments into a list of QObjects .
2763	Unloads the qiskit logger .
2764	Create an iplot state hinton .
2765	Process fidelity between two channels .
2766	Parse input from data .
2767	Pop from the top of the stack .
2768	Push the lexer onto the stack .
2769	Runs the circuit on the given dag .
2770	Returns the bound method for the given instruction .
2771	Convert a acquire instruction to a dictionary .
2772	Convert a frame change to a new model .
2773	Convert a persistent value to a persistent value .
2774	Convert a drive to a QObject model .
2775	Convert a snapshot to a new snapshot .
2776	Update the annotations of the discretized pulse .
2777	Decorator to wrap a function with a sampling function .
2778	Filter backends based on filters .
2779	Resolve the name of a backend .
2780	Convert a DAG to a QuantumCircuit .
2781	Convert a matrix to a dictionary .
2782	Update the symtab for the given object .
2783	Verify that the symbol is declared as a bit .
2784	Verify that the list of external functions is valid .
2785	Verify that the symbol is a gate or opaque call .
2786	Verify that the given object is of the given type .
2787	Verify that obj is a bitlist or an idlist of type object_type .
2788	Find the column number of the last newline in the input string .
2789	Parse debug value .
2790	Parse data and return a QASM instance .
2791	Run the parser on the given data .
2792	Parse the QASM file .
2793	Crz gate .
2794	Return the basis state of a bitstring .
2795	Projector projection .
2796	Return the purity of the given state .
2797	Initiate the commutation set for each qubit in the given dag .
2798	Display a backend .
2799	Updates the backend information .
2800	Generates a progress bar for the number of jobs in the queue .
2801	Removes all gate nodes from the given dag .
2802	Get a backend by name .
2803	The shape of the Bipartite model .
2804	Get the register specs for the given labels .
2805	Truncates a float .
2806	Return a LaTeX representation of the image .
2807	Returns the image depth of the layer .
2808	Return the page size of the beamer image .
2809	Load schema from file_path
2810	Return a validator for the given schema .
2811	Load schemas and validators .
2812	Validate json_dict against a schema .
2813	Return a list of causes .
2814	Return the majority of a b and c .
2815	Auxiliary function for unmajority .
2816	Generates a LaTeX source for the given circuit .
2817	Draw a circuit to a file .
2818	Return a random unitary operator .
2819	Return a random density matrix .
2820	Ingibre matrix .
2821	Return a random density matrix .
2822	Return random density bures .
2823	Return a list of all custom unitary calls .
2824	Computes the power of the input matrix .
2825	Compose the subsystem of self and other .
2826	Convert a QuantumCircuit to a SuperOp .
2827	Runs all the operations in the given dag .
2828	Convert a list of circuits to a qobj .
2829	Run all 3q or more gates in a DAG .
2830	Run this circuit on the given DAG .
2831	Defines the gate .
2832	Raise ValidationError if value is not a collection .
2833	Raise ValidationError if value is not of type attr .
2834	Sets the atol of the class .
2835	Sets the rtol of the class .
2836	Reshaped input_dims and output_dims .
2837	Return a tuple of the input dimensions .
2838	Returns a tuple of the output dimensions of the query .
2839	Return a copy of the data .
2840	Return the power of the input array .
2841	Return the number of qubits required for the given number of qubits .
2842	Computes the einsum of a matrix .
2843	Deserializes value according to the schema selector .
2844	Override _serialize method to handle invalid schema .
2845	Check if value is of type attr .
2846	Compute the fidelity of two state vectors .
2847	Compute SVD .
2848	Return the inverse of the qubit .
2849	Setter for _label attribute .
2850	Return True if this operator is unitary .
2851	Convert to operator .
2852	Convert this QuantumChannel to an instruction .
2853	Initialize the transformer for the given data object .
2854	Sort enum for model .
2855	Patch the strptime module .
2856	Return a dictionary mapping languages to locales .
2857	Returns a generator of locales for the given languages .
2858	Check if a list of tokens is valid .
2859	Split a string into a list of tokens .
2860	Parse a date string into a DateData object .
2861	Parse time from date_string .
2862	Return True if the given date string is applicable to the given date string .
2863	Translates a date string .
2864	Parse a date string with a list of date formats .
2865	Return a generator for the given ammo file .
2866	Converts a Java exception to a Python exception .
2867	Converts a Java exception to an HTTP error code .
2868	Read configuration from config file .
2869	Create a phantom config file for each of the streams .
2870	Get info about all streams .
2871	Compose the configuration for the stepper .
2872	Log stdout and stderr .
2873	Expands a time string to a number of units .
2874	Configures the StepperWrapper .
2875	Prepare the stepper .
2876	Return a string that can be used in a stpd file .
2877	Reads the cached stepper info .
2878	Writes a StepperInfo object to disk .
2879	Create a Stepper object for the stpd file .
2880	Create a new RPS schedule .
2881	Return the rps at a given time .
2882	Executes a sub - process .
2883	Decode the monitoring data into a list of dictionaries .
2884	Create points for a given label .
2885	Publishes the given key with the given value .
2886	Count the number of codes that match the given regex .
2887	Stops the feeder .
2888	Feed data into the queue .
2889	Initializes the logging .
2890	Add user options to the core .
2891	Load configuration from a file .
2892	Graceful shutdown .
2893	Collect data and stats from the queue .
2894	Notify listeners about data and stats .
2895	Get a marker for the given marker type .
2896	Parse a duration string into a number of milliseconds .
2897	Starts the agent on localhost .
2898	Starts the agent .
2899	Discover JMeter UDP port .
2900	Adds jtl and variables to the given JMX file .
2901	Terminate the process .
2902	Read data from a list of lines .
2903	Create a new criterion based on a string .
2904	Load configuration from XML file .
2905	Create a new startup config file for the agent .
2906	Check disk space .
2907	Check if memory is too large .
2908	Get the size of the terminal
2909	Gets the right line from the output .
2910	Truncates line_arr to max_width .
2911	Render the left panel .
2912	Render the screen .
2913	Adds a widget to the info widget .
2914	Fill a rectangle from a list of strings .
2915	Return the length of the given line .
2916	Create a load plan for the given schedule .
2917	Return the level as a string .
2918	Adds a widget to the screen .
2919	Make a write request .
2920	Load yandextank plugins .
2921	Searches for a plugin of the given class .
2922	Returns a list of plugins of the given class .
2923	Collects a file into the artifacts directory .
2924	Adds an artifact file to collect .
2925	Create a temporary file .
2926	Load configs from a list of files .
2927	Flush the config to a file .
2928	Return a list of options for a section .
2929	Return a list of sections that start with the given prefix
2930	Decode stats data .
2931	Get information about the phantom .
2932	Prepares the configuration for the agent .
2933	Poll data from all agents .
2934	Send collected data to all listeners .
2935	Return the configuration for the target .
2936	Handles data items .
2937	Decode a block of data into a dictionary .
2938	Subscribe to channels .
2939	Run the event loop .
2940	Close the websocket and polygon .
2941	Perform one request .
2942	Submit an order .
2943	Get a single order .
2944	Returns a Position object for the given symbol .
2945	List all assets for a given status and asset class .
2946	Returns an Asset object for the given symbol .
2947	Create a joining subplan .
2948	Checks that an object is a dict .
2949	Return a dict parameter for the given param name .
2950	Construct an event logger .
2951	Construct an event logger for the given json_path .
2952	Create an instance from a config file .
2953	Returns the configuration for the given repository .
2954	Format config for GraphQL .
2955	Returns a PipelineDefinition object for the given name .
2956	Returns a list of all pipelines .
2957	Return the next event from the queue .
2958	Execute a sub - pipeline .
2959	Wait for all processes to join .
2960	Create a new field of the given type .
2961	Builds the execution plan for the given pipeline definition .
2962	Builds the plan for the given pipeline definition .
2963	Build a sub - pipeline from a pipeline definition .
2964	Return the solid with the given name .
2965	Return a list of commands to publish comands .
2966	Set the version to release .
2967	Passthrough context definition .
2968	Decorator to create an input selector schema from a config class .
2969	Decorator to create an output selector schema from a config class .
2970	Block a block of text .
2971	Download file from S3 .
2972	Upload a file object to S3 .
2973	A context that raises an error that is part of the user - framework contract .
2974	Create a new directory .
2975	Return a context manager for a user code .
2976	Create a DagsterLog for the given run config and pipeline definition .
2977	Determines if the Dagster is successful .
2978	Return True if there are any skipped steps .
2979	Return a dictionary of the transformed values .
2980	Return the transformed value for the given output name .
2981	Return the failure data for each step .
2982	Return a permissive dictionary .
2983	Check if config_value is a valid dataset .
2984	Check if config_value is a valid table .
2985	Execute the core transform for the given inputs .
2986	Converts an existing type to a Dagster type .
2987	Decorator to create a resource definition .
2988	Create a new event .
2989	Coalesce the execution steps for the given execution plan .
2990	Return a dictionary of connection parameters .
2991	Create a new connection .
2992	Create a new cursor .
2993	Close the connection .
2994	Create a model from a dictionary .
2995	Converts the value to a list of mdl objects .
2996	Override the default formfield method .
2997	Converts a value to a dictionary .
2998	Apply the relationship filters to the given queryset .
2999	Return a uniform distribution of the NFPs for the given cumulative counts .
3000	Compute the number of non - zero NFPs for each l and u .
3001	Compute the optimal number of partitions for a given number of partitions .
3002	Return a list of the optimal number of partitions for a list of counts .
3003	Calculate the C between r1 and r2 .
3004	Initializes the slots with the given seed and hashvalues .
3005	Return the number of bytes required to store the hash value .
3006	Serialize this MinHash to a byte string .
3007	Deserialize a LeanMinHash from a byte string .
3008	Update self . hashvalues and self . permutations .
3009	Merge two MinHash objects .
3010	Create a new MinHash from a list of MinHash objects .
3011	Insert entries into the index .
3012	Query the indexes for the given hash .
3013	Return the minimum hash of the input vector .
3014	Removes the given key from the dictionary .
3015	Update the accumulator with the hash value b .
3016	Return the number of nonzeros in the range .
3017	Merge this HyperLogLogLog with another HyperLogLogLog .
3018	Clear the memory .
3019	Calculate AMP score .
3020	Map k samples from the predicted distribution to the predicted distribution
3021	Index the hashtables .
3022	Perform a query on a MinHash .
3023	Close all resources .
3024	Return an ordered list storage .
3025	Return an unordered storage .
3026	Returns a UserDetails instance for the given object .
3027	Overrides get_social_login method
3028	Selects the best kanji number for the given text .
3029	Parse a scoped selector into a scope and selector
3030	Parse a statement .
3031	Parse a value .
3032	Advance the current token to one line .
3033	Parse a configurable reference .
3034	Augments an exception with an augmented message .
3035	Converts a string to markdown format .
3036	After create session .
3037	Ensure that a function is wrapped .
3038	Decorate a function or class .
3039	Return a string representation of a value .
3040	Clears the configuration .
3041	Bind a parameter to a Gin config .
3042	Query parameter for the given binding key .
3043	Check if a function or class has a parameter arg_name .
3044	Return a cached argument specification for the given function .
3045	Returns a list of positional parameters for the given function .
3046	Returns a list of all positional parameters for a function .
3047	Return a dictionary of default values for a function .
3048	Yields a new scope based on the given name or scope .
3049	A decorator that can be used to decorate a function or class .
3050	Return an operative config string .
3051	Parse a config file .
3052	Register a file reader .
3053	Parse a config file .
3054	Parse config files and bindings .
3055	Parse a value into a ConfigParser instance .
3056	Finalize the config .
3057	Iterate over the flattened values of the given value .
3058	Iterate over all ConfigurableReference objects in config .
3059	Sets the value of a constant .
3060	Return a constant class from an enum class .
3061	Return a list of selectors that match a partial selector .
3062	Returns a list of all matches for the given partial selector .
3063	Return the minimal selector for the given selector .
3064	Builds a search query from a dictionary .
3065	Parse Retry - After header .
3066	Validates that a value is valid for this property .
3067	Return a dictionary describing this property .
3068	Set the value of the field .
3069	Return the thing at the given index .
3070	Initializes things and hosts .
3071	Set default headers .
3072	Prepare the connection to the server .
3073	Get a thing .
3074	Called when a message is received .
3075	Create a new thing .
3076	Delete a thing .
3077	Start the webthing server .
3078	Return a dictionary representation of this action .
3079	Start the thing .
3080	Mark the action as completed .
3081	Return a dictionary representation of the event .
3082	Return the IP address of the server .
3083	Return a list of IPv4 and IPv6 addresses for this interface .
3084	Set the value forwarder .
3085	Notify of external update .
3086	Return a JSON representation of this Thing .
3087	Sets the href prefix for all properties and actions .
3088	Return a dictionary of property descriptions .
3089	Returns a list of descriptions for the given action .
3090	Returns a list of event descriptions for the given event name .
3091	Adds a property .
3092	Removes a property from the model .
3093	Returns the value of a property .
3094	Return a dictionary of all properties .
3095	Set the value of a property .
3096	Get an action by name and id .
3097	Add an event to the event queue .
3098	Add an available event to the registry .
3099	Perform an action with the given name .
3100	Removes an action .
3101	Add a new action .
3102	Removes all subscribers for the given ws .
3103	Add a subscriber to an event .
3104	Removes an event subscriber .
3105	Sends a property notification to all subscribers .
3106	Send a message to all subscribed actions .
3107	Send a message to all subscribers of an event .
3108	Annotates the model s fields with the given annotations .
3109	Updates the query with the given fields .
3110	Bulk insert data from a list of rows .
3111	Inserts the given fields into the database .
3112	Create a new instance of the model with the given fields .
3113	Builds an insert query from a list of rows .
3114	Check if the field is a magical field .
3115	Returns the insert and update fields for the given kwargs .
3116	Called when a model is saved .
3117	Called when a model is deleted .
3118	Returns True if any of the given fields are not None .
3119	Return a new HStoreValue with the given arguments .
3120	Return a list of SQL statements that can be used as part of the query .
3121	Return a clone of the object with the given relabeled labels .
3122	Add join conditions to the query .
3123	Checks if the field_name is a HStoreField .
3124	Insert or update a list of objects .
3125	Create a new hstore required constraint .
3126	Rename an existing column to a new column .
3127	Drops the hstore_required_drop constraint .
3128	Return the name of a required constraint .
3129	Create the SQL statement to create the index .
3130	Create a command from a list of commands
3131	Return the base class for the PostgreSQL backend .
3132	Create the database .
3133	Return a dictionary representation of the field s value .
3134	Returns a string to be used as a RETURNING statement .
3135	Return the query as a list of SQL statements .
3136	Rewrite an insert or update statement .
3137	Rewrite an insert or update statement .
3138	Rewrites an insert statement that does nothing if the row already exists .
3139	Builds the conflict target for the query .
3140	Return the model field with the given name .
3141	Format a field name for a model field .
3142	Return a string representation of a field value .
3143	Create a unique constraint .
3144	Rename a unique column in a table .
3145	Drops the unique constraint from the database .
3146	Return a unique constraint name .
3147	Iterate over the uniqueness keys of a field .
3148	Adds a condition to the query .
3149	Converts the query to a SQL query .
3150	Return the T_DIST_95_CONF level .
3151	Calculate the variance between two samples .
3152	Compute T - score between two samples .
3153	Return True if two samples are significant .
3154	Return the topological sorting of a list of datasets .
3155	Yields the number of queen_count elements .
3156	Play a node on the board .
3157	Select a node from the unexplored list
3158	Return a random playout of the board .
3159	Filter benchmarks based on a list of benchmark functions .
3160	Expand a benchmark name into a list of benchmark names .
3161	Generates a string table .
3162	Initializes benchmarks for the given number of values .
3163	Gets the domain of the mesh .
3164	Fetch all posts for the given category .
3165	Parse a list of posts .
3166	Get information about a user .
3167	Fetch entries for a given category .
3168	Fetch items from the feed .
3169	Setup command parser .
3170	Fetch items for the given category .
3171	Returns a list of bugs for the given date .
3172	Get comments for a list of bug ids .
3173	Get the history for a list of bug ids .
3174	Attach attachments for a list of bug_ids .
3175	Get all the notes for the given issue .
3176	Fetch all merge requests for the given date .
3177	Get all merge notes for the given merge_id .
3178	Get merge versions for a merge .
3179	Get a list of merge requests for this project .
3180	Merge an existing merge .
3181	Merge versions for a merge .
3182	Merge a version into this project .
3183	Returns a list of notes for the given item .
3184	Get a list of emojis for the given item type and id .
3185	Returns a list of note objects for the given item type and id .
3186	Calculate the time to reset the rate limit .
3187	Fetch items from GitLab .
3188	Initialize rate limit .
3189	Setup command parser .
3190	Fetch messages for the given category .
3191	Return a unique identifier for a metadata item .
3192	Returns the number of members of a conversation .
3193	Get channel information .
3194	Get information about a user .
3195	Setup command parser .
3196	Return the timestamp of the metadata that was updated on the given item .
3197	Parse a CSV file into a list of dicts .
3198	Parse bugs details from XML stream .
3199	Parses a bug activity .
3200	Logout the Bugzilla user .
3201	Get the metadata for this bug .
3202	Returns a list of bugs for the given date .
3203	Returns a list of bugs for the given ids .
3204	Get Activity for a bug .
3205	Fetch events for the given category .
3206	Fetch all events in the group .
3207	Get events for a group .
3208	Get comments for an event .
3209	Get all RSVPS for a group and event .
3210	Fetch the data for the given question .
3211	Returns a dictionary of comments for the given question .
3212	Builds a question object from an HTML page .
3213	Get all of the questions for a resource .
3214	Get an HTML question .
3215	Get comments for a post .
3216	Parses a question container .
3217	Parse the answer information container of an HTML question .
3218	Parses the number of HTML pages in the question .
3219	Parse the user information from the update_info element .
3220	Fetch items for a given category .
3221	Parse JSON data into a list of reviews .
3222	Fetch Gerrit28 reviews .
3223	Get the Gerrit server version .
3224	Get all reviews for the last item .
3225	Gets the next item for a group .
3226	Executes a command .
3227	Execute a command from an archive .
3228	Execute a Gerrit command from a remote server .
3229	Setup command parser .
3230	Fetch data for an issue .
3231	Fetch all attachments for an issue .
3232	Fetch all messages for a given issue .
3233	Fetch all activities for a given issue .
3234	Fetch user data for user_link .
3235	Get information about a user .
3236	Get information about an issue .
3237	Get a collection for a given issue .
3238	Return the URL for the project .
3239	Fetch items from the server .
3240	Get all subscriptions for this user .
3241	Return the group id for this group .
3242	Fetch the given url and payload .
3243	Setup command parser .
3244	Generate a UUID from a list of strings .
3245	Fetch a list of objects from a backend .
3246	Fetch items from an archived archive .
3247	Return a list of registered backends for the given package .
3248	Fetch items for the given category .
3249	Fetch all items from the archive .
3250	Filter classified data for item .
3251	Parse the given arguments .
3252	Add authentication arguments to the backend .
3253	Set the command line arguments for the archives command .
3254	Add output arguments to the command line .
3255	Executes the fetch command .
3256	Initializes the archive .
3257	Return the time that metadata was updated on the given item .
3258	Parse a mbox file .
3259	Fetch and parse messages from a mailing list .
3260	Copy the contents of the given MBOX to a temporary file .
3261	Validate that a message is valid .
3262	Convert a dictionary to a dictionary .
3263	Gets a message for the given key .
3264	Fetch items for the given category .
3265	Fetch items for a given category .
3266	Parse a git log from a file .
3267	Pre - init the git path .
3268	Setup command parser .
3269	Parse the stream into a list of Commit objects .
3270	Clone a git repository into a given directory .
3271	Return the number of objects in the repository .
3272	Checks if HEAD is a symbolic reference .
3273	Update the current working copy .
3274	Sync the git repository .
3275	Return a list of revisions for this repository .
3276	Log the contents of this repository .
3277	Show the contents of this repository .
3278	Fetch the pack for this repo .
3279	Return a list of commits from a pack .
3280	Update references in - sync process .
3281	Return a list of refs for this repository .
3282	Update a git ref .
3283	Executes a git command .
3284	Read the stderr of the subprocess .
3285	Executes a git command .
3286	Fetch tweets for the given category .
3287	Fetch all tweets for a given category .
3288	Get a list of tweets for the given query .
3289	Setup command parser .
3290	Fetch all items in a category .
3291	Fetch data for a category .
3292	Parse the hit_raw into a dictionary .
3293	Fetch hits for a list of keywords .
3294	Return the updated_at for the given item .
3295	Return the metadata category .
3296	Fetch pull requests for a given date .
3297	Fetch repo information .
3298	Returns a list of reaction objects for the given issue number .
3299	Returns a list of reaction objects for the given comment .
3300	Return a list of issue assignees .
3301	Returns a list of reviewers for the given PR number .
3302	Returns a list of commits for a pull request .
3303	Get a list of pull - review comment reactions for a comment .
3304	Get a user by login .
3305	Get the reactions for the given issue number .
3306	Get a list of issues for a given date .
3307	Get a generator of pull requests for this repository .
3308	Return the repository associated with this user .
3309	Returns a list of reviewers for the given PR number .
3310	Returns a list of commits for the given PR number .
3311	Get a list of reviews for a pull review comment .
3312	Get information about a user .
3313	Get orgs for a user .
3314	Get the rate limit for a token .
3315	Returns a list of the number of tokens in the archive .
3316	Choose the best API token based on the number of tokens .
3317	Check to see if the number of tokens needs to be checked .
3318	Updates the current rate limit .
3319	Initializes metadata for the given backend .
3320	Store data in the database .
3321	Retrieve a single entry from the database .
3322	Create a new archive .
3323	Create a hashcode for the given uri and payload .
3324	Verifies that the archive is valid .
3325	Load metadata from database .
3326	Return the number of rows in a table .
3327	Create a new archive .
3328	Removes an archived archive .
3329	Search archives .
3330	Search archives by origin and backend name and category .
3331	Search for files in self . dirpath .
3332	Check if a file is compressed .
3333	Return a list of months between the given date and the given date .
3334	Converts an email message to a dictionary .
3335	Removes invalid XML characters .
3336	Convert XML to dict .
3337	Parse a JSON representation of issues .
3338	Get issues for a given date .
3339	Returns a JSON representation of an issue .
3340	Get information about a user .
3341	Call Redmine API .
3342	Fetch data for a given category .
3343	Fetch data for a category .
3344	Get information about a repository .
3345	Map a dictionary of custom fields to a dictionary of custom fields .
3346	Filter custom fields based on a list of fields
3347	Parse a raw page of issues .
3348	Get items for a given date .
3349	Returns a list of issues for the given date .
3350	Returns a list of comments for the given issue .
3351	Returns a list of all fields for this project .
3352	Fetch items for a build .
3353	Returns a list of jobs for the current user .
3354	Returns a JSON representation of the build for the given job .
3355	Parse a raw page and return a generator of question objects .
3356	Gets a list of all the questions for a given date .
3357	Setup command parser .
3358	Fetch items for a given category .
3359	Returns the maximum timestamp for a list of reviews .
3360	Fetch 1 . 7 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1
3361	Get all pages for a namespace .
3362	Get recent changes for a list of namespaces .
3363	Fetch messages for a category .
3364	Parse a JSON response into a list of messages .
3365	Filter a message by a list of chats .
3366	Updates the account .
3367	Fetch all articles in a category .
3368	Adds offset to item s metadata .
3369	Converts an article to a dictionary .
3370	Fetch data from remote server .
3371	Fetch a single article .
3372	Fetch data from NNTTP server .
3373	Fetch data from the archive .
3374	Create HTTP session .
3375	Setup the rate limit handler .
3376	Sleep for rate limit .
3377	Update rate limit .
3378	Parse a Supybot log file .
3379	Return a list of archives for the given date .
3380	Return a list of Supybot archives .
3381	Parse Supybot messages .
3382	Parse a Supybot timestamp .
3383	Parse a Supybot message .
3384	Fetch items for the given category .
3385	Parse the topics page into a list of topics .
3386	Get information about a topic .
3387	Create a new post .
3388	Fetch tasks for the given category .
3389	Parse raw json into a list of tasks .
3390	Parse a list of users from a JSON response .
3391	Get all tasks for a given date .
3392	Perform a MANIPHEST_TRANSACTIONS request .
3393	Get users for a list of phids .
3394	Returns a list of phids associated with the authenticated user .
3395	Call Conduit API .
3396	Return a unique identifier for a metadata item .
3397	Parse contents summary .
3398	Returns a generator over the contents for the given date .
3399	Returns the content for the given content_id .
3400	Parse the result of the measurement .
3401	Return WFS capabilities URL .
3402	Read an XML document from a URL .
3403	Read a string or bytes from a string or bytes object .
3404	Parses the result element and returns a MeasurementTimeseries object
3405	Builds the URL for the base URL .
3406	Returns a list of elements for the given complex type .
3407	Construct a schema from a list of elements .
3408	Gets the URL for a DescribeFeatureType request .
3409	Run ComplexDataInput with reference .
3410	Get a list of movie resources .
3411	Fetches a list of TV resources .
3412	Get a list of movies .
3413	Get information about the server .
3414	Gets a list of alternative titles for the current user .
3415	Get credits for this account .
3416	Gets a list of external ids for a project .
3417	Returns a list of keywords associated with this account .
3418	Get recommendations for a project .
3419	Gets a list of release dates for a project .
3420	Get a list of releases for a project .
3421	Returns a list of translations for this account .
3422	Get a list of similar movies .
3423	Returns a list of reviews for this user .
3424	Gets a list of changes for a project .
3425	Gets a list of upcoming jobs .
3426	Gets a list of now_playing resources .
3427	Returns a list of popular items .
3428	Gets a list of top -rated resources .
3429	Gets a list of account states for a project .
3430	Gets the rating for this user .
3431	Get movie credits for a movie .
3432	Gets the credits for the TV .
3433	Get information about the credit id .
3434	Returns a list of TV objects matching the given criteria .
3435	Get information about the server .
3436	Get a list of movie resources .
3437	Get information about this session .
3438	Get a list of movies that have been watched .
3439	Create a new token .
3440	This operation allows you to validate a token with login .
3441	Create a new session .
3442	Gets a new guest session .
3443	Get all Rated movies for this user .
3444	Gets the status of an item .
3445	Create a new list .
3446	Removes an item .
3447	Clears a list of resources .
3448	Gets a list of content ratings for a project .
3449	Gets a list of similar items .
3450	Fetches information about the on - the - the - air resource .
3451	Retrieve information about the season number .
3452	Gets credits for the specified season number .
3453	Gets the external_ids for the specified season .
3454	Retrieve information about the season number and episode number .
3455	Get credits for the specified season number and episode number .
3456	Gets the external ids for the specified season number and episode number .
3457	Helper method to set attributes to values from a dictionary .
3458	Get a movie .
3459	Gets a collection resource .
3460	Fetches information about the TV .
3461	Gets a person .
3462	Gets a company resource .
3463	Gets a list of keywords for a project .
3464	Gets a multi resource .
3465	Normalize a string to a list of tokens .
3466	Return the n - grams of each ref in refs .
3467	Return the number of n - grams in a reference set .
3468	Return the ECC of x .
3469	Aligns the source texts with the target texts .
3470	Yields all descriptors in a module .
3471	Registers the given object as JSON .
3472	Register a descriptor with the registry .
3473	Print a string to stdout .
3474	Return True if descriptor is a Descriptor class .
3475	Convert to JSON representation .
3476	Return the 3D coordinate of this descriptor .
3477	Return atomic sphere at index i .
3478	Return the surface area of the mesh .
3479	Create a molecule from a mol object .
3480	Create a Descriptor from a JSON object .
3481	Return a new Molecule with missing values filled .
3482	Return a new Molecule with all missing values removed .
3483	Return a tuple of the keys and values of the model .
3484	Return a dictionary representation of the object .
3485	Gets the name of the value .
3486	Decorator to log function calls .
3487	A decorator to make a function synchronized .
3488	Print a progress bar to stderr .
3489	Writes a message to stdout .
3490	Fail with a message and an exception .
3491	Get a temporary file .
3492	Set a temporary file .
3493	Remove temporary files .
3494	Returns a fixed path .
3495	Returns a list of params for the given method .
3496	Merge parameters into a dictionary .
3497	Add options to the given parser .
3498	Terminate the task .
3499	Add a task to the queue .
3500	Wait for all threads to terminate .
3501	The number of tasks that have been processed .
3502	Read S3 keys from environment variables .
3503	Return S3 keys from command line options .
3504	Read S3 keys from S3 configuration file .
3505	Initializes S3 keys .
3506	Connect to S3 .
3507	Return a list of all S3 buckets .
3508	Return a list of all files in a directory .
3509	Walks the given base directory and returns a list of all files in the given base directory .
3510	Expand source into a list of source names .
3511	Upload a single file to S3 .
3512	Put files from source to target .
3513	Create S3 bucket .
3514	Updates the privilege for the given object .
3515	Print files from S3 .
3516	Download a single file from S3 .
3517	Returns a list of files for the given target .
3518	Copy a single file from source to target .
3519	Copy files from source to target .
3520	Delete files from S3 .
3521	Return a list of relative paths to the given directory .
3522	Copy files from one directory to another .
3523	Return the md5 hash of a file .
3524	Get the md5 of the file .
3525	Create a directory if it does not exist .
3526	Check if remote key is in md5 cache .
3527	Check if path matches filter_path .
3528	Walk through S3 objects .
3529	Return a list of objects that have been modified or modified .
3530	Return the file privilege for the given source .
3531	Look up an object from S3 .
3532	Read a chunk of data from a file .
3533	Upload a file to S3 .
3534	Verifies the downloaded file size is consistent .
3535	Write a chunk of data to a file .
3536	Copy an object from source to target .
3537	Run a command .
3538	Validates that the given format is valid .
3539	Format a list of objects for pretty printing .
3540	List S3 buckets .
3541	Create a new S3 bucket
3542	Put files to S3 .
3543	Get files from S3 .
3544	Copies S3 files .
3545	Sync files to S3
3546	Copy files to S3 .
3547	Move files from S3 to S3
3548	Delete files from S3 .
3549	Return the size of the S3 bucket .
3550	Handles a total size request .
3551	Return a tuple of the date and value of the given value .
3552	Return a tuple of the time and value of the given value .
3553	Return the delta and value from a string .
3554	Check if a dict value is valid .
3555	Discover gateways configured at Xiaomi .
3556	Create and start the Multicast Socket .
3557	Get data from Hub .
3558	Push data to the list of callbacks
3559	Return the key for this token .
3560	Handles an exception .
3561	Includes pyramid . rollbar in pyramid . rollbar .
3562	Ensure that log . handlers is a StreamHandler .
3563	Return a request object from the call stack .
3564	Initializes the Rollbar instance .
3565	Decorator to wrap a function .
3566	Report a message to Rollbar .
3567	Search items by title .
3568	Create the agent log file .
3569	Builds person data from request object .
3570	Add custom data to AWS Lambda context data .
3571	Add request data for Rollbar payload .
3572	Check if the last frames locals are in the project s root .
3573	Build request data from request .
3574	Build server data from environment variables .
3575	Builds a payload from a dictionary .
3576	Start the server .
3577	Compose chosung and jongsung .
3578	Decomposes a Hangul letter .
3579	Checks if the target string is Hangul .
3580	Attach a jong to a word .
3581	Return True if node is inside an Except handler .
3582	Return True if node is inside a Lambda function .
3583	Return all elements of a node .
3584	Return True if node can be clobbered in except .
3585	Return True if node is a super node .
3586	Return True if node is an error node .
3587	Return True if node is a default argument .
3588	Return True if node is a function decorator .
3589	Return True if the given node is an ancestor of the given name .
3590	Return the parent of the given node .
3591	Decorator to store a list of messages .
3592	Return a list of string fields for the given format string .
3593	Return the first argument from a call node .
3594	Return True if node is a standard exception .
3595	Return True if an exception is of the given type .
3596	Return True if node is decorated with property .
3597	Return True if func is decorated with qnames .
3598	Finds a TryExcept wrapper for the given node .
3599	Return True if node is a try - except block .
3600	Return a list of exception handlers for the given node .
3601	Return True if node ignores an exception .
3602	Check if a class is abstract .
3603	Return the inferred node or None if no node is found .
3604	Return the type of the given node .
3605	Return True if node is a singledispatch function .
3606	Return True if postponed evaluation is enabled .
3607	Return a list of qualified names for the given module .
3608	Return the name of the import node .
3609	Return a string representation of the tree structure .
3610	Create a new import graph .
3611	Recursively visit an import node .
3612	Recursively visit a ImportFrom node .
3613	Check that node is the first non - import instruction .
3614	Record import information for node .
3615	Check if import order is correct .
3616	Check that importedmodnode is a relative import .
3617	Add imported module to self . _module_pkg
3618	Check deprecated module .
3619	Check the preferred module for the given mod path .
3620	Represents the external dependencies .
3621	Return a dictionary of all importers that are inside the given package .
3622	Return a list of default options .
3623	Insert default options into sys . argv .
3624	Show the attribute of a node .
3625	Get the callbacks for a node .
3626	Recursively visit a node .
3627	Check consistency of messages .
3628	Recursively visit a Call node .
3629	Check that the given node is a datetime . time instance .
3630	Check that the node is open mode .
3631	Handles a message .
3632	Displays the messages .
3633	Get the title of a node .
3634	Set default options .
3635	Return True if show_builtin is True .
3636	Adds a class to the document .
3637	Return all ancestors of node .
3638	Return all instances that are associated with the given klass node .
3639	Extracts all the classes associated with klass_node .
3640	Return the package and class diagram for this node .
3641	visit a ImportFrom node by adding it to the package diagram
3642	Create a ClassDiagram for the given klass .
3643	Returns a list of Diadef objects for the given project .
3644	Checks if the given owner is ignored .
3645	Return a list of names that are similar to the given attribute .
3646	Return True if node is not a member of owner .
3647	Return True if node has a parent of node_type .
3648	Return True if name is used as a variadic name .
3649	Return True if node has no context variadics .
3650	Recursively visit an attribute node .
3651	Recursively visit assignment nodes .
3652	Check if the call is not callable .
3653	visit a UnaryOperation node by returning a new instance of it
3654	Yields the list of interfaces for the given node .
3655	Build a project from a list of files .
3656	Visit all sub - elements of node .
3657	visit a FunctionDefinition node
3658	Recursively visit a AssignName node .
3659	Handles assignattr types .
3660	Recursively visit import nodes .
3661	Visit import from node .
3662	Return 1 if mod_path is a standard module .
3663	Recursively import a module .
3664	Return ANSI code .
3665	Colorize a string with ANSI escape sequences .
3666	Register the linter with the linter .
3667	Handles a message .
3668	Display a layout .
3669	Handles a message .
3670	Open a graph .
3671	Write a node .
3672	Write an edge between two nodes .
3673	Checks that the node is a format node .
3674	Process a non - escaped string token .
3675	Visit a section .
3676	Visit the evaluation section .
3677	Visit a table .
3678	Write a default table .
3679	Adds a renamed message .
3680	Register all messages from a checker .
3681	Register a message .
3682	Checks that a message belongs to the given symbol .
3683	Raise InvalidMessageError if symbol and other_symbol are not unique .
3684	Raise an InvalidMessageError if there is a duplicate msgid and other_msgid .
3685	Return a list of message definitions for the given message id or symbol .
3686	Return a string representation of a message .
3687	Print help for a list of messages .
3688	List all messages .
3689	Initializes the builder .
3690	Return the number of CPUs .
3691	Reports the messages stats .
3692	Context manager to fix import paths .
3693	Loads dynamic plugin modules .
3694	Load plugin configuration .
3695	Set an option .
3696	Register a checker .
3697	Disable all reporters .
3698	Enable Python 3 porting mode .
3699	Return a list of checkers that are not self .
3700	Return a list of all checkers .
3701	Return a list of checkers that are enabled .
3702	Expands the given list of modules .
3703	Sets the current module .
3704	Checks the given astroid module .
3705	Report the evaluation of the code .
3706	Help message .
3707	Callback to print full documentation .
3708	Called when a list of messages is received .
3709	List all check groups .
3710	Normalize text to 80 characters .
3711	Return the module and frameid of the given node .
3712	Safely decodes a string .
3713	Check if base_name is in blacklist_list_re
3714	Register all plugins in the given directory .
3715	Return a comment from a string .
3716	Format an option value .
3717	Format a section of a config file .
3718	Format an INI file .
3719	Insert a child at the given index .
3720	Append a child node to this node .
3721	Returns a list of parents of this node .
3722	Sets the layout to the given stream .
3723	Return the content of a table .
3724	Compute the content of the given layout .
3725	Collects the block lines for the given module .
3726	Handles an ignored message .
3727	Register a report .
3728	Create the report sections .
3729	Add stats to self . stats .
3730	Return the setter property name for the given node .
3731	Returns a setter property for the given node .
3732	Return True if the return node is a Return node .
3733	Return a list of possible exception types for the given node .
3734	Processes a module .
3735	Processes the given module .
3736	Processes a list of tokens .
3737	Return True if the given import statement is a future import .
3738	Return True if the given statement is a For else branch .
3739	Return the overridden method for the given name .
3740	Return a string describing the extra info for the given node .
3741	Return the global scope for the given frame .
3742	Return True if name_node is a AssignName node .
3743	Mark a node as consumed .
3744	Recursively visit the global variable .
3745	Return True if node is a class scope .
3746	Return True if node has a homonym function scope at index .
3747	Check that the given node is a tuple or list .
3748	Checks the metaclasses of the given node .
3749	Return a list of all packages in a directory .
3750	Install package .
3751	Runs the setup . py script .
3752	Reports the differences between two stats .
3753	Runs the hdi command .
3754	Append stream to self . linesets .
3755	Return a list of simulations .
3756	Displays a list of simulations .
3757	Find common lines between two linesets .
3758	Iterate over the linesets .
3759	Iterate over the lines that have been stripped .
3760	Create a dictionary of the index for each line .
3761	Return True if the given definition and call are the same .
3762	Check that node_a and node_b have the same attribute .
3763	Return True if two parameters have the same default value .
3764	Return True if the two methods have the same parameters .
3765	Safely infer a call result from a node .
3766	Set the node as accessed .
3767	Recursively visit a class definition node .
3768	Check that the node has consistent mro .
3769	Check that the given node is a subclass of the given base class .
3770	Recursively visit a functiondef node .
3771	Checks that the function is a subclass of Super .
3772	Mark node as a function .
3773	Check if the node is a slots node .
3774	visit a Name node
3775	Checks the accessed members of the given node .
3776	Checks that the class is abstract .
3777	Checks the signature of two methods .
3778	Return True if node is a method parameter .
3779	Check if the given body is raising an exception .
3780	Check for bad exception context .
3781	Recursively visit a functiondef node .
3782	Displays the reports in the layout .
3783	Check if node is a subclass of typing . NamedTuple .
3784	Return True if node is an enum class .
3785	Return True if node is a dataclass .
3786	Open the linter .
3787	visit a ClassDefinition node by returning a fresh instance of it
3788	Mark the given node as a class definition .
3789	Recursively visit an If node .
3790	Check that the condition is a boolean expression .
3791	Check that docstring is spelled .
3792	Return a copy of the object as a dictionary .
3793	Return True if the token at index is a comma separated list of tokens .
3794	Return True if node is an actual elif node .
3795	Check if node can be simplified .
3796	Raise StopIteration if node is not a generator .
3797	Checks that the exception is a subclass of StopIteration .
3798	Raise StopIteration StopIteration StopIteration StopIteration StopIteration StopIteration StopIteration StopIteration StopIteration StopIteration StopIteration StopIteration StopIteration StopIteration StopIteration StopIteration StopIteration StopIteration StopIteration StopIteration StopIteration StopIteration StopIteration StopIteration StopIteration StopIteration StopIteration StopIteration StopIteration StopIteration StopIteration StopIteration StopIteration StopIteration StopIteration StopIteration .
3799	Checks that the node is a nested block .
3800	Return a dictionary of duplicated isinstance types for the given node .
3801	Check to see if the node should be considered merging isinstance .
3802	Check that node is a chained comparison .
3803	Return True if node is and or else False .
3804	Check that the return statements are consistent .
3805	Return True if node ends with a return statement .
3806	Recursively visit a For loop node .
3807	Check that Graphviz is installed .
3808	Runs the diadef command .
3809	Writes all the packages in the given diagram .
3810	Writes all the objects in the given diagram .
3811	Set the default printer .
3812	Sets up the graph for printing .
3813	Check if the system may be emitted .
3814	Format the help message .
3815	Return a dictionary of environment variables .
3816	Lints a file .
3817	Run a Python script .
3818	Return a list of all cycles for a given vertice .
3819	Return the source code .
3820	Generates the graph from the source file .
3821	Format section and options .
3822	Registers a message with the given msgid .
3823	Disable a message .
3824	Enable a message .
3825	Return a list of message symbols for a message .
3826	Check if a message is enabled .
3827	Add a single message .
3828	Print full documentation of global options and switches .
3829	Print checker documentation .
3830	Return the indent length of the given line .
3831	Return an indent hint line for a list of bar positions .
3832	Indent the token at index .
3833	Handles a line start .
3834	Return the valid indentations for the given index .
3835	Hanging Indent after a bracket .
3836	Return a _ContinuedIndent for the given bracket and position .
3837	Push a token at the given position .
3838	Create a new line from a list of tokens
3839	Check if any of the parentheses are valid .
3840	Check if the token is a valid type annotation .
3841	Checks that the i - th token is not empty .
3842	Checks that the token i is surrounded by a space .
3843	Recursively visit a default statement node .
3844	Check that multiple statements are on the same line .
3845	Check that the given list of lines is valid .
3846	Check the indent level of the given string .
3847	Return True if the node is in an iterator .
3848	Return True if node is a conditional import .
3849	Recursively visit a name node .
3850	Recursively visit a subscript node .
3851	Recursively visit an attribute node .
3852	Recursively visit an Except handler node .
3853	Recursively visit a Raise exception node .
3854	Find the pylintrc file .
3855	Validate a value .
3856	Expand the default value for the given option .
3857	Check if opt is a valid long option .
3858	Register a options provider .
3859	Set provider option .
3860	Set a global option .
3861	Generates the config for each provider .
3862	Load the config file .
3863	Load command line configuration .
3864	Add a help section to the command line parser .
3865	Generates a help string for this command .
3866	Load default options .
3867	Return the attribute name of an option .
3868	Return the option definition for the given option .
3869	Return a list of options grouped by section .
3870	Check if a function is a method call .
3871	Check if node is a complex format string .
3872	Visit the logging module .
3873	visit a ImportFrom node by returning a fresh instance of it
3874	Recursively visit import nodes .
3875	Recursively visit a Call node .
3876	Check if format_string is a string .
3877	Return True if node is a For loop .
3878	Return the parent of a BreakLoop node .
3879	Return True if any of the loop exisits .
3880	Returns a list of property classes and a list of property names .
3881	Determine the function name type for a function node .
3882	Report the total number of documented and badname nodes .
3883	Return True if node is redefined by a decorator .
3884	Return True if there is exactly one argument in a call .
3885	Recursively visit starred nodes .
3886	Check that node is a nonlocal and global variable .
3887	Recursively visit a Call node .
3888	Check if there is an else statement on the loop node .
3889	Check if node is in loop .
3890	Open the linter .
3891	Recursively visit an expression node .
3892	Recursively visit a Lambda node .
3893	Assert node .
3894	visit a Dict node by returning a list of keys
3895	Check that node is unreachable .
3896	Check if node is not an in - finally block .
3897	Check that node is a reversed sequence .
3898	visit a AssignName node by returning a fresh instance of it
3899	Check that the given name is valid for the given node .
3900	Check that the node has a docstring .
3901	Checks that the literal is equal to the literal node .
3902	Parse a sub - graph .
3903	Parse a sub - graph .
3904	Traverses the given node and returns a warning if the node is too complex .
3905	Adds a checker to this node .
3906	Recursively walks the given astroid .
3907	Add a relationship between two objects .
3908	Returns a relationship for the given relation type .
3909	Return a list of all attributes of a node .
3910	Return a list of all methods in node .
3911	Add an object to the graph .
3912	Return a list of class names for the given nodes .
3913	Return a list of ClassDef objects .
3914	Return the class with the given name .
3915	Return a list of all imported modules .
3916	Return the module with the given name .
3917	Return the module with the given name .
3918	Add node to the depend list .
3919	Delete the grant .
3920	Return the query for this model .
3921	Get user by username and password .
3922	Get access token or refresh token .
3923	Set a token .
3924	Set a grant .
3925	Get information about a client .
3926	Prepare request .
3927	Initializes the extension .
3928	Create a new OAuthRemoteApp with the given name .
3929	Make a request to the given URL .
3930	Authorize request token .
3931	Handles an OAuth 1 . 0 response .
3932	Handles an OAuth 2 access token response .
3933	Handles the response to the request .
3934	Deprecated in favor of authorized_response
3935	Hash a token for a given application .
3936	Create a client with the given token .
3937	Create an OAuth session .
3938	Context manager for setting up the insecure transport .
3939	Confirm authorization request .
3940	Decorator to create a request token .
3941	Get client secret .
3942	Get the request token secret for the given client key .
3943	Get access token secret .
3944	Return a list of default realms for a client .
3945	Return a list of realms for the given token .
3946	Gets the redirect uri for the given token .
3947	Return the RSA key for the given client key .
3948	Validate client key .
3949	Validate request token .
3950	Validate access token .
3951	Validate a timestamp and nonce .
3952	Validate that the redirect_uri is valid .
3953	Validate realms .
3954	Validate that a token is valid for the given client key .
3955	Verify request token .
3956	Verifies that realms is enabled .
3957	Saves an access token .
3958	Saves a request token .
3959	Saves a verifier for the given token .
3960	Return the error URI for this provider .
3961	Confirm authorization request .
3962	Verify request .
3963	Extract client credentials from request . Authorization header .
3964	Return True if the client is configured to require client authentication .
3965	Authenticate a client .
3966	Authenticate a client .
3967	Obtains the original scope of the refreshed token .
3968	Confirm scopes for a refresh token .
3969	Returns the default redirect_uri for the specified client .
3970	Returns a list of default scopes for a client .
3971	Invalidate an authorization code .
3972	Saves an authorization code for a client .
3973	Saves a bearer token .
3974	Validate a bearer token .
3975	Validate that client_id is valid .
3976	Validate code for a client .
3977	Validates that a grant type is allowed .
3978	Validate a refresh token .
3979	Validates that a response type is allowed .
3980	Validates a list of scopes .
3981	Validate a username and password .
3982	Revoke a token .
3983	Updates the request data for the current session .
3984	Convert keys to strings .
3985	Change the Authorization header to OAuth2 .
3986	Registers an OAuth application with the given name .
3987	Create a new OAuth application .
3988	Extract parameters from the request .
3989	Convert text to bytes .
3990	Decode a base64 encoded string .
3991	Create a Response object from headers and body .
3992	Return a list of cached OAuth clients .
3993	Add a remote application .
3994	Add a remote application .
3995	Check that the certificate is valid .
3996	Check if the certificate is valid .
3997	Loads the private key callback .
3998	Check to see if the privatekey callback is incorrect .
3999	Check that load_privatekey is called with the wrong type of private key .
4000	Checks for Revoked Revoked Revoked Revoked Revoked Revoked Revoked Revoked Revoked Revoked Revoked Revoked Revoked Revoked Revoked Revoked Revoked Revoked Revoked Revoked Revoked Revoked Revoked Revoked Revoked Revoked Revoked Revoked Revoked Revoked Revoked Revoked Revoked Revoked Revoked Revoked Revoked Revoked Revoked Revoked Revoked
4001	Check if the certificate is revoked .
4002	Create an X . 50 certificate request .
4003	Create an X . 50 certificate .
4004	Decorator that raises an exception if the decorated function is not a function .
4005	Load the verify locations for the specified CA file and capath .
4006	Sets the callback for the default password .
4007	Use a certificate chain file .
4008	Use a certificate file .
4009	Use a certificate .
4010	Add an extra chain certificate to the trust chain .
4011	Use a private key file .
4012	Use a private key .
4013	Load a client CA file .
4014	Sets the depth of the SSL session .
4015	Load a temporary DH file .
4016	Sets the cipher list .
4017	Sets the client CAs list .
4018	Adds a certificate authority to the session .
4019	Set the TLSEXT_SERVERNAME callback .
4020	Set TLSEXT_USE_SRTP to True .
4021	Sets the next NPN select callback .
4022	Set the list of alpn protos .
4023	Sets the callback for the ALPN select .
4024	Set the OCSP callback .
4025	Set the OCSP server callback .
4026	Set the OCSP client callback .
4027	Sets the SSL context .
4028	Get the server name .
4029	Set the TLSEXT host name .
4030	Receive data from the socket .
4031	Receive data from the socket .
4032	Read one or more bytes from the socket .
4033	Renegotiate the connection .
4034	Shuts the SSL connection .
4035	Returns a list of cipher suites supported by this SSL session .
4036	Return a list of client certificates .
4037	Sets the shutdown mode of the SSL session .
4038	Return a random string from the server .
4039	Return a random string for the client .
4040	Return the master key of the session .
4041	Export a keying material .
4042	Return an SSL session .
4043	Get the name of the current SSL cipher .
4044	Returns the number of cipher bits for the current SSL session .
4045	Get the version of the cipher used to authenticate the SSL session .
4046	Return the protocol version name of the underlying SSL session .
4047	Return the next non - negotiated message .
4048	Set the list of alpn protos .
4049	Gets the ALPN protocol negotiated data .
4050	Create a new memory buffer .
4051	Convert a bio to a string .
4052	Set an ASN1_TIME string .
4053	Converts a timestamp to an ASN1_TIME .
4054	Get an elptic curve by name .
4055	Dump a public key to a string .
4056	Load a public key .
4057	Sign data with a private key .
4058	Verifies that the given data and digest are valid .
4059	Dump a certificate CRL to a string .
4060	Convert the private key to a cryptography key .
4061	Generate a new RSA key .
4062	Check if the key is valid .
4063	Load elptic curves from lib .
4064	Load elptic curves from lib .
4065	Converts the curve name to an EC key .
4066	Return the certificate as a string .
4067	Returns a list of components for this certificate name .
4068	Get the short name of the certificate .
4069	Return the data for this extension .
4070	Convert to a cryptography . hazmat . backends . openssl . x509 . CertificateSigningRequest .
4071	Set the private key for this certificate .
4072	Get the public key for this certificate .
4073	Return a new X509Name for this request .
4074	Add extensions to the certificate request .
4075	Returns a list of all extensions for this certificate .
4076	Verify that the certificate is valid for the given PKey .
4077	Convert to a cryptography . hazmat . backends . openssl . x509 . Certificate .
4078	Set the certificate version .
4079	Gets the public key associated with this certificate .
4080	Set the private key for this certificate .
4081	Signs the certificate with the given private key .
4082	Return the signature algorithm for this certificate .
4083	Return the digest of the certificate with the given name .
4084	Set the serial number of the certificate .
4085	Gets the serial number of the certificate .
4086	Set the time that the certificate was modified since the given time .
4087	Set the amount of time that the certificate was modified since the given time .
4088	Return True if the session has expired .
4089	Gets the issuer of the certificate .
4090	Sets the issuer of the certificate .
4091	Get the subject of the certificate .
4092	Sets the Subject of the certificate .
4093	Add extensions to the certificate .
4094	Return the extension at the specified index .
4095	Adds a certificate to the certificate store .
4096	Add a certificate crl to the certificate store .
4097	Set the time of the certificate .
4098	Initializes the certificate store .
4099	Returns an X509StoreContextError for the given context .
4100	Verify that the certificate is valid .
4101	Set the serial number of the certificate .
4102	Get the serial number of the certificate .
4103	Set the reason of the certificate .
4104	Get the reason of this certificate .
4105	Set the revocation date of the certificate .
4106	Converts the certificate revocation list to a cryptography . x509 . CertificateRevocationList .
4107	Return a tuple of the Revoked object .
4108	Gets the issuer of the certificate .
4109	Signs the certificate with the given digest .
4110	Export a certificate to a PEM file .
4111	Return the name of the type .
4112	Set the CA certificates .
4113	Export the certificate .
4114	Signs the key with the given digest .
4115	Verify that a key is valid .
4116	Return a base64 encoded SSL session key .
4117	Get the public key .
4118	Set the private key for this session .
4119	Create an exception from an error queue .
4120	Convert text to bytes and warn about deprecation .
4121	Return a function that prints a message to the terminal .
4122	Return a dictionary of service metadata .
4123	Return a generator of issues for each board .
4124	Return a list of annotations for a card .
4125	Get all the boards for the current user .
4126	Returns a list of lists for the given board .
4127	Get all cards for a list .
4128	Get comments for a card .
4129	Return the URL for the given path .
4130	Returns a list of objects for the given url .
4131	Converts a link field to a dictionary .
4132	Get all issues for a query .
4133	Return a list of pull requests for a given tag .
4134	Aggregate issues for each target .
4135	Return the value of the given key from the main config .
4136	Return a dictionary of templates for this task .
4137	Validate that the config is valid .
4138	Return True if the issue should be included .
4139	Make a table from a list of grids .
4140	Execute a command and return the result as a string .
4141	Return an integer value for the given section and option .
4142	Pulls all the issues for the given flavor .
4143	Get data for given url .
4144	Get all data for a collection .
4145	Find the local UUID for the given keys .
4146	Merge values from remote task to local task .
4147	Builds CUDA config overrides for the given targets .
4148	Parse a sprint string into a dictionary .
4149	Returns a list of credentials for the given target .
4150	Given a list of sequences and a list of scores return a list of the n - grams that overlap with each other .
4151	Calculate the p - values for each gene in the query .
4152	FDRC correction .
4153	Compute the Z - score of a 2D array .
4154	Plots a heatmap of the given dataframe .
4155	Adjusts spines on the given axes
4156	Prepare command line options for Gene Set Enrichment Analysis .
4157	Adds the prerank command to subparsers .
4158	Adds a plot parser to subparsers .
4159	Add command line options for Enrichr API .
4160	Compute the enrichment score for each element of a 1D array .
4161	Compute the ranking metric for each gene .
4162	Calculate the ranking metric for the given method .
4163	Compute the P - value of a GSEA distribution .
4164	Compute the significance of the enrichment scores .
4165	Return list of mart names and descriptions .
4166	Return a pandas dataframe of all datasets for the given mart .
4167	Returns a DataFrame of the attributes of the given dataset .
4168	Returns a DataFrame of Filter objects for the given dataset .
4169	Query the Biomart database .
4170	Runs GSEA on the data .
4171	Runs the SGSEA model .
4172	Runs a GSEA prerank model .
4173	Runs the Replot algorithm .
4174	Set the number of cores .
4175	Load genesets from a list of genesets
4176	Return a list of libraries for the given database .
4177	Download and Generate Enrichment library .
4178	Set the heatmat for each class .
4179	Save results to file .
4180	Load data from file .
4181	Runs GSEA analysis .
4182	Runs GSEA analysis .
4183	Runs each sample .
4184	Runs SGSEA for each sample .
4185	Saves the enrichment scores to a csv file .
4186	Parse GSEA files .
4187	Run Enrichr on a list of genes .
4188	Parse enrichr gene sets into a list of dictionaries .
4189	Parse the gene list into a list of genelists .
4190	Send a list of genes to the server .
4191	Return the number of genes that have been recognized by Enrichr
4192	Return a list of all background genes .
4193	Run Enrichr on the input file .
4194	Create a cube .
4195	Create a sphere .
4196	Create a torus filter .
4197	Deform left side and right side edges of a plane .
4198	Sides cube hires .
4199	Return the color values for a given color name .
4200	Check that the variable is a list of num_terms .
4201	Make a list of the given variable .
4202	Writes the filter XML to the script .
4203	Subdivision Surfaces LS3 Loop .
4204	Merge Close Vertices .
4205	Close Holes .
4206	Split Vertes Incident on Non Manifold faces .
4207	Snaps mismatched borders .
4208	Translates the given script with the given value .
4209	Rotation function .
4210	Scale a script to a given number of axes .
4211	Return the function for a cylinder script .
4212	Wrap to a cylinder .
4213	Create a bend function for a script .
4214	Convert a script to a curve .
4215	Converts an RichTex script to an XML script .
4216	Convert a mesh to a face mesh .
4217	Uniform Mesh Resampling .
4218	Screened Poisson Surface Reconstruction .
4219	Return the voronoi of the given script .
4220	Select all faces and Vertices .
4221	Select by Vertex Quality .
4222	Set the function of the face selection .
4223	Sets the function of the vertex selection .
4224	Return a cylindrical vert function .
4225	Calculate spherical vert function .
4226	Joins the given script with the given parameters .
4227	Rename a script to a new label .
4228	Change the current layer .
4229	Duplicate current layer .
4230	Delete the script from the current layer .
4231	Handles an error .
4232	Create a temporary 3D filter script .
4233	Adds a layer to the stack .
4234	Removes a layer from the layer stack .
4235	Save filters to file .
4236	Run a script .
4237	Calculates the radius of the star .
4238	Calculate Hausdorff Distance .
4239	Generate a Poisson disk .
4240	Create a mesh element for the given element .
4241	Clustered Vertex Subsampling .
4242	Create a flat plane filter .
4243	Per - triangle filter .
4244	Create a Voronoi Atlas script .
4245	Compute Topological Measures from a FilterScript .
4246	Parse a BETA topology from a log file .
4247	Parse the hausdorff log file .
4248	Convert a script to a function .
4249	Voronoi Vertex Coloring Filter .
4250	Cyclic rainbow .
4251	Return an angle between x and y .
4252	Cross product of two vectors .
4253	Multiply v1 by scalar .
4254	Define New Per Vertex Attribute .
4255	Flip faces invert faces .
4256	Compute normals for point sets .
4257	Taubin Smooth model .
4258	Depth Smoothing .
4259	Create a list of polylinesorts from a file .
4260	Measure the topology of the model .
4261	Measures all geometries and Bounding Results for a given file .
4262	Measure dimension .
4263	Lower case the extension of a filename .
4264	Patch the application s request class .
4265	Return the configuration for the given upload set .
4266	Register blueprints for upload sets .
4267	Return the configuration for this upload set .
4268	Return the URL for the uploaded file .
4269	Return a path to a file .
4270	Check if extension is allowed .
4271	Resolves conflicts between target_folder and basename .
4272	Return version info from a vprof file .
4273	Remove duplicates from a list of objects .
4274	Returns the difference between two objects .
4275	Return a list of objects for each object type and name .
4276	Trace the memory usage of the given frame .
4277	Return a list of code events that have been processed .
4278	Return the number of objects in this module .
4279	Compute the memory overhead of the process .
4280	Return a profile of the run object .
4281	Return a profile module for the run object .
4282	Return a profile function for this module .
4283	Runs the profiler and returns a dictionary of the result .
4284	Returns a list of module names for the given package .
4285	Run a function in separate process .
4286	Return the type of a run object .
4287	Initializes the module for the given run object .
4288	Initializes the package .
4289	Initializes the function to run_object .
4290	Replace sys . argv with _run_args .
4291	Sample from the given frame .
4292	Inserts the stack into the call tree .
4293	Fill the sample count of the given node .
4294	Return a dictionary representation of a tree .
4295	Return a dictionary representation of the call tree .
4296	Return a dictionary containing a profile of the run object .
4297	Return a dictionary of the profile module .
4298	Returns a dictionary containing a profile of the function .
4299	Transform a Profiler . Stats object to a list of dictionaries .
4300	Return a dictionary of the profile for this object .
4301	Return a dictionary of the profile module .
4302	Return a dictionary of the profile function .
4303	Initializes the database .
4304	Show the guestbook .
4305	Add a new entry .
4306	Show guestbook and add entry .
4307	Starts an HTTP server .
4308	Handles the root page .
4309	Return the content of the other file .
4310	Send GET request to the server .
4311	Perform a POST request .
4312	Send a response to the server .
4313	Checks whether the given path is a standard Python directory .
4314	Record a line .
4315	Yield lines without stdlib .
4316	Fills the heatmap for each module .
4317	Return a list of skip lines in src_code .
4318	Return a dictionary of the profile of the run .
4319	Format a heatmap from a file .
4320	Return a dictionary of the profile module .
4321	Profile function .
4322	Runs all the profilers for the given run object .
4323	Run a function on the remote host .
4324	Predicted class labels for each sample .
4325	Return the log - probability of each element in X .
4326	Fit the model to the given data .
4327	Counts the number of documents in the corpus .
4328	Sort features according to the given vocabulary .
4329	Limit features based on document frequencies and vocabulary .
4330	Fit the model according to the model s vocabulary .
4331	Applies the vocabulary analysis to the matrix Z .
4332	Return a copy of this StandardScaler .
4333	Fit the model with the given Z .
4334	Apply the predict method to X .
4335	Fit a linear regression model .
4336	Fit the model to the given data .
4337	Fit the model to the given data .
4338	Return the score of the last step of the model .
4339	Fit the model for each parameter_iterable .
4340	Return the score of the test set .
4341	Fit the KMeans model to the given data .
4342	Return an ArrayRDD for each element in X .
4343	Predicted SGD Classifier .
4344	Check whether the given RDD is of the given dtype .
4345	Create vocabulary for each feature .
4346	Compute the mean and variance of the data .
4347	Fit the model to the given data .
4348	Return a new SparkTruncatedSVD .
4349	Yield a block of data from an iterator .
4350	Yields each element of iterator as a tuple .
4351	Return a block of elements from an RDD .
4352	Apply a function to each element of the RDD .
4353	Return the shape of the array .
4354	Return a numpy array of all elements of the RDD .
4355	Apply a function to each column in the DataFrame .
4356	Return True if the given permission is set to True .
4357	Return True if path is not a root write .
4358	Check if the configuration file is correct .
4359	Read config from file .
4360	Run a command as a command .
4361	Executes a command and returns stdout and stderr .
4362	Execute a command over SSH .
4363	Validate that the config file is valid .
4364	Returns a dictionary of the headers of the request .
4365	Return the JSON body of the request .
4366	Return the URL for this HomeAssistant .
4367	Return the URL for this webhook .
4368	Return a text representation of a BAN device .
4369	Print a discovery packet .
4370	Discover all devices .
4371	Executes the device .
4372	Send a confirmation to the device .
4373	Called when a push message is received .
4374	Executes the given device .
4375	Runs on_push method .
4376	Converts an OfxTransaction to an OfxTransaction .
4377	Return the path to the Ledger file .
4378	Install development packages .
4379	Get long description from README . md file .
4380	Create a PrecalculatedTextMeasurer from a JSON file .
4381	Return a PrecalculatedTextMeasurer for this package .
4382	Create a badge .
4383	Return a list of supported characters .
4384	Given a list of characters and a list of encodings return a list of encoded characters .
4385	Calculate character to length mapping .
4386	Writes a text measurer to a JSON file .
4387	Convolve 2D Gaussian kernel .
4388	Return the 1D Gaussian kernel .
4389	Converts an image to grayscale .
4390	Compares an image with a list of images .
4391	Return the value of the SSIM .
4392	Compute SSIM between two images .
4393	Destroy the process .
4394	Set the code version .
4395	Gets the status of this node .
4396	Print the current status .
4397	Return the connection to the given connection .
4398	Try to bind to the server .
4399	Called when a new connection is received .
4400	Called when a message is received .
4401	Helper function to send a command to the server .
4402	Check if node should be allowed to connect to this node .
4403	Connect to a single node .
4404	Called when an outgoing connection is established .
4405	Called when an outgoing message is received .
4406	Called when a connection is closed .
4407	Add a node to the connection pool .
4408	Removes a node from the connection pool .
4409	Send a message to a node .
4410	Destroy all connections .
4411	Put an item into the queue .
4412	Put an item into the heap .
4413	Get a single element from the heap .
4414	Attempts to acquire a lock .
4415	Checks if the lock is acquired .
4416	Release a lock .
4417	Decorator to check the result of a function .
4418	Return the token required to access the view .
4419	Sets the connection parameters for the given hosts .
4420	Create Elasticsearch indexes for the given names .
4421	Migrate the indexes of the aggregate indexes and forensic indexes .
4422	Removes metadata from report .
4423	Save aggregate reports to Kafka .
4424	Extract XML data from a file .
4425	Parse an aggregate report file .
4426	Converts a list of Forensic reports to a CSV file .
4427	Parse a report file .
4428	Returns a list of capabilities for the given server .
4429	Save results to output directory .
4430	Create a zip of the report .
4431	Send an email report to a list of recipients .
4432	Save aggregate reports to Splunk .
4433	Save forensic reports to Splunk .
4434	Decode base64 encoded data .
4435	Download the latest PSL for the given domain .
4436	Returns the reverse DNS record for the given IP address .
4437	Convert a human timestamp to a datetime object .
4438	Download GeoLite2 Country database from MaxMind .
4439	Get information about an IP address .
4440	Converts an Outlook MSG file .
4441	Convert a string to a list .
4442	Parse a report file .
4443	Drain the connection .
4444	Publish a message to the server .
4445	Publish a message to the server .
4446	Publish a message .
4447	Subscribe to a topic asynchronously .
4448	Unsubscribe from this connection .
4449	Flushes the connection to the server .
4450	Select next server to connect to .
4451	Process an error message .
4452	Process an error .
4453	Create a command to connect to the server .
4454	Process a Pong request .
4455	Process a message .
4456	Processes info from the server pool .
4457	Process a CONNECT init message .
4458	Flush all pending data .
4459	Read loop .
4460	Calculate the coactivation of a dataset .
4461	Decode a list of images .
4462	Load features from a numpy array .
4463	Load features from list of images .
4464	Calculate the Pearson correlation .
4465	Compute the dot product of the feature images .
4466	Select features based on feature_select
4467	Returns a list of studies that activate for each mask file .
4468	Given a dataset and a list of features return the feature order .
4469	Classify data based on a list of masks .
4470	Classify data and return a Classifier object .
4471	Fit the classifier to the given data .
4472	Set the class_weight of the classifier .
4473	Performs cross validation on the data .
4474	Fit the model on the given dataset
4475	Calculate the average of images within a list of regions .
4476	Get random voxels from the dataset .
4477	Returns a list of the top words for each feature .
4478	Pearson correlation .
4479	Computes the FDR of a probability distribution .
4480	Load activation data from file .
4481	Create the image table .
4482	Returns a list of studies for the given features and expression .
4483	Add features to the feature table .
4484	Returns a list of feature names for the given features .
4485	Returns a dictionary of feature counts for the given threshold .
4486	Load a dataset from a file .
4487	Save feature table to a file .
4488	Get the image data for each study or voxel .
4489	Get feature data .
4490	Returns a list of ordered names for the given features .
4491	Return a list of feature ids for the given features .
4492	Returns a list of features that match the search string .
4493	Returns a list of unique identifiers for the given expression .
4494	Convert the SDF to a sparse matrix .
4495	Decorator to mark a function as deprecated .
4496	Transform matrix foci to matrix mat
4497	Convert a 2D array to a 2D matrix .
4498	Apply a transformation to a foci .
4499	Mask an image .
4500	Get the mask of the current volume .
4501	Load images from a list of files .
4502	Save Nifti1Image to file .
4503	Set the logging level .
4504	Expand an address .
4505	Return a list of normalized tokens for the given string .
4506	Parse an address .
4507	Similar to near_dupe_hashes .
4508	Convert a dictionary to a Python object .
4509	Get ticker price for a given ticker .
4510	Returns a pandas dataframe for the given tickers .
4511	Get all news for a file .
4512	Make a request to the server .
4513	Get bearer information .
4514	Make a request to the Bearer API .
4515	Get all tracks for the given spotify_id .
4516	Get details about an artist .
4517	Get all albums for a given spotify .
4518	Get top tracks for an artist .
4519	Get related artists for a given spotify .
4520	Get a list of artists for a list of IDs .
4521	Get information about a category .
4522	Get a list of playlists for the given category .
4523	Get a list of categories .
4524	Get a list of featured playlists .
4525	Get a list of new releases .
4526	Get recommendations for the given seed .
4527	Get a list of artists or users that are following the given artist .
4528	Get a list of albums for this artist .
4529	Get a list of all albums for this artist .
4530	Get the total number of albums for this artist .
4531	Get a list of all artists related to this artist .
4532	Get the currently playing track .
4533	Gets the current player .
4534	Return a list of all available devices .
4535	Return a list of recently played tracks .
4536	Replace one or more tracks in a playlist .
4537	Reorder all tracks in a playlist .
4538	Create a new playlist .
4539	Get a list of all playlists for this user .
4540	Get a list of all tracks for this album .
4541	Get a list of all tracks for a market .
4542	Return an OAuth2 URL for the given scope and state .
4543	Get an album for a given spotify id .
4544	Get a single artist .
4545	Return a Track object for the given spotify_id .
4546	Get a User object for a given spotify id .
4547	Get a list of albums for a list of IDs .
4548	Return a list of artist objects for the given ids .
4549	Search for a list of types .
4550	Converts a string to an identifier .
4551	Raise a Spotify exception if the decorated function has no attribute .
4552	Create an instance from a client .
4553	Generates an OAuth2 URL for the given client .
4554	Return a dict of the attributes for this client .
4555	Return a string representation of the query parameters .
4556	Build a list of PlaylistTrack objects .
4557	Get all tracks for this playlist .
4558	Resumes playback of a device .
4559	Transfer a player to a device .
4560	Create a Spotify object from the href attribute .
4561	Get the current test data .
4562	Convert month to shorten month .
4563	Updates the code URLs for the PyFunceble project .
4564	Checks if the current version is greater than the older one .
4565	Checks if the current branch is a development version .
4566	Checks whether the version is deprecated or not .
4567	Create a backup of the data we have to restore .
4568	Restores the current state of the system .
4569	Check if a line is to be ignored .
4570	Return a list of domain names from a list of options .
4571	Extract the base from the given element .
4572	Format a list of lines to be decoded .
4573	Return the status code of the request .
4574	Return a list of valid http status codes .
4575	Check if the given domain is valid .
4576	Check whether the given domain is a subdomain of the given domain .
4577	Check if the given IP is valid .
4578	Checks if the given IP is a valid IPv4 range .
4579	Check if the given URL is valid .
4580	Load the configuration .
4581	Keeps your experience on Twitter and GitHub
4582	Download a file from an entry management URL .
4583	Download the entry management URL .
4584	Print the header .
4585	Return True if the file_to_test is valid .
4586	Run the file decision logic for the given domain .
4587	Runs the file decision logic for the given URL .
4588	Return a list of colors for the logo .
4589	Format a domain .
4590	Extracts the domain from the given file .
4591	Return a file representation of the list to test .
4592	Return a list of URLs to test .
4593	Switch the state of the given variable into the given configuration .
4594	Get the expiration date .
4595	Return the parsed status .
4596	Get the structure file from the master branch .
4597	Create the given directory .
4598	Delete uneeded directories .
4599	Sets the path to the default configuration file .
4600	Load the configuration file .
4601	Download link to the production configuration file .
4602	Install the iana configuration file .
4603	Download the PSL configuration file .
4604	Create a directory structure file .
4605	Merge values from upstream config .
4606	Load the configuration file .
4607	Split a version string into parts and non - digits parts .
4608	Checks the versions of the local and upstream versions .
4609	Check if the current version is a cloned version .
4610	Handles a non - existant index .
4611	Return the path to the output directory for the host file .
4612	Return the unified file .
4613	Return the status file .
4614	Return True if we should not produce a file .
4615	Parse the extension line into the database .
4616	Load the public database from a JSON file .
4617	Replace special characters with their replacements .
4618	Converts an element to a hierarchical structure .
4619	Load the IANA database .
4620	Return the referer for the given extension .
4621	Yields the extension and referer from the iana page .
4622	Update the contents of the iana - domains database .
4623	Mine the site .
4624	Retrieve the mining information from the backup file .
4625	Backup mined informations .
4626	Add an element to the mined database .
4627	Removes the element from the mined database .
4628	Return a list of mined files .
4629	Processes the mining logic .
4630	Return the content of a file
4631	Writes content to file .
4632	Return the whois for the given record .
4633	Return the expiration date for the current session .
4634	This method is called when the referer is not found .
4635	Initializes the before header information .
4636	Constructs the header data for the given data_to_print .
4637	Print the header of the file .
4638	Construct a dictionary of the data to print .
4639	Return the size of the result from the header .
4640	Colorize data according to the template .
4641	Return a JSON representation of the output file .
4642	Return the data to print .
4643	Saves the contents of the file to disk .
4644	Calculate the time difference between start and end time .
4645	Return a string representation of the execution time between start and end .
4646	Return a list of files to delete .
4647	Return a list of databases to delete .
4648	Delete all databases in the current directory .
4649	Return the hash of the file .
4650	Hash the data with the given algorithm .
4651	Return a dictionary containing the hash of the given data .
4652	Execute the command .
4653	Removes a key from the dictionnary .
4654	Rename a key in the main dictionnary .
4655	Merge two dictionaries into a single dictionary .
4656	Write the current dictionnary to a json file .
4657	Save the current dictionnary into a yaml file .
4658	Fix the path of the directory .
4659	Writes data to the file .
4660	Read the contents of the file .
4661	Return a list of the main objects .
4662	Merge a list of dictionaries into a list of dictionaries .
4663	Return a list of items that do not match the regex .
4664	Return a list of data objects that match the regex .
4665	Return a list of substrings that match the regex .
4666	Increase the number of up and down status .
4667	Calculates the percentage counter of the current status .
4668	Print the percentage of each output file .
4669	Check whether the given url is valid .
4670	Check if the given domain is valid .
4671	Check whether this element is a subdomain of the given domain .
4672	Return a syntax status for the given test type .
4673	Return a dictionary of the contents of the historical formating error .
4674	Retrieve the database from the inactive database file .
4675	Backup the database .
4676	Return the timestamp of the database .
4677	Return the content of the database .
4678	Return True if the database subsystem is present .
4679	Retrieve the whois database .
4680	Backup the current state of the datbase .
4681	Check if the given file path is in the database .
4682	Return True if expiration date is older than the current epoch .
4683	Gets the expiration date for this element .
4684	Add the expiration date to the database .
4685	Set up permissions for Travis .
4686	Runs the Travis build .
4687	Return a list of NS lookups for the given domain or IP .
4688	Connect to whois server .
4689	Initiate the list of active and inactive status codes .
4690	Return the referer for the current extension .
4691	Return the currently bound object .
4692	Return a generator of paths to the standard Python libraries .
4693	Return a list of standard package names .
4694	Yields the line numbers of unused import messages .
4695	Extracts unused import module names from a list of messages .
4696	Yields the line numbers of imported imports .
4697	Yields import star import usage undefined names .
4698	Yields the line numbers of unused variables .
4699	Yield line numbers for duplicate keys .
4700	Create a dictionary from a list of messages .
4701	Return a list of error messages for the given source .
4702	Extract a package name from a line .
4703	Return True if line is a multiline import statement .
4704	Return True if line is a multiline statement .
4705	Filter imports from a given import statement .
4706	Break up imports .
4707	Filter code .
4708	Returns a dictionary of messages keyed by line number .
4709	Filter star imports .
4710	Filter duplicate key .
4711	Check if a dictionary entry has the given key .
4712	Return True if value is a literal or name .
4713	Yields line numbers of useless pass lines .
4714	Filter out useless lines from source .
4715	Return the indent of the given line .
4716	Return the ending of a line .
4717	Fix code from source .
4718	Split a comma separated string into a list of strings .
4719	Return True if filename is a Python file .
4720	Check if filename is excluded from exclusion list .
4721	Given a list of filenames and a list of directories return a list of files that match the given criteria .
4722	Main entry point for autoflake .
4723	Reads this ObtainLeaseResponsePayload from the input stream .
4724	Write this ObtainLeaseResponsePayload to the output stream .
4725	Write this CancelRequestPayload to the output stream .
4726	Reads this CancelResponsePayload from the input stream .
4727	Create a new Name .
4728	Reads this Digest from the given stream .
4729	Write this Digest to an output stream .
4730	Create a new Digest .
4731	Reads this ApplicationSpecificInformation from the given stream .
4732	Write this application specific information to an output stream .
4733	Create a new ApplicationSpecificInformation .
4734	Reads DerivationParameters from the specified stream .
4735	Writes the DerivationParameters to the output stream .
4736	Reads this GetRequestPayload from the input stream .
4737	Write this GetRequestPayload to an output stream .
4738	Reads the GetResponsePayload from the input stream .
4739	Write this GetResponsePayload to the output stream .
4740	Reads this SignatureVerifyRequestPayload from the input stream .
4741	Write this KMIP object to an output stream .
4742	Reads the SignatureVerifyResponsePayload from the input stream .
4743	Processes a request .
4744	Builds an error response .
4745	Processes a template attribute .
4746	Returns a list of Attribute objects associated with the managed object .
4747	Gets an attribute from a managed object .
4748	Set attributes on managed object .
4749	Sets the attribute on the managed object .
4750	Checks if an operation is allowed for the given policy .
4751	Write this DecryptRequestPayload to an output stream .
4752	Create a secret .
4753	Sets the value for the given setting .
4754	Loads the server configuration from a file .
4755	Converts a value to a binary bitmask .
4756	Return a list of CryptographicUsageMask objects corresponding to the given value .
4757	Reads a LongInteger from the given stream .
4758	Write this LongInteger to the file - like object .
4759	Validate that the value is a valid long integer .
4760	Reads the value from the stream .
4761	Writes the value to the stream .
4762	Validates that the value is a valid integer type .
4763	Validate that the enumeration value is valid .
4764	Read a boolean value from the stream .
4765	Writes a boolean value to file - like object ostream .
4766	Writes this Boolean to the given ostream .
4767	Validate that the value is a boolean .
4768	Reads the Interval value from the given stream .
4769	Validates that the interval value is valid .
4770	Return a dictionary of key wrapping data .
4771	Set the key wrapping data .
4772	Validate that the key value is valid .
4773	Validate that the secret value is valid .
4774	Validate that the data type is valid .
4775	Converts an attribute name to a tag .
4776	Converts an attribute tag to a name .
4777	Converts a list of enumerations to a list of bitmasks .
4778	Returns a list of Enumerations that match the given mask .
4779	Return True if the given enumeration is a bitmask of the given potential_mask .
4780	Reads the CreateKeyPairRequestPayload from the input stream .
4781	Write this key to an output buffer .
4782	Reads the CreateKeyPairResponsePayload from the input stream .
4783	Writes this CreateKeyPair to the output buffer .
4784	Reads this GetAttributeListRequestPayload from the input stream .
4785	Write this GetAttributeListRequestPayload to the output buffer .
4786	Reads the GetAttributeListResponsePayload from the input stream .
4787	Write this VendorIdentificationList to an output stream .
4788	Returns a list of json files in the directory p .
4789	Scans all the policies in the policy directory .
4790	Start up the operation policy file monitor .
4791	Return a X . 50 certificate from a connection .
4792	Returns the extended key usage for the given certificate .
4793	Returns a list of common names in a certificate .
4794	Returns a client identifier from a certificate .
4795	Reads the CreateRequestPayload from the input stream .
4796	Writes the object to the output buffer .
4797	Reads the CreateResponsePayload from the input stream .
4798	Write this CreateResponsePayload to the output buffer .
4799	Converts an object to a key .
4800	Reads the EncryptResponsePayload from the input stream .
4801	Reads the DeriveKeyRequestPayload from the input stream .
4802	Writes this DeriveKey to the output buffer .
4803	Checks if attribute is supported by this rule set .
4804	Checks if an attribute is deprecated .
4805	Check if attribute is applicable to object type .
4806	Checks if an attribute is multivalued .
4807	Return a valid value from a configuration file .
4808	Reads the CheckResponsePayload from the input stream .
4809	Write this CheckResponsePayload to the output stream .
4810	Reads this AttributeReference from the specified input stream .
4811	Write this AttributeReference to the output buffer .
4812	Reads the Attributes object from the input stream .
4813	Write this Attributes object to an output stream .
4814	Reads this Nonce from the input stream .
4815	Write this Nonce to the output stream .
4816	Reads this UsernamePasswordCredential from the input stream .
4817	Write this UsernamePasswordCredential to an output stream .
4818	Reads this DeviceCredential from the specified stream .
4819	Write this Device to an output stream .
4820	Reads this Credential from the specified stream .
4821	Write this credential to the output stream .
4822	Reads this MACSignatureKeyInformation from the specified stream .
4823	Write this MACSignatureKeyInformation to an output stream .
4824	Reads this KeyWrappingData from the input stream .
4825	Write this key to an output stream .
4826	Reads the KeyWrapping Specification from the input stream .
4827	Write this KeyWrappingSpecification to an output stream .
4828	Reads this ExtensionInformation from the given stream .
4829	Write this extension information to an output stream .
4830	Create a new extension information .
4831	Reads this RevocationReason from the specified stream .
4832	Write this RevocationReason to an output stream .
4833	Validate that the revocation code and message are valid .
4834	Reads this object from the input stream .
4835	Write this object to the output buffer .
4836	Reads the DefaultsInformation from the input stream .
4837	Writes the DefaultsInformation structure to the output buffer .
4838	Reads the RNGParameters from the input stream .
4839	Writes the RNGParameters structure to the output buffer .
4840	Reads this ProfileInformation from the specified stream .
4841	Write this ProfileInformation structure to the output buffer .
4842	Write this ValidationInformation structure to the output buffer .
4843	Reads this CapabilityInformation from the specified stream .
4844	Write this CapabilityInformation to an output buffer .
4845	Stops all open connection threads .
4846	Starts a connection service .
4847	Reads this LocateRequestPayload from the input stream .
4848	Writes this object to the output buffer .
4849	Reads this LocateResponsePayload from the input stream .
4850	Write this LocateResponsePayload to output_buffer .
4851	Create a new symmetric key .
4852	Create an asymmetric key pair .
4853	Generate a HMAC based message authentication code .
4854	Encrypts the data using the specified encryption algorithm .
4855	Encrypts a symmetric key using the specified encryption algorithm .
4856	Encrypts the data using the specified encryption algorithm .
4857	Decrypts the data asymmetric .
4858	Create an RSA key pair .
4859	Derive a key .
4860	Create a RSA private key from bytes .
4861	Verifies that a signature is valid .
4862	Reads the SignResponsePayload from the input stream .
4863	Write this SignResponsePayload to the output stream .
4864	Reads this GetUsageAllocationRequestPayload from the input stream .
4865	Converts a ProtocolVersion to a KMIPVersion .
4866	Reads this ProtocolVersion from the input stream .
4867	Write this ProtocolVersion to the output stream .
4868	Reads authentication data from input stream .
4869	Write this authentication to an output stream .
4870	Reads this PollRequestPayload from the input stream .
4871	Reads this Certificate from the given stream .
4872	Write this certificate to an output stream .
4873	Authenticate with the SLUGS API .
4874	Reads this ArchiveResponsePayload from the input stream .
4875	Write this ArchiveResponsePayload to an output stream .
4876	Starts and closes the session .
4877	Reads the RekeyResponsePayload from the input stream .
4878	Checks whether the given conformance clause is supported for the given authentication suite .
4879	Derive Key request .
4880	Get attributes for a batch item .
4881	Returns a list of attribute values for the given attribute id .
4882	Perform a query .
4883	Signs data with the given data .
4884	Open the client connection .
4885	Close the client connection .
4886	Create a new CryptographicAlgorithm or CryptographicUsageMask .
4887	Create a new key pair .
4888	Registers a managed object .
4889	Rekey an attribute .
4890	Derive a key .
4891	Search for managed objects .
4892	Checks for the specified usage limit and lease time .
4893	Gets a KmipObject .
4894	Gets a list of attributes for a managed object .
4895	Activate a managed object .
4896	Revokes a managed object .
4897	Sends a MAC request to the Kmip API .
4898	Builds a CryptographicParameters from a dictionary .
4899	Builds an EncryptionKeyInformation object from a dictionary .
4900	Builds a MAC signature key information from a dictionary .
4901	Builds a KeyWrappingSpecification from a dictionary .
4902	Builds the common attributes for the given operation policy .
4903	Builds a list of attribute names for the given name .
4904	Reads the QueryRequestPayload from the input stream .
4905	Write this QueryRequestPayload to output_buffer .
4906	Write this object to an output stream .
4907	Reads the GetAttributesResponsePayload from the input stream .
4908	Write this GetAttributesResponsePayload to the output buffer .
4909	Get a single entry point .
4910	Returns a dictionary of named entries in a group .
4911	Return a list of EntryPoints for the given group .
4912	Load the object from the given module .
4913	Create an Entry from a string .
4914	Live development server .
4915	Generate project files .
4916	Generates the controller file from the given arguments .
4917	Generates the action from the given arguments .
4918	Generate a form from a dictionary .
4919	Generate a model from a dictionary .
4920	Generate a new macro .
4921	Create a directory at path .
4922	Rewrite and copy src_file to dst_file .
4923	Return the time since the given value .
4924	Check if the URL is valid .
4925	Return a string representation of something .
4926	Decode something to a Python object .
4927	Decorator to return a JSON response from a function .
4928	Returns an absolute URL for the given endpoint .
4929	Load configuration from environment variable .
4930	Signin a user .
4931	Get the current user .
4932	Create a Flask application .
4933	Registers Jinja2 templates .
4934	Register routes for the given application .
4935	Register 404 and 500 error handlers .
4936	Register hooks for the application .
4937	Convert a pandas dataframe to a CSV file .
4938	Create a pandas dataframe from a CSV file .
4939	Serializes the given dataframe to the given writer .
4940	Deserialize a pandas . DataFrame to a data type .
4941	Updates this data type from a dataframe .
4942	Updates this data type from raw data .
4943	The URL of the contents of this download .
4944	Add a dataframe to a data type .
4945	Add a new data type to a raw data type .
4946	Open the intermediate dataset .
4947	Reads the intermediate dataset contents as a binary stream .
4948	Reads the intermediate dataset contents as text .
4949	Convert data to a pandas dataframe .
4950	Returns an IntermediateDataset for the given node and port .
4951	Get experiments for the given workspace .
4952	Get datasets for a workspace .
4953	Get a dataset .
4954	Publish a function to a workspace .
4955	Publish a function to a URL .
4956	Decorator to add annotations to a function .
4957	Decorator to mark a function as returning a return value .
4958	Attach an attachment to a function .
4959	Return a list of all the globals of the given code .
4960	Return a copy of this pen .
4961	Look up the color for the given color .
4962	Draw this region to a rectangle .
4963	Cubic Bernstein Extrema .
4964	Cubic Bernstein interpolation .
4965	Builds a list of choices for this template .
4966	Return a list of options from a list of command options .
4967	Registers a function with two or three arguments .
4968	Create a dynamic tree for the given application .
4969	Initializes the tree .
4970	Empty the site .
4971	Get a single entry from the cache .
4972	Updates an entry s value with the given key .
4973	Set the value of an entry .
4974	Initializes the cache .
4975	Resolves an I18N tree alias .
4976	Check if current application is admin .
4977	Calculates the depth of an item .
4978	Get the current item for the given tree alias .
4979	Return the URL for the given site tree item .
4980	Initializes the site tree .
4981	Get attribute of current page .
4982	Gets the ancestor of the current item .
4983	Create a menu from a list of branches .
4984	Checks if the user has access to the item .
4985	Return a list of breadcrumbs of the current item .
4986	Create a tree for the given alias .
4987	Render the children of the given parent item .
4988	Gets the children of the given item .
4989	Update the has_children attribute of the tree item .
4990	Filter items by navigation type .
4991	Gets the ancestor item for the given base item .
4992	Climber a tree .
4993	Resolve a variable .
4994	Create a Sitetree tree from a Sitetree token .
4995	Return a child node for the given token .
4996	Create a sitetree_breadcrumbs node for the given parser .
4997	Create a Sitetree menu .
4998	Render a list of tree items .
4999	Return a Template instance for the given tag .
5000	Return the URL for the given model .
5001	Unregisters the model tree admin .
5002	Handles redirects .
5003	Redirect the user to the item list .
5004	Redirect to the item s detail .
5005	Handles the response change request .
5006	Adds the parent field to the form .
5007	Gets the tree for the given item .
5008	Move an item to another tree .
5009	Saves the item s parent .
5010	Return a list of urls for the tree admin .
5011	Dump a view to a response .
5012	Create a tree object for the given alias .
5013	Create a new tree item .
5014	Import the app s sitetree module .
5015	Return the model class for the given settings entry .
5016	Create a Config object from a mapping .
5017	Create a Config object from a Python file .
5018	Create a Config object from a TOML file .
5019	Create a Config instance from a Python object .
5020	Create a ZipkinAttrs object for a given span .
5021	Create HTTP headers for a new span .
5022	Return the current context for this trace .
5023	Start the inner logging context .
5024	Stops the logging context .
5025	Update the binary annotations for this span .
5026	Add an S binary annotation to this span .
5027	Override the span name .
5028	Create an Endpoint .
5029	Copy an Endpoint to a new service name .
5030	Build a new _V1Span .
5031	Encode a list of spans into a protobuf .
5032	Create a protobuf span .
5033	Convert hex_id to bytes .
5034	Returns a protobuf for the given kind .
5035	Convert an endpoint to a zipkin_pb2 . Endpoint .
5036	Converts a dictionary of annotations to a list of protobufs .
5037	Create an annotation .
5038	Create a binary annotation .
5039	Create an Endpoint object .
5040	Copy an endpoint to a new service name .
5041	Build a list of annotations for a given host .
5042	Build a list of binary annotation objects .
5043	Create a new span .
5044	Converts a Span to a byte string .
5045	Encode a list of binary thrift objects into a byte string .
5046	Detect the span version and encoding of a message .
5047	Converts a list of Span objects to a list of Span objects .
5048	Push zipkin attributes to the stack .
5049	Converts a v2 span to a binary span .
5050	Create a JSON endpoint for the given endpoint .
5051	Encode a span .
5052	Decode a list of spans .
5053	Converts an Endpoint to a Thrift Endpoint .
5054	Decode a list of thrift annotations .
5055	Converts a list of thrift binary binary binary annotations into a dictionary .
5056	Decode a Span to a Span .
5057	Converts a trace id to a string .
5058	Convert unsigned long to lowercase hex .
5059	Writes a 32 - bit value to the data at the given position .
5060	Fixup pre processor .
5061	Sets the transaction code for a bank .
5062	Sets the iph_id for a bank .
5063	Sets the TNR for a bank .
5064	Parse data into a dictionary .
5065	Parse a file into a list of Transactions .
5066	Joins a string into a list of lines .
5067	Parse response as JSON or text .
5068	Retry until we have a ratelimit quota .
5069	Make a request to the API .
5070	Get information about a bot .
5071	Get a list of bots .
5072	Read data from the stream .
5073	Write a message to the output file .
5074	Close the input file and output file .
5075	Decodes a string according to RFC 3339 .
5076	Encode a term .
5077	Add an IP address to the multicast interface .
5078	Sends all pending messages .
5079	Sets the remote service hello callback .
5080	Stops the server .
5081	Clears all local services .
5082	Search for the given types and scopes .
5083	Create a SOAP message from an Environment .
5084	Discovers the given scope and loglevel .
5085	Returns the tagged item manager .
5086	Return a list of all child relations for the given model .
5087	Returns a list of all child m2m relations for the given model .
5088	Save the model to the database .
5089	Create a model from a dictionary of serialized data .
5090	Validates that all the unique fields in the form are unique .
5091	Return True if any of the child forms have changed .
5092	Return a new address with a valid checksum .
5093	Generate a new address checksum .
5094	Parse command line arguments .
5095	Create an argument parser for PyOTA .
5096	Prompts the user for a seed .
5097	Validate signature fragments .
5098	Get the private key at the given index .
5099	Gets the key for the given address .
5100	Create a KeyIterator with the given start and step values .
5101	Create a sponge for the given index .
5102	Return the absorb of the given list of trits .
5103	Squeeze a list of trits from the internal state .
5104	Return a copy of self . _state .
5105	Gets the digests for the given index and count .
5106	Get private keys .
5107	Prepares a multisig transfer .
5108	Adds two sequences together .
5109	Convert an integer to a list of integers .
5110	Add two integers .
5111	Full Add Traits .
5112	Output the seed to the terminal .
5113	Finds all transactions for the given bundles and addresses .
5114	Get inputs command .
5115	Gets the list of new addresses .
5116	Gets the amount of transfers between start and stop .
5117	Promote a transaction .
5118	Replay bundle .
5119	Send Transfer Command .
5120	Sends a list of trytes .
5121	Resolves the adapter for the given URI .
5122	Send a request to the server .
5123	Log a message at the specified level .
5124	Sends an HTTP request to the server .
5125	Interpret response from node .
5126	Seed the response for the given command .
5127	Add a digest to this address .
5128	Return a new MultisigAddress .
5129	Create an iterator for the given start and step values .
5130	Converts a Digest object to an address .
5131	Generate an address for the given key_iterator .
5132	Return a list of Transaction objects for the given adapter .
5133	Yields all the addresses that have already been used .
5134	Gets a list of bundles from a list of transaction hashes .
5135	Checks if the given codec is supported by trytes .
5136	Get codec information .
5137	Encode a byte string into a binary string .
5138	Decode a byte string .
5139	Return a list of Address objects for the given seed and index .
5140	Adds a route .
5141	Create a Transaction instance from a transaction tryte string .
5142	Return a JSON - serializable representation of this transaction .
5143	Return signature validation trytes .
5144	Sets the is_confirmed flag for this transaction .
5145	Return a list of message fragments for each transaction .
5146	Converts the transaction to a list of tryte strings .
5147	Return a list of transactions grouped by address .
5148	Return a dictionary of command classes for the given package .
5149	Execute a request .
5150	Apply a filter to a value .
5151	Return the URL for a job .
5152	Return a list of error messages .
5153	Checks if the bundle is valid .
5154	Create a validator for each transaction in the bundle .
5155	Return a list of error messages for the bundle .
5156	Gets the error message for a group .
5157	Traverse a bundle .
5158	Start IOTA API client .
5159	Return a random seed .
5160	Get the digest of the key .
5161	Signs the inputs for the given bundle .
5162	Return a pretty representation of this object .
5163	Return the absorb of the given list of trits .
5164	Squeeze a list of hashes .
5165	Adds a context to an exception .
5166	Return the security level .
5167	Increments the legacy tag .
5168	Return the tag of this transaction .
5169	Adds a transaction to the bundle .
5170	Finalizes the bundle .
5171	Sign inputs in - place .
5172	Sign inputs at the given index .
5173	Create the input transactions for the given addy .
5174	Convert a value to a standard unit .
5175	Decomposition between G1 and G1Uncompressed .
5176	Inverse prime field .
5177	Create an instance from a JSON file .
5178	Return a list of groups for each word in the text .
5179	Finds the synonym for the given word .
5180	Expand the abbreviations in the given text .
5181	Split a description into parts .
5182	Return a list of the categories of this object .
5183	Return a random colour .
5184	Plots the decoration .
5185	Create a LEGND instance for the given name .
5186	Return a TimeScale instance for the given name .
5187	Return a random set of components .
5188	Create a Decor object from an image file .
5189	Create a Decor object from a CSV file .
5190	Convert to a comma - separated list of components .
5191	Return the maximum width of the table .
5192	Return a Decor object for the given component .
5193	Return the attribute of the decorated class .
5194	Get the component for each colour in the legend .
5195	Plots the model .
5196	Create a component from a text string .
5197	Return a string representation of the component .
5198	Return a Rock instance .
5199	Processes a row from a text string .
5200	Parse a Canstrat string into a dictionary .
5201	Return True if all elements are equal to 0 .
5202	Return a list of unique values .
5203	Return a list of Interval objects from a list of Tops .
5204	Cleans longitudes of data .
5205	Create an Interval object from a petrel file .
5206	Build a list of intervals from a dictionary .
5207	Create a Striplog instance from a CSV file .
5208	Create an Image object from an image file .
5209	Create a StripLog object from a log .
5210	Create a LAS instance from a string .
5211	Create an Interval object from a Canstrat file .
5212	Return a copy of this Striplog .
5213	Convert a StripLog to a CSV file .
5214	Convert to Lithology section .
5215	Plot an axis .
5216	Get the data associated with the given field .
5217	Extract data from the basis .
5218	Find all components that match the search term .
5219	Find incongruities that overlap with the given index .
5220	Find incongruities that are not incongruities
5221	Return a copy of this StripLog with only the elements with thickness less than the given threshold .
5222	Return anneal strip .
5223	Return a copy of this interval with the gaps removed .
5224	Return a new StripLog with the union of the two StrLog objects .
5225	Return a new StripLog containing the intersection of the two Striplogs .
5226	Merge all overlapping segments .
5227	Plot a histogram of the data .
5228	Inverts the Striplog .
5229	Return a copy of this Striplog with the given extent .
5230	Return a list of tests that match the given alias .
5231	Convert a hexx to a name .
5232	Create a loglike from an image file .
5233	Return a field for the given field name .
5234	Returns a list of jobs for the given prefix .
5235	Parse a job HCL .
5236	Updates a token .
5237	Returns a list of allocations for the given prefix .
5238	Fail a deployment .
5239	Pauses a deployment .
5240	Ensures that the deployment allocation is healthy .
5241	Drain a node .
5242	Drain a node with a given drain spec .
5243	Create an eligible node .
5244	Returns a list of files for the given path .
5245	Stream data from a stream .
5246	Get information about a file .
5247	Joins one or more agents .
5248	Updates a list of servers .
5249	Force leave a node .
5250	Returns a list of all nodes for the given prefix .
5251	Returns a list of Evaluations for the given prefix .
5252	Returns a list of namespaces for the given prefix .
5253	Register a job .
5254	Plan a job .
5255	Dispatch a job .
5256	Reverts a job .
5257	Revert a job to a stable version .
5258	Deregister a job .
5259	Get the configuration for the draft .
5260	Delete a peer .
5261	Get a list of deployments for a prefix .
5262	Return a random value for the given object type .
5263	Return a mutator for the given object .
5264	Get a string polyglot attack for the given object .
5265	Fuzzy the given object .
5266	Return a safe string from a list of unicode strings .
5267	Starts the server .
5268	Stops the server .
5269	Custom HTML file .
5270	Serve the request to the server .
5271	Fuzzy the given object .
5272	Spawn a new process .
5273	Get the output of the process .
5274	Wait for the process to finish .
5275	Close the PJFExecutor .
5276	Starts the fuzzer .
5277	Execute external fuzzing method .
5278	Decodes a dictionary to JSON .
5279	Return a random string .
5280	Build a list of statements for this scope .
5281	Return a string representation of the query .
5282	Return a random value .
5283	Return a new Opt instance .
5284	Return a list of values for this ref .
5285	Return a new STAR instance .
5286	Shutdown the PJF process .
5287	Runs and monitors the process .
5288	Start the pjf process .
5289	Return a random float between a and b .
5290	Add a new definition for a given category .
5291	Add a category to a category group .
5292	Generate a list of gramfuzz rules .
5293	Fuzzy all elements in an element .
5294	Return the fuzzed URL .
5295	Returns a list of elements that have been fuzzed .
5296	Decorator to mutate an object .
5297	Send a SIGTERM to the child process .
5298	Quit the command .
5299	Pauses the process .
5300	Resumes the command .
5301	Stops the process .
5302	Restarts the process .
5303	Returns a list of all events for this user .
5304	Sets the user s mood .
5305	Sets the avatar for this user .
5306	Get meta data for a URL .
5307	Create a new contact .
5308	Create a new user profile .
5309	Get a list of all bot agents .
5310	Get information about a bot .
5311	Search Skype API .
5312	Return a list of SkypeRequest objects for this user .
5313	Create an instance from a dictionary .
5314	Merge attributes from other into self .
5315	Merge an object into the cache .
5316	Perform a sync state call .
5317	Read token from token file .
5318	Write token to file .
5319	Verify that the token is valid .
5320	Refresh the skype token .
5321	Gets the current user s profile .
5322	Gets a new skype token .
5323	Syncs all endpoints for the current user .
5324	Checks if a user is allowed to access Skype credentials .
5325	Authorizes a token .
5326	Authenticate with Skype .
5327	Configures the presence docs for this user .
5328	Ping this endpoint .
5329	Get a dictionary of all recent conversations for this user .
5330	Get a single or group chat .
5331	Create a new thread .
5332	Converts a URL to a user s identifier .
5333	Converts a URL to a chat id .
5334	Exhaust a function .
5335	Convert text to unicode .
5336	Return the appropriate handler for the given text .
5337	Parse text into metadata and content .
5338	Converts the object to a dictionary .
5339	Load a yaml file .
5340	Export metadata to a YAML string .
5341	Export metadata to JSON .
5342	Return a fullmatch .
5343	Return a list of items that match this query .
5344	Return a list of the sub - lists of the given item .
5345	Converts the start of the pattern to a new start .
5346	Returns a list of arguments for the given type .
5347	Returns a list of lists matching the given pattern .
5348	Plant trie from a list of strings .
5349	Return a regex pattern for the given trie .
5350	Raise IndexError if key is out of range .
5351	Insert string at index .
5352	Return the partition for the given character .
5353	Return a list of spans for the given type .
5354	Shrinks the number of spans between rmstart and rmstop .
5355	Updates the spans with the given index and length .
5356	Return the nesting level of the template or parser function .
5357	Return the shadow of this span .
5358	Return the shadow of the link .
5359	Return a dictionary of spans for each type .
5360	Deprecated method .
5361	Return a list of Parameter objects .
5362	Return a list of ParserFunction objects for each span .
5363	Return a list of Template objects .
5364	Returns a list of WikiLinks .
5365	Return a list of Comment objects .
5366	Return a list of external links .
5367	Return a list of Section objects .
5368	Return a list of Table objects .
5369	Return a list of WikiList objects corresponding to the given pattern .
5370	Return a list of Tag objects for the given name .
5371	Return a generator that yields sub - spans of the given type .
5372	Returns a list of all ancestors of the given type .
5373	Returns the parent of the given type .
5374	Return the mode of a list .
5375	Get an argument from a list of arguments .
5376	Return the name of the template .
5377	Removes the first occurrence of duplicate arguments .
5378	Removes duplicate arguments .
5379	Set an argument .
5380	Get the argument with the given name .
5381	Check if there is an argument with the given name and value .
5382	Delete the argument with the given name .
5383	Convert a CRS code to a string .
5384	Find an ellipsoid by name .
5385	Load a GeoJSON file from a URL .
5386	Create a GeoJSON object from a GeoJSON file
5387	Converts an EPSG code to a GDAL coordinate system .
5388	Converts an ESRI code to a CRS .
5389	Convert a SRS code to a CRS coordinate system .
5390	Convert a text string to a CRS coordinate system .
5391	Write header and record data to file object out .
5392	Read a RawVLR object from a data stream .
5393	Returns a list of GeoTiffKey objects from a list of VLRs .
5394	Parse a GeoTiffKey into a list of GeoTiffKey objects .
5395	Gets the signedness for the extra dimension .
5396	Gets the ID for an extra dimension type .
5397	Create a new point record from a point record .
5398	Copy fields from other_record to self .
5399	Append zeros to the array if the value is too small .
5400	Return a list of all dimension names .
5401	Create a new point array with zero values .
5402	Create a PointArray from a stream .
5403	Create a PointArray from a compressed buffer .
5404	The x - axis of the data .
5405	The y - axis of the data .
5406	The dimension of the Z coordinate .
5407	Add extra dimension .
5408	Writes the point record to out_stream .
5409	Write data to a file .
5410	Write data to destination .
5411	Converts a dictionary of point format dimensions to a dictionary of dtypes .
5412	Build a dictionary of point types from a dictionary of point formats and dimensions .
5413	Convert numpy dtype to point format .
5414	Returns the minimum file version for a point format .
5415	Checks if a point format is compatible with a file version .
5416	Returns a list of VLRs of the given type .
5417	Returns a list of VLRs for the given type .
5418	Read data from data stream .
5419	Return True if all las files have the same point format id .
5420	Return True if all las files have the same dtype .
5421	Raise an error if the file signature is not correct .
5422	Read a header from the stream .
5423	Reads VLRList objects from the stream .
5424	Read a PackedPointRecord from the file .
5425	Read the compressed points data .
5426	Read internal waveform packet .
5427	Reads the EVLRList from the stream .
5428	Warn if there are bytes between start_of and end_of .
5429	Open an LAS file from a file - like object .
5430	Read a file from a file - like object .
5431	Create a new LasData object from a PackedPointHeader .
5432	Create a LasData object for the given point format .
5433	Converts a source lattice to a point format .
5434	Merge multiple LAS files into a single LAS file
5435	Writes the contents of las to a file and returns the result .
5436	Return a datetime . date object representing the creation date .
5437	Sets the date to the given date object .
5438	Returns a 2D array of the x y and z values of the minimum vector .
5439	Sets x_min y_min and z_min to value
5440	Return the maximum of x y and z
5441	Set x y and z to maximum values .
5442	A 2D array of x y and z scales .
5443	Return the x y and z offsets of the mesh .
5444	Reads the file version from the given stream .
5445	Converts a header to a new version .
5446	Unpack a source array into a numpy array .
5447	Pack an array into a sub - field array .
5448	Return a list of dimension names that are not in out_dims .
5449	Return a dictionary of the sub - fields of the model .
5450	Return the number of extra bytes .
5451	Return True if this dataset has a WAVEFORM packet .
5452	Main entry point for satel_integra .
5453	Calculate the CRC of a command .
5454	Print hex data .
5455	Verify and strip the response from the server .
5456	Returns a list of all the set bits in r .
5457	Generates a query .
5458	Runs the Satel server .
5459	Connect to the server .
5460	Start monitoring .
5461	Send DISARM command .
5462	Clear the alarm .
5463	Set output code to output_id .
5464	Wait for the connection to be closed .
5465	Monitor the status of the device .
5466	Close the socket .
5467	Purge the database for this user .
5468	Guess the type of a file or directory .
5469	Return the file_id for the given path .
5470	Get a notebook from the database .
5471	Create a notebook model from a database record .
5472	Get a directory .
5473	Convert a list of file records to a list of file models
5474	Create a directory model from a directory record .
5475	Create a file model from a file record .
5476	Saves a notebook .
5477	Save a file to the database .
5478	Rename a file or directory .
5479	Delete a file or directory .
5480	Ensure that a user exists in the database .
5481	Purge a user from the database .
5482	Create a new directory .
5483	Check if a user is in a directory .
5484	Delete a directory .
5485	Check if a directory exists .
5486	Return a list of files in a directory .
5487	Return a list of directories in a given directory .
5488	Return a boolean indicating if a file is found in the database .
5489	Select a file for a given user .
5490	Return default fields for a file .
5491	Retrieve a file from the database .
5492	Get a file from the database .
5493	Get the file id for a file .
5494	Check if a file exists .
5495	Rename a directory .
5496	Save a file to the database .
5497	Generate a list of notebooks for the given engine .
5498	Purge remote checkpoints for a user .
5499	Generate a list of checkpoints for the given engine .
5500	Return a list of notebooks for the given table .
5501	Re - encrypts the content of a row .
5502	Re - encrypt files for a user .
5503	Derive a single fernet key .
5504	Derive keys from a list or tuple of keys .
5505	Return a Fernet encryption factory for a single password .
5506	Memoize a single argument .
5507	Return the name of a column_like .
5508	Convert a row to a dictionary with no content fields .
5509	Convert a row to a dictionary .
5510	Create a remote checkpoint for a notebook .
5511	Create a file checkpoint .
5512	Delete a checkpoint .
5513	Get the content of a checkpoint .
5514	Returns a list of all remote checkpoints for the given path .
5515	Rename all remote checkpoints .
5516	Delete all checkpoints for a given path .
5517	Purge all remote checkpoints for this user .
5518	Resolve a path to a sub - manager .
5519	Appends the given prefix to the given model .
5520	Decorator to dispatch a path to one of the managers .
5521	Decorator to dispatch a kwarg to one of the managers .
5522	Decorator to move files between old and new backends .
5523	Internal method to check if managers have changed .
5524	Returns a directory model for the given path .
5525	Normalize an API path .
5526	Splits an API path into the name and the name of the directory .
5527	Writes a base64 encoded notebook to a file .
5528	Reads a base64 encoded file .
5529	Decode unknown bytes to base64 .
5530	Create a new file from a base64 encoded string .
5531	Return a list of directories for the given path .
5532	Decorator to convert a path outside root to 404 .
5533	Create a PostgresCheckpoints user .
5534	Separate directories and files from a list of models .
5535	Iterate over a list of directories .
5536	Iterate over all files in a file manager .
5537	Walk a file manager and yield all files with content .
5538	Re - encrypts all users .
5539	Re - encrypt a single user .
5540	Unencrypts all users .
5541	Unencrypts a single user .
5542	Yields alembic . ini file .
5543	Upgrade an Alembic database .
5544	Sanitize block data .
5545	Queue an instance for the given embed type .
5546	Load a list of instances of the given embed type .
5547	Insert an instance into the block .
5548	Load data for each embed type .
5549	Validate data .
5550	Show the admin page .
5551	Convert the object to a dictionary .
5552	Hides all authenticated fields .
5553	Exclude fields from the query .
5554	Return the published version of the article .
5555	Return a queryset of publishable objects .
5556	Return a queryset of publishable objects .
5557	Return True if attribute is True else False .
5558	Validate that a widget is valid .
5559	Validate that the given zone is valid .
5560	Return True if id is a valid UUID .
5561	Return a list of permissions for this user .
5562	Modify permissions .
5563	Validates that the author data is a list of authors .
5564	Save this zone to the database .
5565	Returns a dictionary of the data associated with this model .
5566	Prepare data for each field .
5567	Render the template with the given data .
5568	Gets the settings for this integration .
5569	Return a list of pages belonging to authenticated user .
5570	Get the settings for the given integration .
5571	Updates the settings for an integration .
5572	Signup form .
5573	Create a multi - tag string from a list of contents .
5574	Render a zone .
5575	Save featured image .
5576	Save a subsection .
5577	Return the extension of the image .
5578	Return the medium url for this image .
5579	Saves image to disk .
5580	Saves a thumbnail of an image .
5581	Return the connection to the database .
5582	Get a BandwidthLimitedStream from a file - like object .
5583	Read amount bytes from the file .
5584	Consume amt for the given request token .
5585	Schedules a consumer for a given amount of time to consume .
5586	Process a scheduled consumer .
5587	Returns the Exponential Moving Average rate for the given amount .
5588	Record the consumption rate for the given amount .
5589	Download a file .
5590	Poll for the result of a transfer .
5591	Return a list of callbacks for the given callback type .
5592	Returns a copy of the original dict with only the keys in whitelisted_keys .
5593	Decrements the counter .
5594	This method is called when the context is closed .
5595	Return True if filename is a special file .
5596	Acquire the semaphore for the given tag .
5597	Release a semaphore .
5598	Adjusts the number of parts in the current_chunksize .
5599	Queues an io task for writing a file .
5600	Return an IOWriteTask for the given data and offset .
5601	Return the download output manager class .
5602	Main method for the S3 object .
5603	Write data to fileobj at offset .
5604	Request writes for the given offset and data .
5605	Return True if the given file - like object is seekable .
5606	Upload a file to S3 .
5607	Download a file from S3 .
5608	Copy a file or directory .
5609	Delete a submission .
5610	Shutdown the server .
5611	Cancel a transfer .
5612	Wait for the transfer coordinator to finish .
5613	Read data from a file - like object .
5614	Wrap data into a file - like object .
5615	Return the upload input manager .
5616	Sets the exception for this transfer .
5617	Sets the result of the query .
5618	Sets the exception to the given exception .
5619	Wait for the future to complete .
5620	Cancel the task .
5621	Submit a task to the given executor .
5622	Add a callback to be called when a function is completed .
5623	Adds a function as a failure cleanup .
5624	Mark the task as done .
5625	Submit a task to the underlying executor .
5626	Add a callback that will be invoked when the future is complete .
5627	Upload a file to S3 .
5628	Download a file from S3 .
5629	Iterate over all step functions .
5630	Return a string or list of strings from a decorator .
5631	Refactively refactors a step .
5632	Iterate over all step function decorators .
5633	Return a list of strings or a list of strings from a decorator .
5634	Refactively refactors a step .
5635	Select the appropriate parser based on environment variables .
5636	Fetches a list of team membership objects .
5637	Create a team membership object .
5638	Updates a team membership object .
5639	Delete an existing membership .
5640	Returns a dict of the fact of a CAT .
5641	Sends a POST request to the bot .
5642	Fetches a list of membership objects .
5643	Delete an existing membership .
5644	Validate that base_url is a valid URL .
5645	Check if a string is a web URL .
5646	Open a local file at the given path .
5647	Check that the given object is of one of the acceptable types .
5648	Create a dictionary from a list of dictionaries and a list of items .
5649	Check response code and raise exception if not expected .
5650	Convert json data to a dictionary .
5651	Create a new WebexTeamsDateTime object from a string .
5652	Get a list of rooms for a team .
5653	Create a new room .
5654	Updates an existing room .
5655	Delete a room .
5656	Fetches a list of license objects .
5657	Returns a WebexTeamsDateTime representing the created date .
5658	Gets the access token from environment variables .
5659	Create a new webhook .
5660	Update a webhook .
5661	Delete a webhook .
5662	Fix the next_url to be a valid Webex endpoint URL .
5663	Sets the wait_on_rate_limit flag .
5664	Updates the session s headers .
5665	Return the absolute URL of the given URL .
5666	Make an HTTP request to the API .
5667	Perform a GET request .
5668	Get all pages for a given URL .
5669	Get all items for a given URL .
5670	Perform an HTTP PUT request .
5671	Delete a resource .
5672	Create a new login .
5673	Fetches a list of messages in the specified room .
5674	Create a new message .
5675	Delete a message .
5676	Create a new person .
5677	Returns a person object for the given Id .
5678	Updates a person .
5679	Delete a person .
5680	Returns a person object for the authenticated user .
5681	Get a list of role objects .
5682	Get a list of team objects .
5683	Create a new team .
5684	Update an existing team .
5685	Delete a team .
5686	Fetches a list of events for the given resource and type .
5687	Return a tuple representing a dictionary or list of tuples .
5688	Get an access token .
5689	Returns a WebexTeamsDateTime representing the last activity of this team .
5690	Create a webhook object from a webhook POST request .
5691	Get NGROK public URL .
5692	Delete all Webhooks with the given name
5693	Create a new ngrok webhook .
5694	Create NGrok webhook .
5695	Create a new DSMR device .
5696	Read data from the serial port .
5697	Read data from the serial connection .
5698	Create a DSMR protocol .
5699	Create a DSMR reader .
5700	Create a TCP dsmr reader .
5701	Called when data is received .
5702	Called when a connection is closed .
5703	Handles a Telegram .
5704	Parse telegram data into a dictionary .
5705	Return the version of the given file .
5706	Ensure that sys . version_info is supported by Python .
5707	Find packages in subfolders .
5708	Create a command class based on package_data_spec and data_files_spec
5709	Return a command for a function .
5710	Run a command .
5711	Check for missing targets .
5712	Wraps a list of commands into a single command .
5713	Return a FileHandler for the given package and data files .
5714	Returns a list of data files for the given data_specs .
5715	Returns a list of files for the given root .
5716	Return a compiled regular expression for the given pattern .
5717	Yields a list of paths from a given path .
5718	Translates glob patterns .
5719	Joins a list of translated parts into a single string .
5720	Translates a glob part into a list of parts .
5721	Truncates all records in a table .
5722	Writes a table to the database .
5723	Writes the indexes for the given table .
5724	Write all the triggers for the given table .
5725	Writes all constraints for the given table .
5726	Writes contents of a table .
5727	Processes a row from a table .
5728	Writes indexes to the file .
5729	Write constraints to file .
5730	Writes the list of triggers to the file .
5731	Return the number of items in the queue .
5732	Enqueue data into the database .
5733	Starts a new task .
5734	Builds the extra_predicate for the query .
5735	Return a JSON - serializable representation of a datetime object .
5736	Reconnect to the database .
5737	Get a single row from the database .
5738	Get a connection to the database .
5739	Runs the benchmark .
5740	Connect to the pool .
5741	Look for a given error code .
5742	Return the number of connections and fairies .
5743	Handle connection failure .
5744	Create a simple query expression from a dictionary of fields .
5745	Update an existing table .
5746	Connect to the database .
5747	Set up the database connection .
5748	Destroy all tables in the database .
5749	Start a new step .
5750	Stops a single step .
5751	Load start and stop steps from a list of dictionaries .
5752	Disconnect from API .
5753	Reconnect to the server .
5754	Connect to the websocket server .
5755	Called when a message is received .
5756	Stops all timers .
5757	Send ping to API .
5758	Check to see if Pong is received .
5759	Send a payload to the API .
5760	Resubscribed softly .
5761	Handles a system message .
5762	Handles info messages .
5763	Handles error messages .
5764	Handles _data_handler method .
5765	Resubscribes all channels .
5766	Handles an authentication request .
5767	Handles conf data .
5768	Update the timestamp for a channel .
5769	Reset the connection to the server .
5770	Return the candles for the given pair .
5771	Set the bitfinex configuration .
5772	Subscribe to a ticker .
5773	Unsubscribe from a ticker .
5774	Subscribe to an order book .
5775	Unsubscribe from an order book .
5776	Subscribe to a raw order book .
5777	Unsubscribe from a raw order book .
5778	Subscribe to a list of trades .
5779	Unsubscribe from trades .
5780	Subscribe to candles .
5781	Unsubscribe from candles .
5782	Authenticate to the API .
5783	Cancel an order .
5784	Called when a command is received .
5785	Called when a device command is received .
5786	Called when a message notification is received .
5787	Create a new device type .
5788	Publish an event .
5789	Updates a device .
5790	Returns an IterableClientStatusList corresponding to the specified status and connectedAfter .
5791	List custom bundles .
5792	Create a new bundle .
5793	Updates a schema .
5794	Close the connection to the IBM Watson IoT Platform .
5795	Called when a connection is established .
5796	Subscribe to device events .
5797	Subscribe to device status .
5798	Subscribe to device commands .
5799	Publish a command .
5800	Called when an unsupported message is received .
5801	Called when a device event is received .
5802	Called when a device status message is received .
5803	Called when an app status message is received .
5804	Get a LastEvent object for the given device and event id .
5805	Returns a list of LastEvent objects for the given device .
5806	Make API call .
5807	Initiate a Mgmt Request .
5808	Gets the status of a single device .
5809	Close the index .
5810	Return the number of intersecting coordinates .
5811	Get the nearest neighbors for a list of coordinates .
5812	Get the bounds of the index .
5813	Deletes the data at the given coordinates .
5814	Create a new index from a stream of data .
5815	Load the contents of the page as a byte string .
5816	Delete an object from the index .
5817	Raise RTreeError if the return value is not 0 .
5818	Load the application .
5819	Initializes the Flask - Common extension .
5820	Runs the development server .
5821	Converts value to a build_versatileimagefield_url_set
5822	Crop the image to the centerpoint .
5823	Process image and save it to file .
5824	Converts an image to a byte array .
5825	Process image and save it to file .
5826	Convert data to a VersatileImageFormField instance .
5827	Processes the placeholder image .
5828	Pre - save method .
5829	Update the PPO field .
5830	Saves the data to the form .
5831	Override the default formfield for the VersatileImageField .
5832	Converts a value to a string .
5833	Attempt to autodiscover the django . contrib . sizedimage and django . contrib . _filter modules .
5834	Unregisters a SizedImage subclass .
5835	Unregisters a FilteredImage subclass .
5836	Return the URL for this image .
5837	Builds the filters and sizers for this image .
5838	Gets the root folder of the image field .
5839	Gets the root folder of the image .
5840	Returns a path to the root folder of the image field .
5841	Delete all files that match the given regex .
5842	Preprocess image according to image_format .
5843	Preprocess a GIF image .
5844	Preprocess JPEG images .
5845	Retrieve an image from a file .
5846	Saves an image to disk .
5847	Return a string representation of the ppoi .
5848	Create a resized image .
5849	Render a file input to a string .
5850	Adds the widget to the context .
5851	Build a dictionary of attributes from base_attrs and extra_attrs .
5852	Returns a path for a resized image .
5853	Gets the path to be used for filtering .
5854	Validates a list of size key sets .
5855	Returns the url for the given image key .
5856	Return a list of Rendition Key Sets for the given key .
5857	Format an instruction to a string .
5858	Format a function body .
5859	Decode a list of bytecode .
5860	Decode a module .
5861	Decorator to mark a function deprecated .
5862	Connect to the server .
5863	Close the connection .
5864	Read the result from the server .
5865	Handle a FastAGI request .
5866	Parse an agi result line into a dict .
5867	Check response for agi code .
5868	Resets all generator instances .
5869	Return a list of instances .
5870	Return a dictionary of metadata from a setup . py file .
5871	Returns a list of primary keys for the given model
5872	Deserializes the given value .
5873	Gets an existing instance from the database .
5874	Return a list of declared fields .
5875	Load data from the database .
5876	Split model kwargs into kwargs and association dict .
5877	Delete orphaned snapshots .
5878	Create a snapshot of a database .
5879	List all available snapshots .
5880	Restore a snapshot .
5881	Remove a snapshot .
5882	Rename a snapshot .
5883	Replaces a snapshot .
5884	Called at the end of each epoch .
5885	Clean text for use in textacy .
5886	Apply func to data in parallel .
5887	Constructs a list of tokens from a list of text documents .
5888	Return a list of strings representing the processed text .
5889	Process a list of strings in parallel .
5890	Generate the document length stats for each document .
5891	Return a pandas dataframe of token counts for each word .
5892	Map a parameter type to a list of string types .
5893	Parse a list of interfaces into a dictionary .
5894	Return the inverse bidict .
5895	Update with rollback .
5896	Return a copy of this bidict .
5897	Return a copy of this bidict .
5898	Return True if this mapping is equal to other .
5899	Invert a dictionary into a list of dictionaries .
5900	Clears the session .
5901	Move the node at key to the end of the tree .
5902	Writes text to a temporary file .
5903	Returns a list of contacts that match the query .
5904	Merge args into config .
5905	Load address books from configuration file .
5906	Prepare search queries for address book .
5907	Create a new contact .
5908	Return a list of vCard objects sorted by birthday date .
5909	Return a list of phone numbers for the given search terms .
5910	List all contacts in a list .
5911	Modify a vCard .
5912	Delete contact from address book .
5913	Create a sub - command for the selected vCard .
5914	Merge multiple contacts into a single vCard .
5915	Copy or move a vCard from a list of vcards .
5916	Returns the action with the given alias .
5917	Convert a boolean value to a boolean value .
5918	Create a new contact .
5919	Create an instance from a file .
5920	Create a Contact from a user input .
5921	Create a new contact from an existing contact and user input .
5922	Returns a list of the names of the part .
5923	Add a list of categories to the vcard
5924	Parse a list of supported types and a list of custom types .
5925	Convert a list to a string .
5926	Convert a string to a date object .
5927	Compare two uids .
5928	Search all contacts .
5929	Search contacts by full name .
5930	Search for contacts whose UID starts with the given query .
5931	Search the address book .
5932	Get a dictionary of the short uids for each contact .
5933	Get the short uid for the given uid .
5934	Find VCard files .
5935	Load the vCard file for this address book .
5936	Returns the abook with the given name .
5937	Return the available architectures .
5938	Return the available architectures .
5939	Return a inspect . ArgSpec for the given function .
5940	Dispatch a command with the given arguments .
5941	Safely input a prompt .
5942	Encode the given value with the given output file .
5943	Guess type and action from default value .
5944	Add commands to the parser .
5945	Decorator to mark a function as named .
5946	Decorator to add keyword arguments to the decorated function .
5947	Ask the user to confirm an action .
5948	Replace an existing query .
5949	Like .
5950	Return a cached result for this query .
5951	Returns the first result from the query .
5952	Delete all entities in the query .
5953	This method is called when an entity is deleted .
5954	Return a LUA prefix for the given index .
5955	Estimate work lua for a given index .
5956	Searches the database for the given filters .
5957	Return the number of elements matching the given filters .
5958	Return a connection to the database .
5959	Return the full text of a string or list of strings .
5960	Refresh the indices for the given model .
5961	Clean old index .
5962	Add an object to the session .
5963	Get the value for the given pk .
5964	Writes data to a LU table .
5965	Save changes to the database .
5966	Delete the object .
5967	Get a list of models from Redis .
5968	Register a function to be dispatched to the given type .
5969	Open a semaphore .
5970	Return the number of CPUs available on the system .
5971	Send the result to the result queue .
5972	Process a worker .
5973	Adds a call item to the call queue .
5974	Ensure that all worker processes are running .
5975	Wrap non - picklable objects into a CloudpickledObjectWrapper .
5976	Starts a new server .
5977	Return a DupFd object for a file descriptor .
5978	Return a new multiprocessing . Pool with the given number of workers .
5979	Wait for jobs completion before resizing .
5980	Return a dictionary of the preparation data for the given name .
5981	Prepare data for the current process .
5982	Close all open file descriptors .
5983	Recursively terminate a child process .
5984	Terminate a child process and its children .
5985	Get the exitcode of the terminated worker .
5986	Formats a list of exit codes .
5987	Run the main semaphore tracker .
5988	Ensure that the process is still running .
5989	Return the event processor .
5990	Run a Python program .
5991	Interact with the interactive console .
5992	Split a string into a list of arguments .
5993	Get the stack and line number of the given frame .
5994	Run a list of hooks for an object .
5995	Forcefully forgetting the stack .
5996	Return the integer value of the given argument .
5997	Return a positive integer .
5998	Processes the given commands .
5999	Start a file in the queue .
6000	Return the next token from a string .
6001	Raise EOFError if there is an error .
6002	Read a command from the input stream .
6003	Close the connection .
6004	Disassemble a message into a byte string .
6005	Disassemble code into a list of bytes .
6006	Return the number of frames in the given frame .
6007	Return the name of the call function .
6008	Print a stack trace of a process object .
6009	Look for a sub - command with the given prefix .
6010	Short Help .
6011	Add a sub - command callback .
6012	Run a sub - command .
6013	Starts the debugger .
6014	Show all commands in a given category .
6015	Return the line number of the current frame .
6016	Find the function that is being debugged .
6017	Map thread names to thread IDs .
6018	Get an integer from a string .
6019	Return True if the given argument is on or off .
6020	Set the boolean of an object .
6021	Set the value of an integer .
6022	Show whether the object is on or off .
6023	Shows the current value of the object .
6024	Show the value of a variable .
6025	Return True if line is a def statement .
6026	Return True if line is a class definition .
6027	Quit the debugger .
6028	Set the default background .
6029	Check if an RGB color is dark .
6030	Return the function signature of the given frame .
6031	Return a list of all display expressions .
6032	Return a list of display objects for the given frame .
6033	Return a string representation of the parameter .
6034	Read a message from the socket .
6035	Sends a debug message to the user .
6036	Undefined subcommand .
6037	Find and set debugged frame
6038	Print a simple array .
6039	Look up a signal name by its number .
6040	Return the SIG for the given name .
6041	Return the name of a canonic SIG .
6042	Set the replacement for the given signal .
6043	Check and adjust Sighandlers .
6044	Show information about a signal .
6045	Handle a signal .
6046	Handles a print signal .
6047	Handles a signal .
6048	Convert a file name to a module name .
6049	Search for a file in directories .
6050	Return the full path to the given script .
6051	Return a list of all . py files for the given caller .
6052	Writes a message to the output .
6053	Run a Python program .
6054	Return a columnized list of commands .
6055	Postmortem postmortem .
6056	Close the connection .
6057	Write a message to the socket .
6058	Return a list of identifiers for the given prefix .
6059	Add string to the queue and process it .
6060	Adds frames_or_fns to ignore_filter
6061	Return the canonical filename for the given filename .
6062	Return the filename of the file .
6063	Return True if the tracer is already started .
6064	Check if we should stop here .
6065	Set the next frame .
6066	Print the stack of the function f .
6067	Runs the debugger on the given filename .
6068	Checks the function name of a breakpoint .
6069	Delete a breakpoint .
6070	Delete a breakpoint by number .
6071	Enables all breakpoints .
6072	Disable a breakpoint by its number .
6073	Delete breakpoints for the given filename and lineno .
6074	Open the input file .
6075	Read a line from the input stream .
6076	Ask the user to enter a confirmation prompt .
6077	Adds a whitespace token .
6078	Tokenize a number .
6079	Return a future for the given query .
6080	Restores the original login .
6081	Loads a module from a given path .
6082	Iterate over all documents in the project .
6083	Main entry point for Luminoso .
6084	Converts a transcode to a stream .
6085	Open a JSON or CSV file .
6086	Normalize the data for each document in the stream .
6087	Convert a date string to a timestamp .
6088	Detect the encoding of a file .
6089	Stream JSON lines from a file .
6090	Converts a file to UTF - 8 .
6091	Open a CSV file .
6092	Read data from CSV file .
6093	Main entry point for transcode .
6094	Connect to Luminoso API .
6095	Save a Luminoso token .
6096	Make a request to Luminos API .
6097	Delete a resource .
6098	Wait for a build to complete .
6099	Return the root URL for the given URL .
6100	Saves a token to a file .
6101	Send a JSON request to Luminos API .
6102	POST data to the server .
6103	Change a path .
6104	Returns the default account .
6105	Return the documentation for this client .
6106	Wait for a job to complete .
6107	Get raw data for a given path .
6108	Print result in CSV format .
6109	Read parameters from file and return as dict .
6110	Simplify a document .
6111	Create a project with a list of documents .
6112	Upload docs to a project .
6113	Main entry point for luminoso .
6114	Upload a stream to Luminos .
6115	Upload a file to a server .
6116	Runs the command - line tool .
6117	Create a Luminoso token from user credentials .
6118	Login to the site .
6119	Post login page .
6120	Get data for a resource .
6121	Fetch data for each period .
6122	Load the View class from the dotted view name .
6123	Initializes the view .
6124	Render view for GET request .
6125	This method is called when a message is received .
6126	Update the menus of the current page .
6127	Default handlers for the site .
6128	Called when a message is received from the viewer .
6129	Called when the DOM has changed .
6130	Create the widget .
6131	Initializes the widget .
6132	Destroy the component .
6133	Adds a child to this WebComponent .
6134	Called when a child is removed .
6135	Yields all child widgets .
6136	Set an attribute .
6137	Updates the proxy .
6138	Notify that a change has been modified .
6139	Execute an xpath query on the remote server .
6140	Initializes and activates the proxy .
6141	Set the source of the widget .
6142	Set the source of the widget .
6143	Change mode to update or replace .
6144	This method is called when a block is updated .
6145	Change the children of this block .
6146	Return the contents of a file .
6147	Print an error message and exit .
6148	Error parsing command line .
6149	Get a product by name .
6150	Create a new session .
6151	Resets the store .
6152	Get a list of Stores matching the given search term .
6153	Sets the delivery system for a given postcode .
6154	Gets a menu for the given store .
6155	Add an item to the basket .
6156	Add a pizza to a basket .
6157	Add an item to a basket .
6158	Removes an item from a basket .
6159	Sets the payment method for this account .
6160	Process payment options .
6161	Get a resource .
6162	Handles POST requests .
6163	Calls the API .
6164	Append an item to the menu .
6165	Adds the exit item to self . items .
6166	Draw the menu .
6167	Process user input .
6168	Select the currently selected item .
6169	Parse an old menu .
6170	Return the top value from a DataFrame .
6171	Return a new dataframe with rows grouped by the given aggregate_by .
6172	Converts a string to a datetime .
6173	Convert a datetime to a string .
6174	Change the date format of a DataFrame .
6175	Cast a column to a given type .
6176	Compute the rank of the values in a DataFrame .
6177	Apply waterfall to a dataframe .
6178	Perform a basic math operation between two columns .
6179	Round values in a DataFrame to a specified number of decimal places .
6180	Return absolute values of a column .
6181	Performs a pivot operation on a DataFrame .
6182	Pivot a DataFrame by group .
6183	Perform a groupby on the given dataframe .
6184	Calculate the cumulative sum of the values in a DataFrame .
6185	Add missing row to dataframe .
6186	Catch an exception and log it .
6187	Decorator to log a message to a logger .
6188	Decorator to log the time of a function .
6189	Decorator to log the shapes of a function .
6190	Renames values and columns in a DataFrame .
6191	Compute the cumulative sum of the values in the given dataframe .
6192	Combine multiple columns into a single dataframe .
6193	Get a parameter value from a function call .
6194	Removes old entries from a cachedir .
6195	Roll up a DataFrame .
6196	Returns the maximum value of a column in a DataFrame .
6197	Compute the minimum value of a column in a DataFrame .
6198	Fill missing values in a DataFrame .
6199	Add an offset to a date object .
6200	Add a number of months to a date object .
6201	Add a number of years to a date object .
6202	Parse a date string into a date object
6203	Filter rows in a dataframe based on a date range .
6204	Calculates the percentage of the values in a column .
6205	Ada family core .
6206	Updates the optimizer with the given parameters and gradients .
6207	Returns a list of parameters for the training set .
6208	Adds free parameters for optimization .
6209	First Glimpse sensor .
6210	Prepare the encoder decoder and classifier .
6211	Computes the cost of the given tensor .
6212	Apply func to the training set and validation set .
6213	Vectorizes the target data .
6214	Reports the validation set and validation set .
6215	Train the network .
6216	Samples the input with the given number of steps .
6217	Compute the alignments of the model .
6218	Computes the context vector for the given inputs .
6219	Concatenate a list of variables along an axis .
6220	Pads the dataset to the given length .
6221	Compute RMS of a list of parameters and gradients .
6222	Reports the time spent in seconds .
6223	Runs the model on data_x .
6224	Runs the model .
6225	Build the loop variables .
6226	Scan the graph for each variable in the loop .
6227	Computes the momentum for the given parameters and gradients .
6228	If training flag is true then branch else_branch .
6229	Skip n_epochs and n_batches batches .
6230	Load parameters from a file .
6231	Train the model .
6232	Run the model on the given training set .
6233	Run the valid step for the given epoch .
6234	Report a score map .
6235	Get the data for the given data_split .
6236	Apply func to self . tensor .
6237	Reports the parameters that have been accessed .
6238	Returns the variance of the given tensor type .
6239	Create a list of NeuralVariable objects from the data .
6240	Return a shared value .
6241	Stack the given layers into the encoding_layes .
6242	Stack decoders .
6243	Encode the input tensor .
6244	Decode x .
6245	Create a 2D Gaussian distribution .
6246	Registers the given layer .
6247	Monitors the layers and hidden outputs .
6248	Return a list of all parameters .
6249	Set up the input and test variables .
6250	Computes and returns a MapDict of the values of x .
6251	Saves all parameters to a file .
6252	Load parameters from a file .
6253	Reports the network .
6254	Registers the given parameters .
6255	Register a list of updates .
6256	Register training updates with the model .
6257	Registers the given monitors .
6258	L2 norm of a list of tensors .
6259	Dump a single element to file_obj .
6260	Load data from a file - like object .
6261	Load parameters from a file .
6262	Create request elements .
6263	Decodes a state into a JSON object .
6264	Parses OAuth 2 . 0 OAuth 2 . 0 OAuth 2 . 0 credentials .
6265	Filter for access token request elements .
6266	Login to the provider .
6267	Normalize a dictionary .
6268	Convert a list of items to a dictionary
6269	Parses a JSON query string into a dictionary .
6270	Resolve provider class .
6271	Create a cookie .
6272	Saves the data to the cookie .
6273	Get the data associated with this cookie .
6274	Return a dict containing the data for this object .
6275	Return a HMAC - SHA - 1 signature of parts .
6276	Serialize the value to a base64 - encoded string .
6277	Check if expiration time is valid .
6278	Return True if the expiration time is within the given number of seconds .
6279	Return a string representation of the credentials .
6280	Check if content is a binary string .
6281	Return the content of the response .
6282	Create request elements for the given request type .
6283	Access user info .
6284	Authenticate the user .
6285	Login to the user .
6286	Return the key for the session .
6287	Set session value .
6288	Generates a CSRF token from a secret .
6289	Log a message at the specified level .
6290	Check if HTTP status is in a category .
6291	Split url into base and query parameters .
6292	Decorator to be used for cross - origin requests .
6293	Set CORS headers for a request .
6294	Return a dict of the app instance s config .
6295	Return a string representation of an object .
6296	Ensures that the given object is iterable .
6297	Return True if a is close to b .
6298	Mark a function as deprecated .
6299	Deserialize a bstr into an AudioSegment .
6300	Create an AudioSegment from a file path .
6301	Create an AudioSegment from a numpy array .
6302	Executes a sox command .
6303	Filter a WAV file by silence threshold .
6304	Compute Fourier Transform .
6305	Generate frames from raw data .
6306	Normalize the SPL of this AudioSegment by averaging .
6307	Return a copy of this AudioSegment with the same data as the others .
6308	Resample a waveform .
6309	Serialize the object to a string .
6310	Calculates the spectrogram .
6311	Given a list of offset front ids and a list of offsets_corresponding_to_onsets return the offset front id for each offset .
6312	Gets the offset front id after onset_sample_idx .
6313	Get the offset front id after the onset front .
6314	Given a front id and a list of offset fronts that correspond to one of the onsets in front_id and a list of offset fronts that correspond to one of the onsets in front_id
6315	Returns the consecutive portion of the onset front that overlaps with the onset front that overlaps with the onset front .
6316	Update the segmentation mask .
6317	Returns the front ID for the given index .
6318	Return a list of front ids for the given onset fronts .
6319	Returns a list of Offset objects corresponding to the given onset and offsets .
6320	Remove overlapped fronts from fronts .
6321	Removes fronts that are too small .
6322	Break Poorly matched fronts .
6323	Merge adjacent segments .
6324	Separate a list of mask objects based on a threshold .
6325	Downsample one or the other .
6326	Multiply the masks against STFTs .
6327	Filter for bandpass data .
6328	Lowpass filter .
6329	Convert a list of outcomes to a numpy array .
6330	Expand and standardize a dataset .
6331	Return True if a and b are equal .
6332	Return a list of features that belong to one or more groups .
6333	Loads the confusion matrices from a file .
6334	Convert a list of data to a TF input matrix .
6335	Update the index url from a list of config files .
6336	Checks that the requirements . txt and requirements . pip files exist .
6337	Return a list of StreamInfo objects .
6338	Return a list of StreamInfo objects for the given property and value .
6339	Return a list of StreamInfo objects for the given predicate .
6340	Handles an error code .
6341	Push a sample to the stream .
6342	Push a chunk of data into the object .
6343	Get information about the stream .
6344	Open a stream .
6345	Time Correction .
6346	Create a child element with the given name .
6347	Return the next sibling of this element .
6348	Return the previous sibling of this element .
6349	Sets the name of the LSL .
6350	Set the value of the element .
6351	Append a child element to this element .
6352	Prepends a child element with the given name .
6353	Append a copy of this element to elem .
6354	Create a copy of this element and prepend it to elem .
6355	Removes the child of rhs .
6356	Return a list of StreamInfo objects for this LSL resolver .
6357	Print a pair of tokens for a word .
6358	Runs an autocomplete query .
6359	Compute the n - grams of the given token .
6360	Iterate over a pipe .
6361	Apply a function to each element of an iterable .
6362	Make a fuzzy representation of a word .
6363	Return a fuzzy version of a word .
6364	Returns a list of tokens that match the given word .
6365	Extend the results of the query with the results of the query .
6366	Help for the given command .
6367	Display information about the database .
6368	Return the value of a key .
6369	Encode geospatial coordinates to geohash .
6370	Return a list of HousEnumbers for the given _id .
6371	Index a document .
6372	Do BESTSCORE for a word .
6373	Return the distance between two strings .
6374	Send a response to the server .
6375	Map a list of requests to a pool .
6376	Create a |Bits| object from a numpy array .
6377	Convert a reinterptet harray to a new harray .
6378	Convert a slice to a SLICE .
6379	Find all files in a directory .
6380	Return True if all elements of iterable are contained in sigOrVal .
6381	Generate statements for each item in a list of items .
6382	Create a new RtlSignalBase with the given number of bits .
6383	Return the logarithm of x .
6384	Return True if num is a power of 2 .
6385	Add a case statement to this stm .
6386	Register a default statement .
6387	Registers the given object with the given parent .
6388	This method is called before simulation .
6389	Writes a change to the log .
6390	Render a HWProcess object .
6391	Return a list of agents for each interface in the unit .
6392	Return the ClK associated with this unit .
6393	Return the distinct elements of an iterable by applying a function to each element in the iterable .
6394	Group items in a collection by a function .
6395	Flatten a list or tuple or map into a list or tuple .
6396	Merge nested IfContainer into this one .
6397	Removes all unconnected signals .
6398	Return True if statement is too simple .
6399	Merge two HWProcess objects .
6400	Reduce the number of processes in the same structure .
6401	Called when a write request is received .
6402	Convert a list of units to a list of RTL units .
6403	Returns the name of the output of the given list of statements .
6404	Cut off drivers of a list of statements .
6405	Create a new RtlSignal .
6406	Synthesize the model .
6407	Returns the maximum ID for the given Stm .
6408	Returns the maximum Stm ID for all statements in the given process .
6409	Write data to the interface .
6410	Change the direction of the interface .
6411	Load all declarations .
6412	Returns a list of signals for this interface .
6413	Return the physical name of this port .
6414	Return the bit length of the array .
6415	Return the sensitivity for the given operation .
6416	Evaluate the result of the given operator .
6417	Converts this value to the given type .
6418	Convert reinterpret bits to hStructT .
6419	Return the number of words between start and end .
6420	Yields a list of tuples where the first item is the start of the word and the second item is the end of the word .
6421	Print interface information to file .
6422	Return a list of frames from a TransTmpl transaction .
6423	Iterate over the parts of the word .
6424	Pack data into a list of SimBits .
6425	Cleans the signal meta data .
6426	Discover enclosure for statements and outputs .
6427	Discover sensitivity sequences from a list of RtlSignalBase objects .
6428	Return the RTL context of this statement .
6429	Called when a reduction operation is performed .
6430	Merge this statement with the other one .
6431	Return True if the list of stmsA and stmsB are mergable .
6432	Merge statements into a list of statements .
6433	Merge a list of statements into a list of statements .
6434	Try to reduce a list of statements .
6435	Calls the _on_parent_event_dependent method of all child events .
6436	Set the parent stm .
6437	Registers the given list of statements into the target list .
6438	Destroys this driver .
6439	Create a new register for the given type .
6440	Create a new HStruct with the given name and type .
6441	Clean up all ports and private interfaces .
6442	Iterate over the fields of a HStruct or HArray .
6443	Unpack data into a HStruct .
6444	Return a new Value whose sign is signed .
6445	Adds sensitivity to the sensitivity list .
6446	Evaluates a list of conds
6447	Connect a sub - simulation port to a sub - simulation port .
6448	Create an updater for a new value .
6449	Create an array updater for a list of values .
6450	Return a new bitvector of the given width .
6451	HWProcess - HWProcess - HWProcess
6452	Evaluate a Param .
6453	Set this parameter s value .
6454	Create an HStruct from an IntfMap .
6455	Finalize all resources .
6456	Return the index for the current driver .
6457	Create a Value object from a Python value .
6458	Cast the value to the given type .
6459	Cast the value to the given type .
6460	Iterate over the parameters of the given interface .
6461	Connect a packed interface to a destination interface .
6462	Pack an interface into a single string .
6463	Return a list of HWProcess objects for the given rom .
6464	Convert this unit to a RTL .
6465	Registers an interface with the given name .
6466	Try to reduce a boolean array to a boolean array .
6467	Try to reduce a scalar array .
6468	Return the base name scope .
6469	Return True if the object should be serialized .
6470	Return a HdlType instance for the given type .
6471	Converts an IfContainer to HDL .
6472	Return the condition for the given driver .
6473	Return a SimBitsT object for the given width .
6474	Gets the name of the const .
6475	Cut off the drivers of the given signal .
6476	Load data from array .
6477	Create a TransTmpl from a HStruct .
6478	Load data from a HDL type .
6479	Return the width of the array .
6480	Iterate over the children of this HStruct or HArray .
6481	Signs a value to the given width .
6482	Merge with other stm .
6483	Return the indent for the given indent number .
6484	Check if the object already has a property with the given name .
6485	Register a parameter in this scope .
6486	Updates this collector with the parameters from otherObj .
6487	Registers a new unit .
6488	Registers an interface .
6489	Registers an array .
6490	Return a single driver .
6491	Evaluates all operands and returns the result .
6492	Return a new RtlSignal with the given operands and outputs .
6493	Return a copy of this context with the given indent .
6494	Try to connect to the driver .
6495	Propagate clk for the given object .
6496	Propagate clk and rst units .
6497	Propagate clk and rst .
6498	Propagate rst_n for the given object .
6499	Propagate rst_n and rst from an object .
6500	Iterate over the bits of a signal or value .
6501	Serialize Exclude Eval .
6502	Serialize the given object to the given parent unit .
6503	Serialize params into a dictionary .
6504	Return the full name of the object .
6505	Create associations for each object in the collection .
6506	Prepare the simulation for the given unit .
6507	Convert a unit to a SimModel .
6508	Reconnect unit signals to model .
6509	Simulate the unit vector of a SimModel .
6510	Initializes the write callback .
6511	Connect this port to a signal .
6512	Registers an InternSig signal .
6513	Connects this endpoint to the driver .
6514	Get the InternSig of this node .
6515	Return True if the given SensProcs object is dependent on the given process .
6516	Add a new process to the queue .
6517	Adds a new process to run .
6518	Schedules a new combUpdateDoneEv for this agent .
6519	Schedules all the processes to run .
6520	Create a conflict resolve strategy for a set of values .
6521	Runs the combproces .
6522	Runs the sequence processes .
6523	Apply values to the simulation .
6524	Return a copy of the value for the given signature .
6525	Write a value to the target RTLSignal .
6526	Add a new process to the queue .
6527	Run the simulation for the given unit .
6528	Create a RtlSignalBase from a function .
6529	Convert a list of statements to a list of IfContainer objects .
6530	Return a copy of a HDL process .
6531	Calculates the hash distance between two hashes .
6532	Calculate the average hash of the image at image_path .
6533	Calculate the distance between two images .
6534	Setup the Vizio platform .
6535	Update the state of the device .
6536	Mutes the volume .
6537	Volume Up .
6538	Volume Down .
6539	Set the volume level .
6540	Reset all pieces and pieces in hand .
6541	Return a piece at the given square .
6542	Removes a piece at square .
6543	Set piece at square .
6544	Check whether the given move is suicide or check - by -dropping pawn .
6545	Checks if the player was suicide .
6546	Return True if the game is over .
6547	Return True if this game is a checkmate .
6548	Checks if the zobrist is a repetition .
6549	Pop a move from the stack .
6550	Return a list of all pieces in the hand .
6551	Pushs a usi into the board .
6552	Return the Zobrist hash of the board .
6553	Return the symbol for this piece .
6554	Create a PIECE instance from a string .
6555	Return a string representing the drop piece .
6556	Converts a USI string to a Piece .
6557	Parse data into a list of Commit objects .
6558	Parse the given parts into a dictionary .
6559	Load config from command line arguments .
6560	Executes the given command line arguments from the given configuration .
6561	Adds an argument to an argparse . ArgumentParser .
6562	Load config from file .
6563	Generates a YAML representation of the class .
6564	Generates a markdown representation of the class .
6565	Cast a value to a string .
6566	Returns a list of dates between first_date and last_date
6567	Parse a date from a string .
6568	Load data from a file .
6569	Set missing rates to None .
6570	Compute the missing rates for a currency .
6571	Get the rate for a given date .
6572	Convert an amount to a new currency .
6573	Split an iterable into chunks of size n .
6574	Animate a list of frames .
6575	Read a record from the file .
6576	Write a record to the file .
6577	Map the memory of the file at start to end .
6578	Return a list of comments from the file .
6579	Add an array to the summary control file .
6580	Closes the file .
6581	Compute the position of the given tdb and tdb2
6582	Closes the file .
6583	Load data from a binary PCK file .
6584	Compute the segment for the given tdb and tdb2 .
6585	Recursively visit a Call node .
6586	Recursively visit a BinOp node .
6587	Recursively visit a dictionary node .
6588	Adds FSTRING_VIOLATION to self . violations
6589	Recursively visit a Keyword node .
6590	Recursively visit an exception handler .
6591	Return the logging level for the given node .
6592	Return the name of an exception handler .
6593	Return the value s id attribute .
6594	Check if node is a bare exception .
6595	Check the exc_info attribute of the node and add it to self . violations .
6596	Delete a file if needed .
6597	Adds the widget to the context .
6598	Return the rendered PDF .
6599	Render the view to a response .
6600	Converts a string to an HTTP quote .
6601	Configures options from a module .
6602	Converts a string to camelCase .
6603	Auto - index a collection .
6604	Parse a file and return a list of PriceModel objects
6605	Load a file into a list of strings .
6606	Parse a line into a PriceModel .
6607	Translates a symbol .
6608	Load all symbol maps .
6609	Gets the session .
6610	Add a price to the database .
6611	Import prices from CSV file .
6612	Show the latest prices available for all securities .
6613	List all prices for a given date and currency .
6614	Download prices from the database .
6615	Prune old price entries .
6616	Gets the default session .
6617	Add a new symbol map to the database .
6618	List all available maps .
6619	Returns a SymbolMap for the given symbol .
6620	Read lines from a CSV file .
6621	Map entity to dal . PriceModel
6622	Map a model to a price entity .
6623	Read the configuration file at file_path .
6624	Return the path to the config file .
6625	Create user config file .
6626	Return the path to the config file .
6627	Return the contents of the config file .
6628	Set the value of an option .
6629	Get the value of an option .
6630	Saves the configuration to a file .
6631	Parse symbol into namespace and mnemonic .
6632	Adds a price to the model .
6633	Add a price entity to the database .
6634	Download a price .
6635	Gets the DAL session .
6636	Get all prices for a given date and currency .
6637	Get prices for the given symbol and date .
6638	Removes all security symbols that have prices
6639	Removes all prices for a symbol .
6640	Download a price for a symbol .
6641	Return a list of security objects .
6642	Return a partial version of the state .
6643	Update all child calls .
6644	Yields all descendants of this node .
6645	Decorator to handle multiple decorators .
6646	Checks that the student part has the same length as the solution part .
6647	Assert that the given state has equal AST .
6648	Test if the student code has the text in text .
6649	Check if a package has import .
6650	Checks if the student has output for the given text .
6651	Check if there is a printout at the given index .
6652	Assert that the state has no error .
6653	Checks that the student process has chosen the given feedback messages .
6654	Check if a function is valid .
6655	Return the result from a process .
6656	Override the existing AST with a new one .
6657	Checks if an object is an instance of a student .
6658	Return a new dictionary with the defined items .
6659	Converts the current state to a child state .
6660	Return a Parser instance for the given extension attribute .
6661	Check if the target has a context loop .
6662	Checks if the state has context .
6663	Checks that the part with the given name is part of the given state .
6664	Check that there are enough parts at the given index .
6665	Check the arguments of a function .
6666	Return a child node for a check call .
6667	Return True Anomaly .
6668	Initializes the application .
6669	Initialize LDAP configuration .
6670	Add a server to the server pool .
6671	Decontextualise a connection .
6672	Destroys all open LDAP connections .
6673	Authenticate a user .
6674	Authenticate to the LDAP server .
6675	Authenticate an LDAP search .
6676	Returns a list of groups for the specified user .
6677	Get information about a user .
6678	Get user info for a given username .
6679	Get an LDAP object .
6680	Return a connection to the LDAP3 server .
6681	Create a connection to the database .
6682	Create a connection to the LDAP server .
6683	Destroy a connection .
6684	Searches for the given query .
6685	Search for labels .
6686	Searches for the given query .
6687	Search for all jobs in a collection .
6688	Speak the client to the database .
6689	Announcing a command .
6690	Update the credentials for the Google Drive API .
6691	Update headers .
6692	Require secrets for the client .
6693	Download a file from a URL .
6694	Stream data from a URL .
6695	Update the authorization token .
6696	Gets or creates a folder .
6697	Reads the response from the server .
6698	Get the S3 bucket .
6699	Updates the client secrets .
6700	Initializes the client .
6701	Load Globus secrets from cache .
6702	Returns a list of logs for the given name or the most recent one .
6703	Returns a list of all logs in the bucket .
6704	Create an endpoint folder .
6705	Initializes the transfer client .
6706	Search for all containers .
6707	Show status of a backend .
6708	Adds the given variable to the given backend .
6709	Removes the variable from the SREGISTRY
6710	Activate the given backend .
6711	Delete the specified backend .
6712	Updates the base for the image .
6713	Create a basic auth header .
6714	Generate a signature for the given payload and secret .
6715	Generates a HMAC - SHA256 header signature for the given request type .
6716	Send DELETE request .
6717	Send a HEAD request to url .
6718	Paginate the results of a GET request .
6719	Verifies that the certificate is valid .
6720	Remove an image .
6721	Return a lookup dictionary from the version . py file
6722	Return a list of install requirements for the given module .
6723	Get the singularity version .
6724	Check if the package is installed .
6725	Return an absolute path to the root directory of the application .
6726	Return the thumbnail path for this registry .
6727	Run a command .
6728	Get metadata for image_file .
6729	Update the user s dropbox token .
6730	Print the response to the user .
6731	Destroy all running commands .
6732	List logs for a container .
6733	Returns a list of all containers in the account .
6734	Updates the secrets for the current environment .
6735	Updates the Google Storage client settings .
6736	Return an instance of SREGISTRY .
6737	Display an IPython notebook .
6738	Returns a dictionary of manifests for the given repo .
6739	Get the manifest for the given repo .
6740	Download cache .
6741	Extracts environment variables from the config file .
6742	Updates the base and artifacts .
6743	Update SREGISTRY_GITLAB_TOKEN .
6744	Return dictionary of metadata for GITLAB .
6745	Return the settings for the specified client .
6746	Get and update a setting .
6747	Updates an existing setting .
6748	Generate a HMAC - SHA256 granting access to the registry .
6749	List all builders for a project and zone .
6750	Return a list of templates for the given name .
6751	Returns the IP address for the given instance name .
6752	Build a new instance .
6753	Returns a list of all containers in the bucket .
6754	Search for all containers in the bucket .
6755	Main entry point for sregistry .
6756	Main entry point for SRegistry .
6757	Initializes the database at db_path
6758	Get the build template .
6759	Search for a list of endpoints .
6760	Return a list of endpoints .
6761	Returns a list of files at an endpoint .
6762	Create a shared link for a query .
6763	Read client secrets from secrets file .
6764	Gets the services for the given version .
6765	Delete an object .
6766	Delete a file .
6767	Destroy an instance .
6768	Returns a dictionary of all sub - parsers for the given parser .
6769	Generates a string suitable for writing to a file .
6770	Returns a temporary directory .
6771	Extract tar archive to output_folder .
6772	Extract a tar archive to output_folder .
6773	Return the hash of a file .
6774	Read the contents of a file .
6775	Read a JSON file .
6776	Clean up a list of files .
6777	Push an image to S3 .
6778	Get a collection if it doesn t exist .
6779	Get a collection by name .
6780	Get a container by name and version .
6781	Return a list of containers for this client .
6782	Return a dictionary representation of a container .
6783	Rename an image .
6784	Move an image to a given path .
6785	Removes an image .
6786	Add an image to the registry .
6787	Push an image to a registry .
6788	Parse a header from a recipe .
6789	Find a single recipe for the given filename .
6790	Create a build package from a list of files .
6791	Run a build .
6792	Update metadata for a blob .
6793	Formats a container name .
6794	Return True if color should be used .
6795	Emit an error .
6796	Write a message to the given stream .
6797	Create a table from a list of dictionaries .
6798	Push an image to a container .
6799	Get a template by name .
6800	Get the manifest for an image .
6801	Get the build template .
6802	Update all client secrets .
6803	Return a string representation of a class .
6804	A context manager for S3 errors .
6805	Create a proxy from a file .
6806	Returns a gravatar URL for the given user or email .
6807	Returns a Gravatar URL for the given email .
6808	Check if an email has a gravatar .
6809	Returns the URL for a Gravatar profile .
6810	Return a list of chimera blocks .
6811	Computes the chimera block quotient of the given blocks .
6812	Enumerate ResonanceSmiles from a list of Smiles .
6813	Return a list of ResonanceMol objects .
6814	Normalize fragments into a single molecule .
6815	Apply transform to a list of molecules .
6816	Canonicalize a mol into a list of tautomers .
6817	Validate a list of smiles .
6818	Remove bonds that match SMARTS .
6819	Converts a list of smiles to a list of Smiles .
6820	Enumerate tutomers from a list of smiles .
6821	Converts a list of SMILES to a list of equivalent SMILES .
6822	Return a copy of the mol .
6823	Return the Tautomer of the given mol .
6824	Return the parent fragment for the given mol .
6825	Remove Stereochemistry from a mol .
6826	Replace isotope with common weight .
6827	Return the parent charge .
6828	Return the parent of the charge or stereon .
6829	Main entry point for Molvs .
6830	Removes fragments from the given mol .
6831	Choose the fragment to use based on the mol parameter .
6832	Integrated IVP .
6833	Get stats from GitHub .
6834	Returns the number of members in the organization .
6835	Returns the number of teams in the organization .
6836	Get all repos .
6837	Get the total number of contributors for the given repo .
6838	Get the number of pull - requests open and closed at the given repo .
6839	Get all issues for the given organization .
6840	Get the readme for the given repo .
6841	Search for a license in a repository .
6842	Returns a list of commits for the given repo .
6843	Writes organization data to a json file .
6844	Write totals to file_path .
6845	Write languages to file_path .
6846	Check if a directory exists .
6847	Removes a date from a csv file .
6848	Return a list of Government organizations .
6849	Create a GitHub Enterprise session .
6850	Check API rate limit .
6851	Connect to GitHub API .
6852	Query GitHub repositories .
6853	Get organization .
6854	Writes the stargazer to a file .
6855	Create a GitLab Project object from a gitlab . Repository object .
6856	Create a Project object from a DOCODE record .
6857	Return a dict describing the license .
6858	Get all the data for each repo in the organization .
6859	Get releases for a repository .
6860	Get all referrers for a given URL .
6861	Get data for a given type of traffic .
6862	Writes a dictionary to a JSON file .
6863	Writes the referrers data to a file .
6864	Check to see if the data is redundancy .
6865	Write data to a file .
6866	Writes the referrers to a file .
6867	Process a DOECODE json file
6868	Fetch a DOECODE JSON from a URL .
6869	Process a file or URL or key .
6870	Login to GitHub .
6871	Get the mems of the org .
6872	Write login and email to a file .
6873	Connect to stashy .
6874	Connect to the Gitlab API .
6875	Query for repos .
6876	Convert a git repo to SLOC .
6877	Calculate the number of working hours in a month .
6878	Removes all null strings from a dictionary .
6879	Reads a GQL query file .
6880	Query GitHub from a file .
6881	Submit a query to GitHub .
6882	Wait for a given UTC Timestamp to be reset .
6883	Wait for the server to return a number of seconds .
6884	Import data from a file .
6885	Save data to file .
6886	Create a tfs connection .
6887	Create a TFS project analysis client .
6888	Create a TFS core client .
6889	Create a TFS Git client .
6890	Create a TFVC client for the given URL .
6891	Returns a list of Git Repos for the given project .
6892	Returns a list of Tfvc Branches for the given project .
6893	Gets the number of commits for each year .
6894	Calculate the total number of commits for each week .
6895	Writes the last year commits to a file .
6896	Configures the given backends .
6897	Return a MetricsInterface for the given thing .
6898	Timing a metric .
6899	A context manager for timing .
6900	Decorator to mark a function as a timer .
6901	Generate a tag for the given key and value .
6902	Timing a metric .
6903	Log a histogram .
6904	Rollup the data .
6905	Order a list of members by the given field .
6906	Return a value from a database value .
6907	Converts a value to an enum value .
6908	Return a string representation of a value .
6909	Resolves the given path for the given object .
6910	Project a set of ULS into a dictionary of ULS .
6911	Return the mean value of the sequence .
6912	Mark the counter as 1 .
6913	Return the mean rate of the counter .
6914	Mark the value to the last value .
6915	Send a metric .
6916	Serialize a metric to a list of strings .
6917	Return a string representation of a metric .
6918	Send a metric to the buffer .
6919	Return the value of an option from a section .
6920	Ensure that JSON data is UTF - 8 encoded .
6921	Get or set the default value for an option .
6922	Given a list of ledger codes and a list of ledger IDs return a dictionary mapping the code to the ID of the ledger .
6923	Get Divisions for the current user .
6924	Map exact invoice numbers to foreign invoice numbers .
6925	Solve the SAT problem .
6926	Create a view for the given injector .
6927	Create a FormView instance for the given injector .
6928	Create a method view for the given injector .
6929	Return an instance of the API view .
6930	Generic API view .
6931	Create a model view set handler .
6932	Stream data from a file descriptor .
6933	Wait for the file descriptor to be ready for reading .
6934	Close the connection .
6935	Called when the connection is closed .
6936	Watch a file or directory .
6937	Unwatch the given alias .
6938	Set up a watch on the file descriptor .
6939	Setup the transport .
6940	Get an event from the stream .
6941	Touch this message .
6942	Mark the interval as success .
6943	This method is called when a failure occurs .
6944	Close all open connections .
6945	Return True if all connections are starved .
6946	Connect to nsqd .
6947	Perform a lookupd query .
6948	Set the maximum number of in flight connections .
6949	Gives up on a message .
6950	Register a callback for a listener .
6951	Unregisters a callback for the given listener .
6952	Trigger all the listeners with the given name .
6953	Publish a message to a topic .
6954	Sets the feature transform mode and degree .
6955	Prediction .
6956	Calculates the angle between 0 and 709 .
6957	Parse a log file into a dictionary .
6958	Removes unpaired fastq files .
6959	Merge default adapters into a FASTA file .
6960	Runs the trimmomatic command .
6961	Read a depth file into a dictionary .
6962	Runs the Plasmid lengths analysis .
6963	Set the template .
6964	Sets the main channel names .
6965	Get user channel information .
6966	Render a template with the given context .
6967	Return a string representation of the template .
6968	Set the input and output channels .
6969	Update main forks and output channel .
6970	Set the secondary Channel for the given source and channel_list .
6971	Update attributes from a dictionary .
6972	Sets the compile channels for this pipeline .
6973	Set the raw inputs for the process .
6974	Sets the secondary inputs for the given channel dict .
6975	Set the extra inputs for each channel_dict .
6976	Parse coverage from a header string .
6977	Parse an assembly file into a list of contigs .
6978	Get GC content .
6979	Filter contigs based on a list of comparisons .
6980	Returns the length of the assembly .
6981	Writes the assembly to output_file .
6982	Writes the assembly report into a file .
6983	Removes nested brackets from a string .
6984	Check for inner forks in a pipeline string .
6985	Runs sanity checks on a pipeline string .
6986	Parse a pipeline string .
6987	Returns the lane for the given list of pipelines .
6988	Return a list of lanes from a raw string .
6989	Establish a linear connection between processes .
6990	Establish a fork of the given source and sink lane .
6991	Add spaces at the beginning and end of the pipeline string .
6992	Removes the unique identifiers from the pipeline links .
6993	Check that the . nextflow . log files exist .
6994	Converts a header string to a dictionary .
6995	Converts a string to a number of hours and minutes .
6996	Calculates the size of a string .
6997	Reads the log file and returns a dict of the current state of the pipeline .
6998	Clear up the inspect .
6999	Update the barrier status .
7000	Return a list of lines from a log file .
7001	Assess resource warnings .
7002	Update process stats .
7003	Parse the log file .
7004	Update log parser and trace parser .
7005	Display the contents of the screen .
7006	Increase the top line .
7007	The right left corner of the screen .
7008	Return the last n lines from the log file .
7009	Prepare static configuration files for the pipeline .
7010	Converts the DAG file to a dictionary .
7011	Get the hash of the pipeline .
7012	Returns the path to the nextflow . log file .
7013	Run script .
7014	Runs the pipeline status routine .
7015	Run Innuendo pipeline .
7016	Return a Recipe object for the given recipe name .
7017	List all available recipes .
7018	Validate that a pipeline string is valid .
7019	Build up the pipeline fragment for the given task .
7020	Build a new pipeline fragment for the given task .
7021	Define a pipeline string based on a list of process descriptions .
7022	Run the pipeline for the given tasks .
7023	Return a string representation of a component .
7024	Writes the report to a json file .
7025	Main function for trimmomatic_report .
7026	Replace contig names with underscores .
7027	Removes temporary fastq files .
7028	Parse a list of files .
7029	Parse a log file into a dictionary .
7030	Iterate over the entries that satisfy the given filters .
7031	Return the contig_id from a contig_str
7032	Return a dictionary of plot data for each sample .
7033	Writes the plot and table data in JSON format .
7034	Main function for the assembly report .
7035	Parse the assembly file into a dictionary .
7036	Get summary statistics for each contig .
7037	Returns a list of labels for each contig in the given window .
7038	Return the GC of a string .
7039	Returns a list of GCs in sliding window .
7040	RunSkesa .
7041	Writes a JSON report .
7042	Returns the index of the last biased position in the biased list .
7043	Removes range data from nucleotide bias assessment file .
7044	Calculate the sample trim between p1_data and p2_data .
7045	Retrieve summary information from a file .
7046	Check the health of the summary file .
7047	Parse a Bowtie log .
7048	Parse a process name and directives .
7049	Adds a dependency to the process .
7050	Search tree backwards .
7051	Builds the header .
7052	Builds the footer .
7053	Set the main channels and secondary channels .
7054	Sets up the init process .
7055	Set secondary Channels for all secondary Links .
7056	Set the status channels for each pipeline process .
7057	Return a string representation of a dictionary of resources .
7058	Return a string representing a container .
7059	Return a string representation of the parameters for each component .
7060	Return the merged parameters as a string .
7061	Returns the manifest string for the pipeline .
7062	Set the configurations for each process .
7063	Converts a dictionary to a JSON file .
7064	Render the pipeline .
7065	Writes the configuration to the given project root .
7066	Export parameters of all processes .
7067	Export directives to json file .
7068	Fetch Docker tags for each component in the pipeline
7069	Build the nextflow .
7070	Set the number of kmers specified in kmer_opt .
7071	RunSPAdes .
7072	Get the hash of the nextflow pipeline file .
7073	Update self . trace_watch .
7074	Update the logwatch .
7075	Sends a live report to the server .
7076	Send initial POST request to start a report .
7077	Close connection to the server .
7078	Converts the provided adapters file to the output adapters file .
7079	Run FastQC .
7080	Sends the results to the output file .
7081	Runs the mash_output script .
7082	Return a list of build versions for this template .
7083	Reads the mash_output file and returns a dictionary of the results .
7084	Print a message with color_label .
7085	Parse a dictionary of procs_dict .
7086	Create a collector for each process in process_map .
7087	Guess the file extension for the given file path .
7088	Return the minimum and maximum of a qualifier string .
7089	Return a list of encodings in a given range .
7090	Parse a coverage file into a dictionary .
7091	Filter assembly .
7092	Filter BAM files based on coverage_info .
7093	Evaluate the minimum assembly coverage .
7094	Get assembly size and contig size from an assembly file .
7095	Runs assembly mapping processing .
7096	Convert CamelCase to CamelCase .
7097	Return a dictionary of component classes .
7098	Reroot at midpoint .
7099	Computes the quickhull of a sample .
7100	Map W to data .
7101	Apply median filter to array X .
7102	Compute the Kullback - Shannon Gaussian .
7103	Compute the square root of X .
7104	Computes the number of non - zero values in X and G .
7105	Apply gaussian filter to the data .
7106	Computes the number of nonzeros in X .
7107	Return the circular shift of X .
7108	Compute the embedded space .
7109	Plots the number of steps and the number of steps .
7110	Plots the boundaries of all_boundaries .
7111	Plots the labels for all_labels .
7112	Plot a single track .
7113	Plots a tree .
7114	Return a list of feature segments corresponding to the given boundaries .
7115	Convert a list of feature segments to 2D 2D FMC .
7116	Compute the similarity between the feature segments and the 2D feature segments .
7117	Fit the model to the given data .
7118	Performs a partial fit of the model .
7119	Read references from a jam file .
7120	Find Estimation by label_id .
7121	Save estimations to file_struct .
7122	Return a list of all boundary algorithms .
7123	Get the configuration for a feature .
7124	Return a list of FileStruct objects for the given path .
7125	Read Hier references from a jams file .
7126	Returns the duration of the features file .
7127	Writes Mirex data to a file .
7128	Return the path to the dataset file .
7129	Align a list of beats to a list of segments .
7130	Estimate the number of beats from the harmonic source .
7131	Read annotations from a JAMS file .
7132	Given a list of frames and a list of beatsync features and a list of beatsync times .
7133	Read features from a JSON file .
7134	Write features to a JSON file .
7135	Returns a list of parameter names for this module .
7136	Compute framesync times .
7137	Return the number of framesync framesync framesync or ann_beatsync framesync framesync framesync framesync framesync framesync framesync framesync framesync framesync framesync features .
7138	Returns a list of features for this audio file .
7139	Select a set of features .
7140	Preprocess MSAF features .
7141	Add empty segments if needed .
7142	Run the speficied algorithm on the MSAF formatted dataset .
7143	Print the mean of the results .
7144	Evaluates the results of a GMST dataset .
7145	Compute Information Gain .
7146	Processes the given file_struct and returns the results .
7147	Gets the name of the results file .
7148	Process results from MSA .
7149	Adds a new config variable to the config tree .
7150	Computes all features for the given file struct .
7151	Process a single file or collection of files .
7152	Computes the cost of the Gaussian distribution .
7153	Normalize a log - normal distribution .
7154	Return the minimum and maximum of the array F .
7155	Normalize X according to the given norm type .
7156	Get the number of frames for a given duration .
7157	Remove empty segments from a list of times and labels .
7158	Sonify audio and clicks .
7159	Synchronize labels from old_labels to new_labels .
7160	Process a segmentation level .
7161	Align two hierarchies .
7162	Compute the distance to a node .
7163	Estimate K - means and diff_bics .
7164	Get the clustered data .
7165	Runs kmeans on the data .
7166	Compute BIC .
7167	Return the magnitude of X .
7168	Convert a json file to a list of bounds .
7169	Converts a JSON bounds file to a numpy array .
7170	Converts a json file into a list of labels .
7171	Convert a json file to a list of beats
7172	Compute 2D Fourier transform .
7173	Return a list of labels for the given rank and R .
7174	Filter activation matrix .
7175	Return the boundaries module for the given boundaries_id .
7176	Return a module for the given labels_id .
7177	Runs a hierarchical segmentation .
7178	Runs the flat segmenter for the given file struct .
7179	Runs all the algorithms for the given file structure .
7180	Process a track .
7181	Process a multi - segment file .
7182	Update the beta matrix .
7183	Main entry point for the translator .
7184	Decorator to wrap a function as a coroutine .
7185	Return the number of elements in the accumulator .
7186	Set up the task queue .
7187	Spool the given iterable with the given maxlen .
7188	Sends the input stream to the target .
7189	Wrap a HTTP interface .
7190	Creates a request to translate a phrase .
7191	Return a translation table for the given language .
7192	Print a translation table .
7193	Removes nodes from the network .
7194	Write network to an HDF5 file .
7195	Create a Network from a Pandas HDF5 file .
7196	Set the variable for the given node_ids .
7197	Aggregate accessibility variables .
7198	Get the node ids for each node in the KDTree .
7199	Plots the data for each node .
7200	Set the pois for the given category .
7201	Find nearest pois for a given distance and category .
7202	Lowest number of nodes within impedance .
7203	Process a node .
7204	Make an Osid query .
7205	Builds a query for a node .
7206	Create an OLSM query for a list of nodes .
7207	Return True if value is a regex expression .
7208	Compare a value with a given expectation .
7209	Decorator for fluent functions .
7210	Compare an expression to a value .
7211	Trigger methods on an instance .
7212	Return True if all of the matchers match the given request .
7213	Return a matcher with the given name .
7214	Initialize a matcher with the given arguments .
7215	Sets the body of the request .
7216	Convert data to JSON .
7217	Set the value of a key .
7218	Append a list of functions to the target .
7219	Helper method to trigger request matchers .
7220	Sets the URL for the request .
7221	Sets the headers for this request .
7222	Assert that headers are present .
7223	Assert that headers are present .
7224	Sets the Content - Type header .
7225	Adds query parameters to the request .
7226	Sets the request body .
7227	Sets the JSON representation of the request .
7228	Adds XMLMatcher to the request .
7229	Open a file at path .
7230	Sets the persist flag .
7231	Sets the error .
7232	Send a reply to the mock .
7233	Match request against registered mock matchers .
7234	Decorator to activate the engine asynchronously .
7235	Set the mock engine .
7236	Enable Network .
7237	Create a mock for the given URL .
7238	Remove a mock from the mock list .
7239	Activate the mock engine .
7240	Disable the mock engine .
7241	Return True if all networks should be used .
7242	Check if the given request matches this mock .
7243	Return a copy of this request .
7244	Decorator to activate the engine .
7245	Context manager to use the engine .
7246	Adds the given interceptors to the engine .
7247	Removes the interceptor with the given name .
7248	Get a setting from a connection .
7249	Return the SQL for this DecryptedCol .
7250	Override pre_save method for HashMixin .
7251	Returns a placeholder for the given value .
7252	Return a DecryptedCol object for the given alias .
7253	Returns a placeholder value for the given connection .
7254	Given a dictionary of data and a dictionary of key - > value pairs return a dictionary of key - > value pairs .
7255	Calculate the base regression .
7256	Return the covariance matrix of the root node .
7257	Recurses the tree .
7258	Calculates the averages of all nonterminals in the tree .
7259	Propagation function .
7260	The explained variance of the tree .
7261	Calculate the regression of the tree .
7262	Find the best root of the tree .
7263	Set the integral merger rate for each timepoint .
7264	Calculates the number of branches at each time point .
7265	Computes the cost of a branch .
7266	Attach the cost to the tree .
7267	Optimize coalescent time scale
7268	Converts a profile to a sequence .
7269	Normalize a profile .
7270	Setter for _gtr field .
7271	Set GTR model .
7272	Set the length of the sequence .
7273	Attach sequences to nodes .
7274	Prepares the tree .
7275	Prepare the nodes of the tree .
7276	Calculates the distance to the root of the tree .
7277	Reconstructs the Anc object for the given method .
7278	Calculates the mutation matrix for each branch .
7279	Return the expanded sequence of the node .
7280	Create the Fitch profiles for each terminal node .
7281	Return the fitch state of the node at the given position .
7282	Given a list of arrays return the intersection of the two arrays .
7283	Return the LH of the sequence .
7284	Calculates the ancestral likelihood .
7285	Return the branch length for the given node .
7286	Optimize branch length .
7287	Optimize the branch length of the tree .
7288	Return the optimal branch length for the given node .
7289	Optimize sequences and branch lengths .
7290	Return a Bio . Seq object representing the reconstructed alignment .
7291	Computes the diagonal matrix of the Jacobian .
7292	Create a new GTR with a custom mu and pi .
7293	Standard model .
7294	Fix the diagonal of the GTR rate matrix .
7295	Calculates the probability that the given sequence pair is within the given multiplicity .
7296	Computes the optimal value for a sequence .
7297	Calculates the probability that the given sequence is within the given multiplicity .
7298	Calculates the probability that the outgroup or node has a gap or non - gap profile .
7299	Return the evolution of profile at time t .
7300	Calculates the logLH of a sequence .
7301	Sets the branch length mode .
7302	Return the clock filter for each node .
7303	Plots root to tip .
7304	Resolve all polytomies in the tree .
7305	Print the log - likelihood of the tree .
7306	Adds a coalescent model to the tree .
7307	Finds the best root of the tree .
7308	Try to infer a tree from the given parameters .
7309	Create a GTR model with default parameters .
7310	Read a VCF file from a VCF file .
7311	Reconstruction of ancestral sequences .
7312	Calculate the FWHM of a distribution .
7313	Calculates the delta function .
7314	Multiply a list of Distribution objects .
7315	Assign dates to the tree .
7316	Setup the tree regression .
7317	Create a ClockTree for the given time_marginal and clock_rate .
7318	Calculates the likelihood of each node in the tree .
7319	Convert the dates of the clock tree .
7320	Return the uncertainty due to the given node .
7321	Return the maximum posterior region for a node .
7322	Return the minimum value of an interpolation object .
7323	Calculates the median of an interpolation object .
7324	Return a numeric date .
7325	Create a TimeSeries from a regression model .
7326	Return a connection to guacd server .
7327	Close the connection .
7328	Receive an instruction from the server .
7329	Send data to the server .
7330	Send an instruction to the server .
7331	Starts a handshake .
7332	Convert a unicode string to UTF - 8 .
7333	Load an instruction from a string .
7334	Encode an argument to UTF - 8 .
7335	Encode the instruction .
7336	Return the URL for the class .
7337	Return the URL for this instance .
7338	Return the URL for the given class .
7339	Download a file .
7340	Gets the parent object for this job .
7341	Ask for SolveBio credentials .
7342	Login to Solvebio .
7343	Displays whoami is running .
7344	Print user information .
7345	Return a new QuerySet with the given filters .
7346	Return a new GenomicFilter object for the given chromosome and range .
7347	Create a new GenomicFilter with the given chromosome and position .
7348	Get facets for a list of facets .
7349	Return a list of Filter objects from a list of Filter objects .
7350	Gets the next result from the iterator .
7351	Execute a query .
7352	Create a new dataset migration for the given target .
7353	Main entry point for solvebio .
7354	Downloads all sub - folders from remote path to local path .
7355	Create a new instance from a dict .
7356	Logout the user .
7357	Make a request to the API .
7358	Gets the child object associated with this task type .
7359	Cancels the task .
7360	Parse the Snpeff info into a dictionary .
7361	Convert a SolveBio variant row to a dictionary .
7362	Get credentials from the credentials file .
7363	Save configuration to a file .
7364	Format a value to a string .
7365	Normalize tabular data .
7366	Build a row from a list of key - value tuples .
7367	Build a line from a list of column widths .
7368	Return a list of mediawiki cell attributes .
7369	Format a table .
7370	Create a new dataset migration .
7371	Validate a full path .
7372	Upload files to a Vault .
7373	Validates that the full path is valid .
7374	Validate that the SolveBio API host URL is valid .
7375	Add files or directories to the manifest .
7376	Annotates the given records .
7377	Evaluate an expression .
7378	Setter for _format_name attribute .
7379	Register a new output format handler .
7380	Format the output data .
7381	Create a tabular table from data and headers .
7382	Return the user s config directory .
7383	Return a list of system config directories for the given application .
7384	Read the default config file .
7385	Read all config files .
7386	Return the path to the user - specific configuration file .
7387	Return a list of system configuration files .
7388	Return a list of additional files .
7389	Writes the default configuration file .
7390	Read config files .
7391	Truncates a string to max_width .
7392	Replace a string with a list of replace strings .
7393	Call a list of commands in sequence .
7394	Apply options to cmd .
7395	Apply an option to a command .
7396	Initializes the options for the linter .
7397	Fix the pep8radius .
7398	Runs the clean docs command .
7399	Truncates string data to max_field_width .
7400	Format data as a list of numbers .
7401	Formats a single row .
7402	Create a vertical table from data and headers .
7403	Create a table from data and headers .
7404	Render a template file to a destination file .
7405	Return True if the certificate is a number .
7406	Return True if the value is a boolean .
7407	Return True if the given type is a binary value .
7408	Generate Key for a template .
7409	GenerateKeyPair for templatePub and templatePriv .
7410	Search for objects in a template .
7411	Inserts an image into the icon box .
7412	Export a panel .
7413	Returns the first occurrence of the given weekday .
7414	Return the number of days to repeat for the given day .
7415	Repeats the events between start and end .
7416	Populate self . count and self . start_end_diff .
7417	Handles a single chunk of events .
7418	Export a list of variants for a given collaborator .
7419	Export a list of verified variants for each sample .
7420	Export a list of variants for a given sample_id .
7421	Add role to user .
7422	Returns a list of variants for the given institute and case .
7423	This interface is used to create a new variant .
7424	Returns a string representation of a variant .
7425	Verify a variant .
7426	Export an open clinvar submission .
7427	Returns a list of cancer variants for the given case .
7428	Create an acmg for a variant .
7429	Create a new evaluation .
7430	Return a JSON representation of the classification criteria .
7431	Upload panel .
7432	Download a verified excel file .
7433	Given a list of HGNC genes return a dictionary of genes by their alias .
7434	Add incomplete penetrance info for all genes .
7435	Link HGNC genes to HGNC .
7436	Send a matchmaker request .
7437	Get a list of all connected MME nodes .
7438	Get coordinates for a cytoband position .
7439	Return the subcategory for the given ref_len .
7440	Return the length of a string .
7441	Get the end position for a variant or indel .
7442	Parse coordinates from a variant .
7443	Parse a cytoband file .
7444	Update an existing panel .
7445	Update a panel .
7446	Export a panel .
7447	Edit an existing gene .
7448	Save delivery report to case .
7449	Return a dictionary of HPO terms .
7450	Runs scout view users
7451	Builds a phenotype .
7452	Return a dictionary of HGNC gene data .
7453	Convert a query to a list of JSON terms .
7454	Show all institutes .
7455	Show transcripts .
7456	Display day events for a given month .
7457	Returns a list of variants for the given query .
7458	Retrieve a list of variants for the given institute .
7459	Create a str variant .
7460	Return a Variant object for the given variant_id .
7461	Parse a single variant .
7462	Return the header for the VCF file .
7463	Given a list of genes return a dictionary of information about the genes .
7464	Return a dictionary of Sift predictions for a list of genes .
7465	Populate the case object for the given variant_obj .
7466	Find the BAI file for a bam file .
7467	Return a dictionary of observations for a given variant object .
7468	Parse a gene object into a list of transcript objects
7469	Return a string representation of a transcript object .
7470	Return the end position of the given variant object .
7471	Return the frequency of a variant object .
7472	Return a list of clinsig objects for the given variant object .
7473	Generates a link to the exposure database for the given variant object .
7474	Returns the URL to link to the cosmic .
7475	Returns a link to the beacon network .
7476	Link to the USC genome .
7477	Return the spidex of a variant object .
7478	Returns a list of the expected inheritance models for the given variant object .
7479	Return a list of callers for the given variant object .
7480	Retrieve cancer variants for a given institute and case .
7481	Export a copy of a variant .
7482	Returns a JSON representation of a submission .
7483	Create an ACMG for a variant .
7484	Submit Evaluation for a variant .
7485	Create a new evaluation object .
7486	Upload HGNC symbols to a panel .
7487	Create an Excel file containing a list of verified variants for each customer .
7488	Export all genes in . bed format .
7489	Parse clnsig and revstat transcripts .
7490	Parse the compound_info into a list of dictionaries .
7491	List all genes for a build .
7492	Build a Pedigree object from a Pedigree object .
7493	Load variants for a given instance .
7494	Get a case .
7495	List all collections .
7496	Load an institute .
7497	Updates an institute .
7498	Return a file handle for the given file path .
7499	Get the net of a request .
7500	Returns the next and previous value of a network .
7501	Check if the year is in the range of 0 - 50 .
7502	Check the weekday of a date .
7503	Parse case data from a PED file .
7504	Read the peddy_ped . peddy_ped . peddy_ped_check .
7505	Parse a sample into a dictionary .
7506	Parse a list of samples into a list of individuals .
7507	Parse a case into a dictionary .
7508	Parse a ped file into a list of samples .
7509	Build an evaluation object for a given variant .
7510	Export Mitochondrial variants for the given test .
7511	Return True if the pathogenic term is a pathogenic term
7512	Determines whether a pathogenic is likely to be a pathogenic .
7513	Return True if the given terms are likely to be Benign .
7514	Return a list of acmg terms for the given list of terms .
7515	Adds information about all genes and panel genes to the variant object .
7516	Returns a list of variants for the given case .
7517	Return a list of Sanger variants for the given institute and case .
7518	Search for a variant in a case .
7519	Returns a list of all variants for the given category .
7520	Returns a list of Variant objects that have been verified for the given institute .
7521	Return a list of all causatives for the given institute .
7522	Return a list of causatives for the given institute_obj .
7523	Return all other causatives for the given variant_obj .
7524	Delete all variants for a given variant type .
7525	Returns a list of variants that overlap with the given variant object .
7526	Get all variants that have been evaluated in some way for a case .
7527	Get the VCF file for a region .
7528	Retrieve variants for the given sample .
7529	Establish a connection to MongoDB .
7530	Return a list of submission objects for a list of variants .
7531	Returns a dictionary containing a header for each of the submission objects .
7532	Return a list of comma - separated submission lines for the given submission objects .
7533	Load transcripts from a list of transcripts .
7534	Load an omim panel .
7535	Build an exon .
7536	Delete a panel .
7537	Delete all indexes for all collections
7538	Delete user from database
7539	Drops all genes for a build .
7540	Delete all exons for a build .
7541	Delete a case .
7542	List all individuals that match the criteria .
7543	Parse a list of match objects for a given patient .
7544	Show all cases for a given institute .
7545	Load a user by email address .
7546	Login to Google .
7547	Build an instance of Institute with the given display name .
7548	Delete an event .
7549	Create an event .
7550	Return all events for the given institute .
7551	Return a list of all events for a user .
7552	Adds a phenotype to a case .
7553	Removes a phenotype from a case .
7554	Create an event for a comment .
7555	Parse a list of genotypes in the given variant .
7556	Check if the chromosome and pos are in the given coordinates .
7557	Search for HPO terms .
7558	Export transcripts .
7559	Load all exons for a build .
7560	Load a region .
7561	Return a queryset of all events for a given month .
7562	Return a queryset of events that have expired since now .
7563	Parse requirements from a requirements . txt file .
7564	Return the HGNC_ID of an existing gene .
7565	Update a panel .
7566	Create a new panel .
7567	Export a panel into a dictionary .
7568	Return information about the archive .
7569	Add collaborators and assignees to scout_case .
7570	Migrate an archived archive .
7571	Runs a scout load research .
7572	Load HGC genes .
7573	Search for HPO terms .
7574	Create a Flask application .
7575	Initializes extensions for the given application .
7576	Register blueprints .
7577	Configures the application to be used for coverage reports .
7578	Runs scout view aliases for the given symbol
7579	Build a panel from a panel_info dict .
7580	Export the verified variants for the given collaborator .
7581	Export variants .
7582	Returns a VCF entry for the given variant object .
7583	Serve a connection to mongod .
7584	Generate an md5 key from a list of arguments .
7585	Initializes the application .
7586	Sets up the collection for the database
7587	Run scout index .
7588	Setup an omim database
7589	Setup the demo database .
7590	Connect to the database .
7591	List institute objects .
7592	Parse a list of genetic models .
7593	Show panels for an institute .
7594	Add an institute to the database .
7595	Updates an institute .
7596	Fetch an institute .
7597	Check if a date is valid .
7598	Converts a date to a datetime object .
7599	Export hpo genes .
7600	Parse a rank score entry into a float .
7601	Create a new user .
7602	Check connection .
7603	Initializes the application .
7604	Load delivery report for a case .
7605	Add a user to the database .
7606	Use the pileup genome .
7607	Load exons from a list of exon lines .
7608	Update compounds for a case .
7609	Add links to the gene object .
7610	Run HGNC on a symbol or hgnc id .
7611	Parse a GGNC line into a dictionary .
7612	Parse HGNC genes from a list of lines .
7613	Get an open clinvar submission for a user and institute .
7614	Updates a submission .
7615	Get the id of the submission with the given id .
7616	Add new variants and case data to a submission .
7617	Update the status of a clinvar submission .
7618	Get a list of all clinvar submissions for a user and institute .
7619	Removes a casedata object from the submission object .
7620	Converts a case to a dictionary of CLINVars .
7621	Parse a list of HPO terms .
7622	Get a list of all genes .
7623	Return a list of genes for the given symbol .
7624	Return a JSON representation of the genes .
7625	Checks that the given panels exist in the database .
7626	Load clinical SNV variants for a region .
7627	Load the scout from the database .
7628	Decorator to render a template .
7629	Check if the user has access to the institute and case .
7630	Return a list of institutes for the given login user .
7631	Return the HGC ID for the given gene_info .
7632	Updates a panel .
7633	Load all disease terms .
7634	Load hpo disease terms from a list of hpo diseases .
7635	Parse frequency data from a list of transcripts .
7636	Parse the frequency of an annotation .
7637	Parse the SV Frequencies for a variant .
7638	List all users .
7639	Build HGC gene .
7640	Loads a panel from a parsed panel .
7641	Load Omim panel .
7642	Compares two mim panels .
7643	Update versions for new genes .
7644	Adds a panel to the database .
7645	Returns the panel with the given id
7646	Delete a panel .
7647	Fetch a gene panel from the database .
7648	Returns a list of panel objects for the given panel_id and institute_id
7649	Given a case object and a dictionary of panel IDs for each gene .
7650	Updates a panel .
7651	Add a pending action to a panel .
7652	Apply pending transcripts to a panel object .
7653	Return a list of all clinical symbols associated with the given case object .
7654	Returns a list of cases for the given case_id .
7655	Sends a record to the SMTP server .
7656	Load all indexes for the given collection .
7657	Update all indexes .
7658	Drops all indexes for all collections .
7659	Builds a mongo query for the given query .
7660	Builds a mongo query for the given query .
7661	Query for clinsig .
7662	Adds genomic coordinates to the query
7663	Adds hgnc_symbols and gene_panels parameters to the query .
7664	Wipe the whole database
7665	Parse a panel from a CSV stream .
7666	Build a clnsig object from a dict of clnsig info .
7667	Load gene objects in bulk .
7668	Load all transcript objects in bulk .
7669	Load exon objects into the database .
7670	Fetch a gene object for the given HGNC identifier .
7671	Return the HGC ID for the given symbol .
7672	Fetch all genes for a symbol .
7673	Fetches all genes for a build .
7674	Return the number of genes for a build .
7675	Drops the hgnc_gene collection .
7676	Drops the transcripts collection .
7677	Drops the exons collection .
7678	Fetch all ensembl transcripts for a build .
7679	Convert hgncsymbol to gene .
7680	Search gene by alias .
7681	Fetch all genes by alias .
7682	Fetch all ensembl genes .
7683	Convert gene to HGNC symbol .
7684	Adds hgnc_id to each gene in the result .
7685	Get the coding intervals for each chromosome .
7686	Update omim .
7687	Get all cases for the given institute .
7688	Returns a case object for the given institute .
7689	Get MME matches for an instance and case .
7690	Sends a matchmaker match request to matchmaker .
7691	Delete a matchmaker .
7692	Displays a case report .
7693	Create a PDF report for a case .
7694	View function to add a diagnostic to a case .
7695	Add a new phenotype to a case .
7696	Delete a list of phenotypes .
7697	Create a new event for the given institute .
7698	Updates the status of a case .
7699	Assign an instance to a case .
7700	Return a list of HPO terms .
7701	Marks a validation for a variant .
7702	Marks a variant as causative .
7703	Get delivery report for an analysis .
7704	Share a case .
7705	Re - launch a new ticket .
7706	Search for a case .
7707	Sends a vcf2cytosure attachment to an individual .
7708	Create a multiqc for a case .
7709	Return a dictionary of cases for the given query .
7710	Populate the case report content .
7711	Return the contents of a coverage report .
7712	Return a list of submissions for the specified user and institute .
7713	Returns a list of Excel files for each variant in the given case .
7714	Updates the synopsis for the given case .
7715	Return a list of diseases for a list of HPO terms .
7716	Convert VCF to cytosure .
7717	Create a multiqc query .
7718	Get a list of variants with Sanger ordered grouped by case .
7719	Add a new MME to the given user object .
7720	Send DELETE request to matchmaker server .
7721	Returns a list of match objects for the given instance .
7722	Perform a MME match request .
7723	Runs scout update genes and transcripts .
7724	Parse the callers for a variant .
7725	Build a transcript .
7726	Load an institute into the database .
7727	Parse CADD and CADD_PHRED transcripts .
7728	Parse the case data from a vcf file .
7729	Update a single variant .
7730	Update the variant rank for all variants .
7731	Update the compounds of a variant .
7732	Updates the compound objects for the given variants .
7733	Update compounds for a collection of compound variants .
7734	Update compounds for a case .
7735	Loads a variant from the database .
7736	Inserts a variant into the database .
7737	Load multiple variants into the database .
7738	Assign an instance to a user .
7739	Share a case with collaborator .
7740	Diagnosis genes and genes .
7741	Marks the case as checked .
7742	Order verification for a variant .
7743	Get all sanger variants grouped by case_id and user_id
7744	Validate a variant .
7745	Mark a variant as causative in a case .
7746	Update the dismiss variant for a variant .
7747	Update the ACMG for a variant .
7748	Parse the ids for the given chrom pos reference and alt .
7749	Parse a simple identifier .
7750	Parse a document identifier .
7751	Convert hgnc_id disease_associated_transcripts disease_associated_transcripts disease_associated_transcripts .
7752	Return the ID for the given variant object .
7753	Returns the number of cases in the database .
7754	Update dynamic gene list .
7755	Fetch a case .
7756	Delete a case .
7757	Add a case to the database .
7758	Replace a case with a new one .
7759	Update the case id with the given family id .
7760	Submit an evaluation .
7761	Returns a list of Evaluations for the given variant object .
7762	Parse a list of transcripts into a dictionary .
7763	Parse ensembl gene request .
7764	Parse ensembl transcript request .
7765	Parse an ensembl line into a dictionary .
7766	Parse ensembl genes from a file .
7767	Parse ensembl exons .
7768	Parse ensembl exon request .
7769	Initializes the log .
7770	Parse an omim line into a dictionary .
7771	Parse anomimmorbid file .
7772	Return a dictionary of all phenotypes that are present in a genemap file .
7773	Runs MimTitles on the given files .
7774	Convert a number to an integer or float .
7775	Formats a month .
7776	Format day and weekday .
7777	Format month name .
7778	Populate the calendar .
7779	Get panel information from a list of lines .
7780	Parse HGC gene info .
7781	Parse a list of genes from a list of lines .
7782	Parse a gene panel .
7783	List all diseases .
7784	Dropping HPO terms .
7785	Return a dictionary of users and events .
7786	Parse a variant into a dictionary of conservation objects .
7787	Returns a list of Conservation objects for the given info key .
7788	Get the general case information for the given institute .
7789	Return a list of cases grouped by status .
7790	Render the context to a JSON response .
7791	Returns a year and month for the given year and month .
7792	Checks for cancelled events for the given date .
7793	Fetch a HPO Term by ID .
7794	Search HPO terms .
7795	Search for a disease term by identifier .
7796	Fetch all disease terms for the given hgnc_id .
7797	Load a disease term into the database .
7798	Generate a list of genes for a list of hpo terms .
7799	Read data from an HDF5 file .
7800	Setup the frequency axis .
7801	Setup time axis .
7802	Read the filter bank .
7803	Computes the longitude and latitude of the last longitude and latitude of the telescope .
7804	Blank DC bin .
7805	Print information about the data file .
7806	Calculate the extent of the time series .
7807	Plots waterfall data .
7808	Plot time series .
7809	Write the filter bank to a file .
7810	Calrate band pass N1 .
7811	Convert data to coarse .
7812	Apply Mueller to data arrays .
7813	Calculate differential gain and phase from noise diode data .
7814	Return the fracpols of a string .
7815	Write Polefiles to a file .
7816	Find the index of the closest value to xarr .
7817	Re - bin a 2D array .
7818	Unpack data into nbit bytes .
7819	Calculate difference between two diode data .
7820	Plots the stokes of a diode .
7821	Plots the Mueller matrix for each coarse channel .
7822	Plots the gain and phase offsets for the noise diode .
7823	Open a file .
7824	Setup the selection range .
7825	Calculate the number of integrations and frequency channels requested .
7826	Calculate the number of integrations and number of frequency channels requested .
7827	Setup the channels and start and stop channels .
7828	Set the start and stop frequencies for the channel .
7829	Populate the time axis of the file .
7830	Populate the frequency array for each channel .
7831	Calculate the number of channels that have coarse channelization .
7832	Calculate the number of blobs .
7833	Check if the data array is heavy .
7834	Read data from file .
7835	Read all data from the file .
7836	Read a single row from the file .
7837	Read data from the container .
7838	Updates the header .
7839	Print information about the file .
7840	Write data to a file .
7841	Write data to HDF5 file .
7842	Write data to HDF5 light file .
7843	Returns the number of blobs in the time bin .
7844	Return the number of channels per single band .
7845	Grab the data for this plot .
7846	Create spectra from GuppiRaw files .
7847	Read the first header of the file .
7848	Find the number of data blocks in the file .
7849	Print statistics about the data block .
7850	Plot the histogram of the next data block .
7851	Generates the header for a filter bank .
7852	Find the size of the header of a file .
7853	%prog matchfils file1 file2
7854	Command line utility for creating HDF5 Raw files .
7855	Fold Calculation .
7856	Integrates the spectra of a Waterfall .
7857	Calculate the calfluxes for the given spec_in .
7858	Calculate the center frequency for each channel .
7859	Calibration function to calculate the f_ratios between two time series .
7860	Calculate the diode spectrum for the given frequency range .
7861	Return a diode spec object .
7862	Find Jy and count for each diode spectrum .
7863	Return the length of the header of a file .
7864	Check if the file is a filter bank file .
7865	Replace header data with a new value .
7866	Generates the header for a sigproc file .
7867	Convert angle_val to sigproc angle .
7868	Calculate the number of integers in a file .
7869	Return a dictionary representation of the traceback .
7870	Create a RR subparser .
7871	Create a Zonefile line parser .
7872	Removes comments from text .
7873	Adds a default name to the given text .
7874	Parse a single line .
7875	Parse a JSON zone file from a string .
7876	Parse a zone file from a string .
7877	Returns a copy of the data with the given field replaced with ; .
7878	Parse a schema string into a schema object .
7879	Converts a list of classes to a package .
7880	Return a class source for a schema .
7881	Decorator to disable auto - register .
7882	Convert a record to a JSON compatible dictionary .
7883	Load a DCT from a dictionary .
7884	Load a json record from a string .
7885	Add a schema to the registry .
7886	Get the schema for a record name .
7887	Return a dictionary representation of the variable .
7888	Create a mixin from a mixin class .
7889	Return a new instance of cls from the given metacls .
7890	Return a schema dictionary for the given record .
7891	Return the root schema for the given record .
7892	Yields a generator for each line in the input stream .
7893	Writes a list of outputs to output_stream .
7894	Push a value to the front of a dictionary .
7895	Get a search query string .
7896	Get a raw filter for this search .
7897	Return a list of Entity objects that include the given attributes .
7898	Return Entity object from href .
7899	Return another quote .
7900	Escape a string for filtering .
7901	Return the elementary rotation matrix for the given axis
7902	Constructs the covariance matrix for the given vector .
7903	Calibration Error Sky Average .
7904	Calculate parallax error .
7905	Return the magnitude error of G .
7906	r G Magnitude Error EoM .
7907	Make a plot from a dictionary .
7908	Calculate the average number of transits in beta .
7909	Calculate angular distance between two quaternions .
7910	Transform cartesian coordinates to cartesian coordinates .
7911	TransformSky coordinates to spherical coordinates .
7912	Transform the covariance matrix .
7913	Return the error scaling factor for the given beta .
7914	Make a plot of the sptVabsAndVmini distribution .
7915	Make a plot of the VradErrorSkyAvg model
7916	Returns a function that applies the given functions to the given value .
7917	Decorator to helpful failure .
7918	Converts a string to a unicode string .
7919	Apply a function to each element in the collection .
7920	Return a new QuerySet with elements not matching the given function .
7921	Apply a function to each item in the collection .
7922	Apply a function to each element in the collection .
7923	Removes all elements from the collection that match the given function .
7924	Return a new Collection with all elements in self and all elements in others .
7925	Searches for the given criteria .
7926	Return the path to the iaca binary .
7927	Yields sequences and digits from a group .
7928	Yields the options for the given regdescr .
7929	Return a string representation of an event tuple .
7930	Build a list of runs for the given events .
7931	Report the results to the output file .
7932	Report the performance of the Roofline model .
7933	Print results to output_file .
7934	Remove comments macros and pragmas from code .
7935	Round x to a given base .
7936	Return a list of blocking blocks .
7937	Calculates the cache access .
7938	Calculate the number of cycles per cacheline .
7939	Analyze the kernel .
7940	Analyze the IACA block .
7941	Strip comments and whitespaces from a list of asm lines .
7942	Strip unreferenced labels from a list of asm lines .
7943	Select the best block for the given list of blocks .
7944	Ask the user to increment the number of bytes .
7945	Print the user - selected block .
7946	Insert markers between start_line and end_line .
7947	Instrumentation for iaca assembly .
7948	Find and analyze basic loop blocks .
7949	Simulate the kernel .
7950	Yields a number of integers between start and stop .
7951	Returns the last modified datetime for all files in the directory .
7952	Check that the arguments are valid .
7953	Main entry point for the parser .
7954	Merge two or more pickle files .
7955	Return a positive integer symbol .
7956	Transform multidimensional array decl to 1 - dimensional array decl .
7957	Transform multidim to 1D reference .
7958	Return a list of nodes of the given type .
7959	Decorator to force a function to return an iterable .
7960	Check that all datatypes in the kernel are supported .
7961	Set a constant .
7962	Subtracts the constants from the given expression .
7963	Return a dictionary of array sizes .
7964	Calculate the relative offset of a variable .
7965	Removes duplicate accesses .
7966	Return the length of the current iteration .
7967	Return a dict of the current loop stack .
7968	Return a list of free symbols for the given sources and destinations .
7969	Return a dictionary of all sympy accesses for the given variables .
7970	Computes the relative distances between all the variables in the symbol .
7971	Converts the global iterator to a list of indices .
7972	Return the global iterator for the current symbol .
7973	Convert a list of indices to a global iterator .
7974	Returns the iterator for the maximum global iteration .
7975	Print kernel information .
7976	Print information about the variables .
7977	Print the constants information .
7978	Print the kernel code .
7979	Converts a c_ast to a sympy . Symbol .
7980	Return a list of offsets for the given AST .
7981	Return the base name of the reference .
7982	Return the type of the loop index .
7983	Return a list of declartions for the const variable .
7984	Return a list of array declarations .
7985	Returns the number of for statements in kernel .
7986	Builds the array declarations from the kernel .
7987	Find the innermost loop .
7988	Return a copy of the innermost for loop .
7989	Build a list of dummy calls .
7990	Builds a kernel function declaration .
7991	Build scalar declarations from kernel AST .
7992	Return the code for the kernel .
7993	Build a kernel call .
7994	Return the code for the main function .
7995	Perform an iaca analysis for the given micro architecture .
7996	Build executable .
7997	Converts a string to a sympy expression .
7998	Return a unique identifier for this path .
7999	Gets the modification time of the file .
8000	Return a dictionary of all shared caches .
8001	Return the bandwidth of the benchmark .
8002	Return compiler and flags from machine description file .
8003	Parse a perfctr event .
8004	Enforce no overlap between start_at and end_at .
8005	Return the path to the header file .
8006	Align an iteration to a cl boundary .
8007	Return the number of loads for each cache level .
8008	Return the number of hits for each cache level .
8009	Return the number of misses for each cache level .
8010	Return the number of stores .
8011	Return the number of EVICTs for each cache level .
8012	Return a dictionary of all cache infos for this machine .
8013	Context manager to fix environment variables .
8014	Configure the arggroup .
8015	Report results to output_file .
8016	Parse README . md from README . md .
8017	Schedules retry for the given config .
8018	Builds a purchase item for a course .
8019	Record an item in Sailthru .
8020	Get course content .
8021	Get course content from ecommerce API .
8022	Updates the unenrolled list for a user .
8023	Sends a course refund notification to an email address .
8024	Sends an offer assignment notification .
8025	Return the logging configuration for this service .
8026	Retry an order .
8027	Fulfillment of an order .
8028	Get a Sailthru client for a site .
8029	Get a value from the cache .
8030	Set a cache object .
8031	Get a configuration variable from the specified module .
8032	Gets the filename of the given environment variable .
8033	Return a value by version .
8034	Return the most recent energy plus version .
8035	Return a dictionary of file references .
8036	Populate data from json data .
8037	Returns a list of external files .
8038	Set the default values for all tables .
8039	Prepare extensible field descriptors .
8040	Get the extended name of the field at the given index .
8041	Return a dictionary of the short references for all external references .
8042	Get the value of a column based on a filter .
8043	Updates the value at the given index .
8044	Update an existing record .
8045	Set the default values for each field .
8046	Add fields to the record .
8047	Pop a value from the index .
8048	Insert a value into a pop index .
8049	Delete this record from the database .
8050	Register a record hook .
8051	Register a link .
8052	Create a regex for the given line and intent name .
8053	Return the remaining duration for the given time .
8054	Serializes the event to a dictionary .
8055	Make an HTTP request to a URL .
8056	Returns a list of endpoints for a given service type .
8057	Try to create a directory .
8058	Configures the given service .
8059	Set the agent s state to idle .
8060	Set the recording state .
8061	Update the status of an event .
8062	Update agent state .
8063	Return the path to the configuration file .
8064	Update the configuration from a configuration file .
8065	Check if the server is in secure mode .
8066	Initializes the logger .
8067	Return a list of all available preview images .
8068	Serve a preview image .
8069	Run all the modules .
8070	Parse a vcal file .
8071	Get schedule for a given agent .
8072	Wait for the service to terminate .
8073	Wait for the agent to terminate .
8074	Makes an error response .
8075	Create a data response for a data set .
8076	Return the internal state of the service .
8077	Return a list of serialized events .
8078	Return event with specified uid .
8079	Delete an event .
8080	Modify an event .
8081	Returns a list of parameters for the given properties .
8082	Create a new media package for the given event .
8083	Start recording .
8084	Render the page to a fragment .
8085	Return a list of resources .
8086	Converts the resource to a dictionary .
8087	Create a Fragment from a dictionary of pods .
8088	Adds the given content to the response .
8089	Add a fragment resource .
8090	Add a resource .
8091	Initializes js_func with json_args
8092	Converts the resources to HTML .
8093	Convert a resource to HTML .
8094	Renders a response to a GET request .
8095	Renders the response as an HTML fragment .
8096	Render a fragment to an HTML fragment .
8097	Calculate pFDR and qvalues from a list of pvalues .
8098	Convert values to one dimension array .
8099	Return pvalue svalue and qvalue from an error table .
8100	Calculate posterior chromatogram hypotheses .
8101	Create a new error table that is a subset of the input dataframe .
8102	Create a summary error table from the given dataframe .
8103	Compute error statistics for target and decoy scores .
8104	Calculates the cutoff of the error statistcs .
8105	Runs the model on the input file outfile .
8106	Inferent peptidoforms .
8107	Inference of peptide .
8108	Infer proteins from an input file .
8109	Subsample an Osid file .
8110	Reduce the contents of infile to the contents of outfile .
8111	Backpropagate a file and write it to outfile .
8112	Filter a list of sqmass files .
8113	Get a group by id .
8114	Create a group .
8115	Delete a group .
8116	Returns a list of members of a group .
8117	Updates the members of a group .
8118	Get effective member count for a group .
8119	Checks if a user is an effective member of a group .
8120	Modify Sphinx conf . py .
8121	Create an HDF5 dataset .
8122	Decrypts the contents of a key .
8123	Return the stdin object .
8124	Return the output of the sub - command .
8125	Get stderr output .
8126	Get the debug output .
8127	Context manager to open stdin .
8128	A context manager that yields the output of the sub - command .
8129	Return a context manager for the stderr .
8130	A context manager for debugging .
8131	Empty an account .
8132	Empty container .
8133	Decorator to wrap a function that writes to stdout .
8134	Decorator that writes a message to stderr .
8135	Write an error message to a file .
8136	Print help .
8137	Print usage information to file .
8138	Print version information to file .
8139	Make a request to the server .
8140	Create a new account .
8141	Delete an account .
8142	Updates an existing container .
8143	Returns a response to the HEAD request for the given object .
8144	Get an object from a container .
8145	Updates an object .
8146	Create a new object in a container .
8147	Resolves an option with the given name .
8148	Return a copy of this CLIContext .
8149	Write headers to file .
8150	Authenticate a client .
8151	Generate a temporary URL .
8152	Converts a value to a quote .
8153	Gets a list of containers for a given path .
8154	Get a client from the pool .
8155	Encrypt data using AES256CBC algorithm .
8156	Decrypt an AES 256 - CBC encrypted stream .
8157	Upload a directory structure to a directory structure .
8158	Update an existing account .
8159	Put a container at the given path .
8160	Returns the manifest body for the given path .
8161	Create a new container for a given path .
8162	Create a temporary URL .
8163	Create a new trans .
8164	Print help for a command .
8165	Check if the stream is empty .
8166	Encrypt a key using AES256CBC .
8167	Get the status for a given SHA .
8168	Get information about a pull request
8169	Returns a list of pull requests for the given repo .
8170	Mark all slider items as published .
8171	Return a list of slider items published to the current user .
8172	Renders a hero slider .
8173	Acquires the lock for the reader .
8174	Release the reader .
8175	Acquires the write lock .
8176	Add a task to the registry .
8177	Remove a task from the registry .
8178	Get the task with the given id .
8179	Return a list of all tasks .
8180	Return a dictionary representation of this class .
8181	Create a Task instance from a dictionary .
8182	Execute a Perceval job .
8183	Initializes the archive manager .
8184	Run the query .
8185	Executes the fetch_from_archive method
8186	Create an elasticsearch index .
8187	Create a mapping .
8188	Return a JSON encoder for a request .
8189	Write items to writer .
8190	Adds a task to the scheduler .
8191	Remove a task from the scheduler .
8192	Get all items in the queue .
8193	Raise an error if the arguments are not valid .
8194	Parse the arguments for the archiving task .
8195	Perform a job on a queue .
8196	Schedule a job task on a queue .
8197	Cancels a job task .
8198	Runs the job listener .
8199	Listen for jobs .
8200	Starts the scheduler .
8201	Schedule a task in - progress job .
8202	Cancels a task .
8203	Handles a successful job .
8204	Handles a failed job .
8205	Builds the job arguments for a task .
8206	Get a secret from the secrets directory .
8207	Register a view .
8208	Decorator to register a view .
8209	Reverse action .
8210	Return the name of the view .
8211	Returns the version number for the given version .
8212	Resolves the given key from the given cursor .
8213	Return a django - bananas . url . Django - bananas . url . Django - bananas . url .
8214	Parse a path into a database and schema .
8215	Convert a database URL to a dictionary .
8216	Parse a database url into a DatabaseInfo .
8217	Create a new user .
8218	Return a list of users .
8219	Create a new password .
8220	Builds a url field for a given model class .
8221	Parses a boolean value .
8222	Converts a string to an integer .
8223	Return a parser for the given type .
8224	Return a dictionary of django settings .
8225	Create a dictionary from a model .
8226	Converts a base64 encoded string to a base64 encoded string .
8227	Create a field based on field_info .
8228	Create a validator from a dictionary .
8229	Computes the cartesian product of a dictionary .
8230	Find unique points in explored_parameters .
8231	Change the logging kwargs .
8232	Wrap a function with a simple logging configuration .
8233	Try to create directories for a log config file .
8234	Returns a list of strings for the given arguments .
8235	Renames a log file .
8236	Sets the logger .
8237	Extract replacements from the given trajectory .
8238	Shows the progress of the run .
8239	Check and replace parser args .
8240	Convert a parser object to a string io object .
8241	Find multiproc_ options for the given parser .
8242	Helper function to find multiproc dictionary from a dictionary
8243	Check if log_config is set .
8244	Handles config parsing .
8245	Handles a dictionary of log_config .
8246	Create the logging handlers and tools .
8247	Finalize all tools .
8248	Starts the Python interpreter .
8249	Write the contents of the given buffer to stderr .
8250	Return True if two inputs are the same .
8251	Return True if two parameters are equal .
8252	Decorator to run a function in a Traj environment .
8253	Mark a function as deprecated .
8254	Decorator for mutually exclusive parameters .
8255	Decorator to change keyword arguments of a function .
8256	Retry a function .
8257	Class decorator for prefix naming .
8258	Add parameters to the trajectory .
8259	Runs the network on the given trajectory
8260	Compute the Euler scheme for the given trajectory .
8261	Adds parameters to the given trajectory .
8262	Calculates the difference between two lorenz values .
8263	Create an instance of the storage service .
8264	Factory function to create an HDF5 storage service .
8265	Add parameters to the given trajectory .
8266	Calculates the difference between two roessler values .
8267	Compact HDF5 file .
8268	Explored parameters in group .
8269	Builds the model equations for the given trajectory .
8270	Pre - build the model .
8271	Build the model .
8272	Build the model for the given trajectory .
8273	Pre - build connections .
8274	Builds the brian list .
8275	Add Brian2 parameters to the given trajectory .
8276	Compute the fano factor for the given time window .
8277	Compute the mean fano factor for a list of neuron ids .
8278	Analyze sub - sub - sub - sub - subruns .
8279	Add the sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub - sub sub - sub - sub - sub - sub - sub - sub
8280	Adds the state monitors to the network .
8281	Create a folder for the given trajectory
8282	Plots the result for the given result_name
8283	Print the graphs for the given trajectory .
8284	Make four neurons from 2 clusters .
8285	Get batch number from command line arguments
8286	Explore a batch of data .
8287	The NNTreeNodeVars associated with this node .
8288	Return a NNTreeNodeFunc for this node .
8289	Renames the field with the full name .
8290	Sets _depth and _run_branch .
8291	Convert a node to a pypet constants .
8292	Removes a sub - tree .
8293	Delete a node from the root .
8294	Removes a node or leaf from the tree .
8295	Removes the node identified by split_name .
8296	Translates a shortcut .
8297	Add a prefix to a list of split names .
8298	Determine the type of the node .
8299	Helper function to add a generic object to a group .
8300	Add a new node to the tree .
8301	Create a link .
8302	Checks that the names of the split names are valid .
8303	Create a new group node .
8304	Create a new parameter or result .
8305	Sets the details of a child node .
8306	Iterate over the nodes of the graph .
8307	Create a child iterator for the given node .
8308	Recursively traverse the bfs of a node .
8309	Perform a very fast search on a node .
8310	Searches the tree for the given key .
8311	Backwards search for the given split name .
8312	Return a list of NNTreeNodeKids .
8313	Adds a new group to the storage .
8314	Add a leaf to the storage .
8315	Return a list of all directory data for this node .
8316	Return a debug representation of the tree .
8317	Return the parent of this node .
8318	Add a new group .
8319	Add a link to a group .
8320	Removes a link .
8321	Add a leaf group .
8322	Removes this child from its parent .
8323	Removes a child .
8324	Checks if an item is contained in the trajectory .
8325	Returns the default value for the given key .
8326	Returns a list of all children of this node .
8327	Return a list of group objects .
8328	Returns a list of all leaf nodes .
8329	Returns a list of links .
8330	Store a child of this node .
8331	Store the trajectory in a file system .
8332	Load a child of this node .
8333	Load data from a file .
8334	Add a new parameter group .
8335	Add a new parameter group .
8336	Add a new result group .
8337	Add a new result group .
8338	Adds a derived parameter group .
8339	Add a derivative parameter .
8340	Add a new config group .
8341	Add a new configuration group .
8342	Evaluate the maximum fitness of the given set of individual .
8343	Add commit variables to the given commit .
8344	Create a git commit for the given environment .
8345	Flatten a nested dictionary .
8346	Converts a flat dictionary into a nested dictionary .
8347	Create a progress bar .
8348	Returns a list of positional and keyword arguments for the given function .
8349	Return a dictionary of kwargs that match the given function .
8350	Converts a timestamp to a string .
8351	Convert a port number to a TCP socket .
8352	Raise IOError if path is already a directory .
8353	Resets the index to the given value .
8354	Return the remaining time for the given index .
8355	Convert a function to a dictionary .
8356	Removes a key from the dictionary .
8357	Convert a Fann object to a string .
8358	Create an ordinary result for the given key .
8359	Create a shared result for the given key .
8360	Create shared data .
8361	Request data for this trajectory .
8362	Gets the data node associated with this store .
8363	Return True if the item is supported .
8364	Create shared data .
8365	Manipulate the data in the trajectory .
8366	Attempt to re - acquire a lock .
8367	Send the shutdown signal to the server .
8368	Terminate the socket and context .
8369	Starts the client .
8370	Send a REP request to the server .
8371	Acquire lock .
8372	Listen to the server .
8373	Put data into the queue .
8374	Detect whether the process is a fork .
8375	Handles data messages .
8376	Receive data from the storage and handle it .
8377	Receive data from queue .
8378	Receive data from the socket .
8379	Store the given arguments to the storage .
8380	Store a copy of stuff_to_store into self . references .
8381	Store a list of references in memory .
8382	Decorator to parse config data from . ini file .
8383	Return a dictionary of the given section .
8384	Return a dictionary of configuration parameters for the storage service .
8385	Interpretation of kwargs .
8386	Add parameters to the trajectory .
8387	Convert a rule number to a binary rule number .
8388	Return the initial state for the given name .
8389	Plots the given pattern and rule number .
8390	Returns the cellular automaton for the given rule number .
8391	Runs all of the experiments .
8392	Update the number of nodes to be processed .
8393	Gets the overview group .
8394	Load the contents of stuff_to_load .
8395	Stores stuff_to_store .
8396	Load several items from an iterable .
8397	Check HDF5 properties .
8398	Store the several items from an iterable .
8399	Close the underlying HDF5 file .
8400	Extract file information .
8401	Backup a trajectory .
8402	Helper function to read a row into a dictionary .
8403	Prepare merge data into the run table .
8404	Load meta data for the given trajectory .
8405	Load a sub - branch of the given node .
8406	Raise an exception if the version of the trajectory is not consistent .
8407	Fills the run table for the given traj .
8408	Load exploration .
8409	Store explorations for the given trajectory .
8410	Create an overview table from a list of tables .
8411	Stores the given trajectory .
8412	Store a sub - branch .
8413	Create an instance of the leaf .
8414	Load all the nodes of the given parent_traj node .
8415	Create a new hdf5 file for each node in the tree .
8416	Search for an entry in a table .
8417	Get or create a table based on where and description .
8418	Returns the node with the given name .
8419	Sets all attributes of the given data to the given prefix .
8420	Recall native type .
8421	Add or modify a row in a table .
8422	Writes all insert values into a single row .
8423	Extracts a dictionary representation of an HDF5 item into a dictionary .
8424	Cut a string to max_length
8425	Create a new HDF5 group if it does not exist .
8426	Create all HDF5 groups for the given key .
8427	Store all annotations for the given node .
8428	Load annotations from node .
8429	Store data in HDF5 group .
8430	Load a group .
8431	Loads all annotations and comments from the node .
8432	Extract missing flags from data_dict .
8433	Add a summary comment to the overview table .
8434	Add metadata information to the summary overview table .
8435	Helper function for _prm_store_from_dict
8436	Helper function for _prm_store_parameter_or_result
8437	Writes shared array to HDF5 file .
8438	Writes a shared table .
8439	Writes a dictionary to the HDF5 storage .
8440	Writes pandas data to a pandas dataframe .
8441	Writes data into the other array .
8442	Writes data into an array .
8443	Delete a link .
8444	Delete all parameter or result or group .
8445	Writes data into a pytable .
8446	Return a dictionary containing the description of the data .
8447	Return a pandas . col . Col for all values in a column .
8448	Return the length of the longest string in a list of strings .
8449	Recursively load all nodes into a dictionary .
8450	Return a dictionary representing the contents of the given leaf .
8451	Reads shared data from shared node .
8452	Read data from a table or group .
8453	Helper function to read an array .
8454	Load a trajectory .
8455	Create a set name for the given index .
8456	Set the properties of the object .
8457	Add dynamic imports to self . _dynamic_imports .
8458	Set self . _crun and self . _idx .
8459	Iterate over the trajectories .
8460	Shrinks the trajectory .
8461	Sets the default parameter for the given name .
8462	Presets a parameter .
8463	Prepares the experiment for the experiment .
8464	Returns a dictionary of all child nodes of the given run .
8465	Return True if all run information are completed .
8466	Removes explored parameters from disk .
8467	Copies the skeleton from node_out to node_in
8468	Explore all the parameters in the build_dict .
8469	Updates the run information .
8470	Adds information about a single run .
8471	Lock all parameters .
8472	Lock all derived parameters .
8473	Finalize the model .
8474	Load the skeleton .
8475	Load data from a file .
8476	Backup this trajectory .
8477	Makes a dictionary of wildcards to be used in the query .
8478	Merge multiple trajectories into one .
8479	Merge multiple runs into a single run .
8480	Rename full_name from other_trajectory .
8481	Merge derived parameters from other_trajectory .
8482	Merge links between two trajectories .
8483	Merge config from other trajectory .
8484	Merge items from other_trajectory into this one .
8485	Merge the results from other_trajectory into a dictionary .
8486	Migrate the trajectory to a new storage service .
8487	Store the trajectory .
8488	Restores the default value of the model .
8489	Sets the exposure parameters to the given index .
8490	Make a single run .
8491	Returns a list of run names .
8492	Returns a dictionary of run information for the given name or index .
8493	Returns an iterator for each parameter in name_list that matches the given predicate .
8494	Start a run .
8495	Finalize the run .
8496	Set the start time of the run .
8497	Set the finish timestamp of the run .
8498	Construct an instance of the given class .
8499	Return a dictionary from a dictionary .
8500	Finalizes the run .
8501	Return a dictionary representation of the configuration .
8502	Returns a dictionary of the results of the query .
8503	Store items for a trajectory .
8504	Load items from disk .
8505	Removes items from the storage .
8506	Delete links from iterator_of_links .
8507	Removes all children of this node .
8508	Removes items from the trajectory .
8509	Wrapper for _sigint_handling_single_run .
8510	Frozen pool for a single run .
8511	Configures the pool .
8512	Sets the kwargs for the frozen pool .
8513	Process a single run .
8514	Remove old SCOOP data from revolution data .
8515	Run a single instance of scoop .
8516	Configures the logging system .
8517	Configure the niceness of the process .
8518	Run a single run .
8519	Run a single run .
8520	Wraps the main job with a SIGINT handler .
8521	Load a class from a full class string .
8522	Create a class based on a list of dynamic imports .
8523	Return the length of the range .
8524	Return a string representation of the f_val .
8525	Return True if two values are equal .
8526	Return the range of the function .
8527	Explore the parameter .
8528	Expands the range of the parameter .
8529	Checks that all data values in explore_iterable are of the correct type .
8530	Store the data in a dictionary .
8531	Loads the parameter from a dictionary .
8532	Loads the parameter from a dictionary .
8533	Return True if two values are equal .
8534	Return True if data is supported matrix .
8535	Serialize a sparse matrix to a list of strings .
8536	Builds the names for this parameter .
8537	Return a sparse matrix from a list of data .
8538	Loads the parameter from a dictionary .
8539	Return a dictionary of the explored data .
8540	Loads the parameter from a dictionary .
8541	Translates a key .
8542	Converts the f_val to a string .
8543	Convert a function to a dictionary .
8544	Set values in - place .
8545	Return the result of the function f_get .
8546	Set a single result .
8547	Return True if the item is a supported matrix .
8548	Return a dictionary representation of the SparseParameter .
8549	Load data from a dictionary .
8550	Set a single result .
8551	Store the result in a dictionary .
8552	Load data from a dictionary .
8553	Merge all files in folder .
8554	Upload a file to the working directory .
8555	Download a file .
8556	Create and return a session object .
8557	Merge trajectories into a single job .
8558	Start all the jobs .
8559	Multiply two reals .
8560	Runs the neuron on the given trajectory
8561	Postprocess the results of the neuron .
8562	Add parameters to the trajectory .
8563	Adds exploration of I and tau_ref to the trajectory
8564	Execute network pre - run .
8565	Execute Network Run .
8566	Extract sub - runs from the given trajectory .
8567	Runs the sub - runs of the network .
8568	Add parameters to the network .
8569	Pre - run the network .
8570	Runs the network .
8571	Runs the network .
8572	Create a filename for the given trajectory .
8573	Return the next element of the chain .
8574	Merge all trajectories in a folder .
8575	Handles a SIGINT .
8576	Read configuration from a file .
8577	Request a PIN code .
8578	Request access and refresh tokens from ECobee .
8579	Refreshes the access token with the refresh token .
8580	Get the list of thermostats for the authenticated user .
8581	Writes access and refresh tokens to file .
8582	Set the HVAC mode for the given index .
8583	Set the fan minimum on time for the given index .
8584	Sets the hold temperature for the specified index .
8585	Set the climate hold for the specified index .
8586	Delete a vacation .
8587	Resumes a program .
8588	Send a message to the user .
8589	Set humidity level for the given index .
8590	Generate a random delay to enter in SELECTING .
8591	Generate a random timeout resending on a given number of times .
8592	Return the amount of time left to renew the lease .
8593	Generate a random renewing time .
8594	Return a dictionary of the current FSM instance .
8595	Resets the DHCPCAP session .
8596	Get the timeout for the given function .
8597	Set the timeout for the given function .
8598	Send a DISCOVER packet to the client .
8599	Select offer .
8600	Send a DHCPREQUEST .
8601	Set the renewing time and rebinding time .
8602	Process an ARP packet .
8603	Process DHCPNAK packet .
8604	Initializes the connection .
8605	Set the lease to bound .
8606	Respond to a RENEWING state .
8607	Rebinding the lease .
8608	This method is called at end of the session .
8609	Initializes the script in an error state .
8610	Timeout selecting .
8611	Timeout requesting .
8612	Timeout request renewing .
8613	Timeout request rebinding .
8614	Receive an OFFER packet .
8615	Receive an ACK .
8616	Receive NAK requesting packet .
8617	Receive ACK renewing .
8618	Receive NAK renewing packet .
8619	Receive an ACK REBINDING packet .
8620	Receive NAK rebinding .
8621	Called when a new lease is recreated .
8622	Set the value of a field .
8623	Add a new query to the query .
8624	Remove a query from the query .
8625	Return the status of the server .
8626	Create output data from program data .
8627	Parse options and exit .
8628	Validate a message .
8629	Read data from a TdmsFile .
8630	Adds the deformation to the data .
8631	Converts TDMS data to FCS data .
8632	Return True if two branches are equal .
8633	Create a new patch .
8634	Delete the next patch .
8635	Delete a patch .
8636	Check if file is already in patch .
8637	Backup a file with the given patch .
8638	Add a file to the patch .
8639	Run a Quilt command .
8640	Create the directory if it does not exist .
8641	Copy this directory to the given destination .
8642	Link to this file .
8643	Copy this file to the given destination .
8644	Return the directory containing the file .
8645	Backup file to dest_dir .
8646	Refresh the quilt patch .
8647	Unapply a patch .
8648	Unapply a top patch .
8649	Unapply all applied patches .
8650	Applies the given patch .
8651	Apply the next patch to the database .
8652	Apply all patches .
8653	Reads the series file .
8654	Save the series to a file .
8655	Add patch to self . patchlines
8656	Inserts patches into self . patchlines .
8657	Add patches to self . patchlines .
8658	Removes a patch .
8659	Returns a list of patches after the given patch .
8660	Returns a list of patches before the given patch .
8661	Returns a list of patches for the given patch .
8662	Replace a patch with a new one .
8663	Create the directory structure .
8664	Check the version of the quilt meta - data file .
8665	Add this command to the given parser .
8666	Adds the arguments to the given parser .
8667	Add command line arguments to sub - parsers .
8668	Sets the arguments for the sub - command .
8669	Add sub - parsers to this parser .
8670	Check if a file is in a patch .
8671	Check if file is modified by patch .
8672	Revert a file .
8673	Import a quilt patch .
8674	Import quilt patches .
8675	Create a way at the given node .
8676	Return a generator of node ids that are not present in the graph .
8677	Create a Node object for the given node .
8678	Builds a route from a relation .
8679	Create a route long name from a short name .
8680	Gets the agency id for a relation .
8681	Process a relation file .
8682	Create a relation .
8683	Create dummy data for the given routes and stops .
8684	Patch a list of agencies .
8685	Create a dummy trip stoptimes .
8686	Write the data to a zip file .
8687	Write unzipped files to destination .
8688	Build an Agency object from a relation .
8689	Return a list of Stop objects for the given relation .
8690	Build a shape from a relation and a list of ways .
8691	Return a list of supported versions .
8692	Send an APDU .
8693	Authenticate U2F devices .
8694	Register a new session .
8695	Authenticate an A2F session .
8696	Register with the U2F device .
8697	Convert unicode strings to unicode strings .
8698	Wrap a function with an error threshold .
8699	Wrap a class with an error decorator .
8700	Return True if filepath matches the pattern .
8701	Return the email address for the given email address .
8702	Get entry from entry_tree
8703	Convert markdown to reST .
8704	Start Flawless web server .
8705	Record an error .
8706	Converts a URL to an image .
8707	Converts a string to an image .
8708	Decorator to validate an image .
8709	Check if image is big enough .
8710	Check if image is big enough .
8711	Check if image height is big enough .
8712	Returns a Category instance for the given field name .
8713	Parses the totals field from the given item .
8714	Return a generator for each item in the source file .
8715	Saves an error .
8716	Parse the data from the source .
8717	Parse an item into a dictionary .
8718	Get an instance from the database .
8719	Save an item to the database .
8720	Download a file from a URL .
8721	Load the data from a file .
8722	Return a dictionary of the contents of the CSV file .
8723	Allows network access settings on a running sandbox .
8724	Runs a command .
8725	Add files to the working directory .
8726	Adds a file to the working directory .
8727	Get enrollments for a course .
8728	Returns a list of enrollments for the given SIS course .
8729	Returns a list of enrollments for a section .
8730	Gets a list of enrollments for a section .
8731	Returns a list of enrollments for the given regid .
8732	Enroll a user in a course .
8733	Get a list of all roles in an account .
8734	Returns a list of roles in an account .
8735	Returns a list of roles in an account .
8736	Get a role by ID .
8737	Returns a role object for the given SIS id and role id .
8738	Returns an instance of CanvasCourse services facade .
8739	Returns a Course object for the given SIS id .
8740	Returns a list of courses in an account .
8741	Returns a list of courses in account for the given SIS account .
8742	Returns a list of courses in an account .
8743	Gets the published courses in account for the given SIS account .
8744	Returns a list of courses for the given regid .
8745	Create a new course .
8746	Updates an existing SIS course .
8747	Get activity by account and term .
8748	Returns a list of grades for the given account and term .
8749	Get statistics for a given account and term .
8750	Get activity by SIS course id .
8751	Gets a list of assignments for the given SIS course .
8752	Gets the student summaries for the given SIS course .
8753	Gets the activity for the given SIS user and course .
8754	Gets the student messaging for the given SIS user and course .
8755	Get external tools in an account .
8756	Get all external tools in a course .
8757	Create external tool .
8758	Updates an external tool .
8759	Delete an external tool .
8760	Check that all required parameters are set for the given object .
8761	Get profile for a user .
8762	Get all users for a course .
8763	Returns a list of users for the given SIS course .
8764	Create a user .
8765	Get a list of Login objects for a user .
8766	Updates a user login .
8767	Returns the next page .
8768	Get the next page URL for a resource .
8769	Gets a resource for the given url .
8770	Helper method to get a resource .
8771	Updates a resource .
8772	Create a new resource .
8773	Delete a resource .
8774	Returns a list of CanvasAdmin objects for the given account .
8775	Create an admin .
8776	Create an admin by sis_id and user_id
8777	Delete an administrator .
8778	Delete Admin by SIS id .
8779	Create a grading standard for the given course .
8780	Get a specific section .
8781	Get a section by sis_id .
8782	Returns a list of all sections in a course .
8783	Returns a list of sections in the given SIS course .
8784	Returns a list of sections with students in the course .
8785	Returns a list of sections with students in course .
8786	Create a new section .
8787	Updates a section .
8788	Returns a list of Quizzes for the given course .
8789	Get information about an account .
8790	Returns a list of all sub - accounts for the given account .
8791	Updates an existing account .
8792	Updates an existing SIS account .
8793	Returns an instance of CanvasSSOSettings services facade .
8794	Updates an existing CanvasSSOSettings .
8795	Get a term by sis_id
8796	Import a CSV file into a SISImportModel
8797	Import a directory .
8798	Returns a SISImportModel for the given SISImport object .
8799	Build a zip file from CSV files .
8800	Returns a list of assignments for the given course .
8801	Updates an assignment .
8802	Returns a list of ReportType objects for the given account .
8803	Returns a list of Report objects for the given type .
8804	Create a new report .
8805	Create a course provisioning report .
8806	Create a SIS export report .
8807	Create an unused courses report .
8808	Get report data .
8809	Get report status .
8810	Delete a report .
8811	Move detections in - place .
8812	Flip detections .
8813	Return a dictionary representation of an object .
8814	Gets the configuration for the given request .
8815	The empty value of the field .
8816	Parse args and kwargs from a template token .
8817	Create metrics from a list of MetricConfigs .
8818	Setup the logging module .
8819	Configure the registry .
8820	Create metrics from a list of MetricConfigs .
8821	Get a metric by name and labels .
8822	Handles the home page .
8823	Handles the metrics request .
8824	Wolfram Alpha API .
8825	Fix HTTPMessage for Python 3 .
8826	Query the Wolfram API .
8827	Return a generator of all pods and assumptions and warnings .
8828	Return a list of Result pods .
8829	Encode data in JSON format .
8830	Call API .
8831	Get a resource .
8832	Delete a resource .
8833	Updates a resource .
8834	Perform an HTTP POST request .
8835	Process a query .
8836	Group sentences into groups of length group_length .
8837	Disambiguation service .
8838	Disambiguation for a query .
8839	Segments text .
8840	Get the language for the given text .
8841	Fetch a concept .
8842	Fit the ensemble to the given features and classes .
8843	Return a score for the given features .
8844	Fit the model to the given features and class labels .
8845	Fit and predict from a list of features .
8846	Return a score function for the given features .
8847	Fit the model on the given features and targets .
8848	Transform features to a new feature matrix .
8849	Return the score of the continuous MDR model .
8850	Runs the MDR predict method on X and Y .
8851	Generates n_way models for each feature in X .
8852	Plots for the mdr instance .
8853	Return a dictionary of the application s configuration .
8854	Get the value of a key .
8855	Create a Vector from a list of members .
8856	Create a Vector from a list of members .
8857	Evaluates the given file .
8858	Evaluates the given stream and returns the result .
8859	Evaluates a string .
8860	Bootstrap the repl module for the given namespace .
8861	Runs the given code .
8862	Return a MultiFunction for the given dispatch .
8863	Adds a method to a Map .
8864	Adds a method to the MultiFunction .
8865	Get the method with the given key .
8866	Removes a method from a Map .
8867	Removes a method from the MultiFunction .
8868	Return True if v is a macro variable .
8869	Return the location of the given form .
8870	Decorator to wrap a parse function with loc .
8871	Assert that node does not appear in tail position .
8872	Assert that node is tail .
8873	Resolve a bare symbol .
8874	Resolves the given form .
8875	Parses the AST for the given form .
8876	Check if the variable is shadowed .
8877	Add a new symbol to the symbol table .
8878	Map a list of strings to a list of strings .
8879	Return a lrepr representation of an iterable .
8880	Return a string representation of an LispObject .
8881	Return a string representation of an object .
8882	Fix missing locations .
8883	Compile and execute form .
8884	Increments the compiled code for the given module .
8885	Compile a list of ReaderForm objects into a Python module .
8886	Compile a list of code into a Python AST .
8887	Return a |_Sequence| object for the given iterable .
8888	Munge the given string and return a new string .
8889	Removes _ and - from a string .
8890	Return a fraction between the given numerator and denominator .
8891	Return a logging . Handler for the given level and format .
8892	Map a list of key - value pairs .
8893	Split a collection into chunks of size n .
8894	Decorator to wrap a function with loc .
8895	Reads namespaced names .
8896	Read a collection from a file .
8897	Reads a list .
8898	Read a vector from the reader .
8899	Reads a set from the reader .
8900	Reads a map .
8901	Read a string from the input stream .
8902	Reads a symbol from ctx .
8903	Reads a keyword .
8904	Read metadata from the next consuming comment .
8905	Read a function from a ReaderContext .
8906	Reads a quoted comment .
8907	Expands the given form into a list of lists .
8908	Processes a syntax quoted form .
8909	Reads the syntax quoted form .
8910	Reads an unquoted comment .
8911	Return a LispForm corresponding to the given context .
8912	Read a character from the reader .
8913	Reads a regex pattern from a ReaderContext .
8914	Read a reader macro .
8915	Read next consuming comment .
8916	Read next token .
8917	Read an expression from a stream .
8918	Read a string from a file - like object .
8919	Read a file .
8920	Updates the column and line .
8921	Pushback the current item to the end of the stack .
8922	Return the next token .
8923	Return the bytecode for a basis set .
8924	Return a list of bytecode for the given name and mtime .
8925	Create a cache file from a source file .
8926	Adds all imports to sys . meta_path .
8927	Return a ModuleSpec for the given fullname and path .
8928	Load a cached Python module .
8929	Load and execute a Python module .
8930	Executes the given module .
8931	Create a symbol with the given name and namespace .
8932	Return a list of keywords that match the given text .
8933	Get or create a Keyword from a dictionary .
8934	Return a Keyword object for the given name and namespace .
8935	Create a PyASTStream from a list of PyASTStream objects .
8936	Load an attribute .
8937	Decorator to create a simple AST generator .
8938	Return a collection of AST nodes .
8939	Sets the AST to include the given env .
8940	Decorator to wrap a function with AST loc .
8941	Decorator to wrap a function with AST loc dependencies .
8942	Check if a Var is dynamic .
8943	Return True if v is redefable .
8944	Converts an expression to an AST .
8945	Return AST AST AST AST AST AST AST AST AST AST AST AST AST .
8946	Check if symbol should be warned on redef .
8947	Convert a Do node to a Python AST .
8948	Return the name of a function .
8949	Convert function arguments to Python AST .
8950	Convert a single ARity function to a Python AST .
8951	Convert a list of methods to a Python AST .
8952	Convert a function to a Python AST .
8953	Converts the given node to a Python AST .
8954	Converts an If node to a Python AST .
8955	Converts a Invoke node to a Python AST .
8956	Converts a Quote node to a Python AST node .
8957	Convert a Recur node to a Python AST .
8958	Convert a Recur point to a Python AST .
8959	Converts a SetBang node to a Python AST .
8960	Converts an exception to a Python AST .
8961	Convert a Try node to a Python AST .
8962	Converts a Local symbol to a Python AST .
8963	Converts a variable name to a Python AST .
8964	Converts a VarRef to a Python AST .
8965	Converts an InteropProp node to a Python AST .
8966	Converts a class to a Python AST .
8967	Converts a MaybeHostForm node to a Python AST .
8968	Convert a LispForm to a Python AST .
8969	Converts a collection literal to a Python AST .
8970	Generates a Python AST from a lisp AST .
8971	Yields a list of Import objects for each module .
8972	Create an import from a module import .
8973	Return an ast . Assign representing the namespace of a Python variable .
8974	Return a new set with the given members .
8975	Return a set of the given members .
8976	Recursively visit an ExceptHandler node .
8977	Recursively visit an ast . Expr node .
8978	Recursively visit a FunctionDef node .
8979	Recursively visit While nodes .
8980	Recursively visit a Try node .
8981	Create a new module .
8982	Returns the first element of an ISeq .
8983	Return the rest of an ISeq .
8984	Return the first occurrence of i in the collection .
8985	Returns the nth element of a sequence .
8986	Applies the given object to the given sequence .
8987	Converts an object to a sequence .
8988	Concatenate sequences into a single sequence .
8989	Associate a list of values with a list of key - value pairs .
8990	Return a copy of the given collection .
8991	Decorator to wrap a function with the given arguments .
8992	Return the dereferenced value of an object .
8993	Return True if v1 equals v2 .
8994	Divide two LispNumber objects .
8995	Sort a collection by the given function .
8996	Return True if the given collection contains the given key .
8997	Get a value from a dictionary .
8998	Convert an object to a Lisp object .
8999	Convert an object to a Python object .
9000	Return a string representation of a LRepr object .
9001	Return a list of the arguments of a Python tuple .
9002	Decorator for _Trampoline functions .
9003	Decorator to add attributes to a function .
9004	Decorator to wrap a function with meta data .
9005	Decorator to mark a function as basis .
9006	Resolve an alias for a symbol .
9007	Resolves a symbol and returns a Var object .
9008	Adds a generated Python variable to the current namespace .
9009	Bootstrap a dynamic variable .
9010	Return a new Var object with the given name .
9011	Intern an unbound variable .
9012	Find symbol that matches name_sym .
9013	Returns a Var object for the given namespace qualified with the given symbol .
9014	Return a Var object for the given qualified symbol .
9015	Add a default import for the given module .
9016	Add an alias to this symbol .
9017	Interpretation of a variable .
9018	Return a copy of m with the given sym and new_var .
9019	Returns a Var object for the given symbol .
9020	Add an import symbol to this module .
9021	Return the import for the given symbol .
9022	Adds a reference to a variable .
9023	Get a reference to a symbol .
9024	Return all references to other_ns_interns .
9025	Refreases all references to other_ns .
9026	Get or create a new namespace for the given name .
9027	Get or create a namespace .
9028	Return the namespace for the given name .
9029	Removes a namespace .
9030	Return True if text is a completion matcher .
9031	Return a list of aliases that match the given prefix .
9032	Return a list of imports and aliases that match the given prefix .
9033	Return a list of interns for the given value .
9034	Return a list of all referers that match the given value .
9035	Return a list of aliases for the given text .
9036	Return a tuple of the arguments of this sequence .
9037	Return a list of the given members .
9038	Return a list of the given members .
9039	Change the style of a scalar .
9040	Decrypts a JWT token .
9041	Encrypts a JWT using the given key store .
9042	Delete an item from the cache .
9043	Converts the comparison to a tuple .
9044	Close the file .
9045	Parse a Fiql expression from a string .
9046	Dump model to file - like object .
9047	Handles object hooks .
9048	Decode a date .
9049	Decode a JSON string .
9050	Returns a JSON representation of the given object .
9051	Validates that the version string is valid .
9052	Generate a changelog .
9053	Return a list of the strongly connected components of a graph .
9054	Return the topological sort of the given graph .
9055	Sets the parent of this expression .
9056	Return the parent of this expression .
9057	Adds the given operator to the fragment .
9058	Add an element to the fragment .
9059	Adds an AND operation to the expression .
9060	Adds an or to the expression .
9061	Wraps a function to log .
9062	Parse incoming data into a list of dictionaries .
9063	Convert a list of tuples to a dictionary .
9064	Checks a list of messages for the given cmd and value .
9065	Helper function to prepare a message for sending .
9066	Flush all incomming socket messages .
9067	Enable a slide .
9068	Saves a Licacam template .
9069	Load a Licacam template .
9070	Get information about a stage .
9071	Produce a code - block from a file .
9072	Locate the package . json file .
9073	Parse package json .
9074	Handles an API error with a JSON response .
9075	Validate yourls response .
9076	Homogenize two wavelengths .
9077	Interpolate dep_vector with respect to indep_vector
9078	Return the indep vector between the two wavelengths .
9079	Verify that two waveleforms are compatible .
9080	Loads the systemjs manifest .
9081	Trace the parameters of a module .
9082	Runs a trace .
9083	Shorten a URL .
9084	Expand a short URL .
9085	Get URL stats for a short URL .
9086	Returns a list of links and stats for the given filter .
9087	Return a DBStats object for the current user .
9088	Execute a command in a pypkg directory .
9089	Echo the output of a command .
9090	Logs a message to stdout .
9091	Decorator to cache the result of a method .
9092	Split an iterable into chunks of size chunksize .
9093	Runs a function in chunks of size chunksize .
9094	Flatten an iterable .
9095	Quietly aborts the program .
9096	Print tabular data from a table .
9097	Create a dummy class .
9098	Create an instance from a string .
9099	Login to YoURLS API .
9100	Runs the wave_core module .
9101	Return a list of links from requirements . json
9102	Create a common entry for the given Python version and suffix .
9103	Create multiple entries from pkg_pyvers .
9104	Convert a comparison operator to a list of words .
9105	Yield data for each frequency magnitude angle and res .
9106	Split the data matrix into chunks of length 4 .
9107	Write touchstone data to file fname .
9108	Bounding waveleforms based on indep_min and indep_max
9109	Builds a list of units for a given operation .
9110	Return a copy of the wave with the given description and units .
9111	Calculate the running area of dep_vector .
9112	Validate that indep_min and indep_max are valid .
9113	Calculate the acos of the given wavelength .
9114	Calculate the acosh of a Wave .
9115	Calculate the arcsine of the given wavelength .
9116	Calculate the angle between two wavelengths .
9117	Calculate the average of the indep vectors .
9118	Return a copy of a Wave object .
9119	Calculate the derivative of the given wavelefunction .
9120	Compute the FFT of a time series .
9121	Compute Fourier Transform .
9122	Fourier transform .
9123	Fourier Transform .
9124	Return the ifft database for the given wavelength .
9125	Return the inverse Fourier transform of the given wavelength .
9126	Return the inverse Fourier transform of the given wavelength .
9127	Return the phase of the IFFT .
9128	Compute the IFFTR of the given wavelength .
9129	Calculate the integral of the given waveleform .
9130	Calculate the group delay of a Wave .
9131	Log of a Wave .
9132	Calculate the naverage of a waveform .
9133	Return the nintegral wavelength of a waveform .
9134	Return the maximum value of a waveform .
9135	Return the index of the minimum value in a waveform .
9136	Return the phase of the given wavelength .
9137	Round wavelength to a given number of decimal places .
9138	Return the square root of the square root of the input wavelength .
9139	Return a sub - waveleform of the given waveleform .
9140	Convert wavelength to complex .
9141	Convert a complex wavelength to float .
9142	Convert wavelength to integer .
9143	Return the value of an independent variable .
9144	Return a list of jspm packages found at the given path .
9145	Get short description from long_desc .
9146	Build an expression from a list of tokens .
9147	Return the next item that is greater than pos .
9148	Return a list of functions for the given expression .
9149	Return a list of pairs of delimiters .
9150	Parse an expression .
9151	Remove consecutive delimiters from an expression .
9152	Split a string into sub - strings .
9153	Convert a number to a scientific notation tuple .
9154	Converts a number to a scientific notation .
9155	Converts a number to a peng string .
9156	Return the peng power of a string .
9157	Return the peng_frac of a string .
9158	Return the pengant number for a string .
9159	Return a peng power object from a string .
9160	Peng suffix math .
9161	Removes extra delimiters from an expression .
9162	Converts a number to a scientific string .
9163	Converts a number to a scientific tuple .
9164	Find the sourcemap comment for the given file .
9165	Check if extension needs to be included .
9166	Runs the bundle .
9167	Tracer for the given application .
9168	Return True if the hashes of the dep_tree are the same .
9169	Format a hexdump .
9170	Parse a docstring .
9171	Return a list of all valid identifiers .
9172	Return the deferred object for the given add action .
9173	Split a line into parts .
9174	Check if all contexts have been initialized .
9175	Return a help string for the given arguments .
9176	Find the function with the given name .
9177	Return a list of all functions in the given context .
9178	Return True if arg is a flag .
9179	Processes a list of positional arguments .
9180	Extract a value from a keyword argument .
9181	Invoke one function from a line .
9182	Invoke a line of code .
9183	Invoke method for a string .
9184	Parse a docstring parameter .
9185	Parse a return line into a ReturnInfo object .
9186	Classify a section .
9187	Return a line for the given line .
9188	Join paragraphs into a list of paragraphs .
9189	Wrap and format the maindoc file .
9190	Convert a value to a given type .
9191	Convert a binary value to a binary value .
9192	Returns the size of the given type
9193	Return a string representation of a value .
9194	Validate that the given type is valid .
9195	Return True if type_name is a known type .
9196	Split a type name into a base type and a list of subtypes .
9197	Instantiate a complex type from a list of subtypes .
9198	Return the type for the given type name .
9199	Checks if format is known for the given type .
9200	Inject a type into the registry .
9201	Loads the types from the given module .
9202	Return True if any of the arguments are not empty .
9203	Adds a parameter to the model .
9204	Sets the return value for this method .
9205	Custom return value .
9206	Given a short - name and a list of keyword parameters match that short - name .
9207	Return the type of a parameter .
9208	Return the signature of the function .
9209	Return a string representation of the return value .
9210	Converts a positional argument at the given index .
9211	Raise an error if any of the arguments are not valid .
9212	Converts an argument to an instance of the specified type .
9213	Return a string representation of the message .
9214	Return a dictionary representation of the reason .
9215	Check and execute a function .
9216	Parse a list of valid validators .
9217	Return a dict of all objects in a container .
9218	Create a context from a module .
9219	Return the help text for the given function .
9220	Decorator to mark a function as a parameter .
9221	Decorator to annotate a function with a custom return value .
9222	Return a function that returns a function of the given type .
9223	A decorator that sets the context to True .
9224	Decorator to annotate a function .
9225	Decorator to mark a function as annotated .
9226	Short description of a function .
9227	Loads the cron module .
9228	Installs all tasks in the registry .
9229	Print all tasks in the registry .
9230	Uninstalls all bread crums .
9231	Create a new uri schema .
9232	Load project configs from file .
9233	Save projects config to file .
9234	Define a singleton for the given carrier .
9235	Returns a dictionary of projects that depend on this project .
9236	Decorator for vcp . project_command .
9237	Initializes the project .
9238	Set the value of a key .
9239	Set an attribute on the Lens object .
9240	Create a Lens instance from an iterable .
9241	Set the state to a new value .
9242	Set multiple values at once .
9243	Modify a function in - place .
9244	Return a function that collects n arguments .
9245	Return the result of the function f .
9246	Apply a function to the state .
9247	View this fold .
9248	Converts the fold to a list of values .
9249	Return a new Setter with the given function applied over the given state .
9250	Set the value to the given value .
9251	Iterate over the elements of the iterable .
9252	Return the kind of the object .
9253	Runs the game .
9254	Return a copy of this vector that is less than or equal to other .
9255	Handles input .
9256	Advance the robots of the player .
9257	Ends the game .
9258	Move the player to the board .
9259	Plays the board .
9260	Make a move from x y to the player .
9261	Return the winner of the team .
9262	Return the potential wins of the board .
9263	Process a single item .
9264	Open a new spider .
9265	Upload a chunk to S3 .
9266	Return a file - like object representing the contents of the file .
9267	Get account state for a given address .
9268	Gets the state of an asset .
9269	Get a block by its hash .
9270	Get the hash of the block at the given index .
9271	Gets the system fee for the specified block .
9272	Gets the contract state for the given script hash .
9273	Get a raw transaction .
9274	Get Storage information for a given script hash and key .
9275	This interface is used to get the out value of a transaction .
9276	Invoke a JSON - RPC method .
9277	Invoke a function .
9278	Invoke a script .
9279	Sends a raw transaction .
9280	Validate an address .
9281	Calls a JSON - RPC endpoint .
9282	Check if a string is hash256 .
9283	Check if a string is a hash160 string .
9284	Encode invocation parameters .
9285	Decodes the invocation result .
9286	Decorator to specify the first keyword only argument for a function .
9287	Applies the given instruction to the given timezone .
9288	Apply to a timezone object .
9289	Save the model to a file .
9290	Render the barcode .
9291	Calculates the checksum of the data .
9292	Render the code to the screen .
9293	Connect to KVS server .
9294	Run main entrypoint .
9295	Download a file from S3
9296	Upload a file to S3 .
9297	Downsync an S3 config file .
9298	Show the contents of a section .
9299	Parse an environment variable .
9300	Set username and password .
9301	Set the API key .
9302	Return json content from folder .
9303	Return a dictionary of schemas for all schemas in JSON_PATH .
9304	Get the schema for this project .
9305	Return a jsonschema . RefResolver for this schema .
9306	Validate the given object against the schema .
9307	Returns a list of valid examples .
9308	Returns a list of invalid examples .
9309	Return the URL for the authenticated user .
9310	Return the auth code for the authenticated user .
9311	Get access token .
9312	Gets the user id .
9313	Return a list of files in a folder .
9314	Create a new skydrive .
9315	Add a comment to an object .
9316	Decode an object to UTF - 8 .
9317	Sets the drop target for the given object .
9318	Starts the drag opperation .
9319	Set the default TLW .
9320	Inspect an object .
9321	Display a debug shell .
9322	Migrate a font .
9323	Load a page .
9324	Gets a parameter from a tag .
9325	Send a message to the user .
9326	Create a wellcome tooltip .
9327	Handles mouse down events
9328	Move the mouse to the selected object .
9329	Resizes the given wx object to the given size .
9330	Handle key press .
9331	Delete all selected objects .
9332	Duplicate the selected objects .
9333	Refresh the image .
9334	Calculate the best position for the given widget .
9335	Returns a PyData object for the given item .
9336	Sets the PyData for an item .
9337	Search for a PyData object in the wx control .
9338	Deletes an item .
9339	Deletes all items in the list .
9340	Clears all data from the database .
9341	Sets the selection at the given index
9342	Returns a list of strings representing the selection .
9343	Sets the client data .
9344	Append a string to the wx object .
9345	Return a representation of the given object .
9346	Return the parent object for the given object name
9347	Return a copy of this object .
9348	Adds a child to the sizer .
9349	Sets the parent of this component .
9350	Draws the background of this window .
9351	Draws the background of the canvas .
9352	Paints the wx object .
9353	Find all modules in the given rootpath .
9354	Return a list of column headings .
9355	Resets the view of the table .
9356	Updates all of the values in the grid table .
9357	Updates the column attributes .
9358	Sorts the data for a column .
9359	Clears the grid .
9360	Create a new combobox .
9361	Begin editing the value at row and column .
9362	Ends the edit .
9363	IsAcceptedKey - Determines if the key is accepted .
9364	Start key event handler
9365	Create a class for the given type name .
9366	Enable all items in the menu .
9367	Determines if this menu is enabled .
9368	Enable all menus .
9369	Determines if the menu is enabled .
9370	Removes a menu .
9371	Submits the form .
9372	Sets the object s attributes based on a tag .
9373	Ensure that the node is an autosummary table visit html node .
9374	Return a documenter for the given object .
9375	Mangles a signature .
9376	Import a module by its name .
9377	Sphinx role .
9378	Displays an alert message .
9379	Prompts the user for a text entry .
9380	Select a font .
9381	Select a color .
9382	Prompts the user to choose a directory .
9383	Find dialog .
9384	Sets the item s has_children to True .
9385	Sets the icon .
9386	Shows the application .
9387	Parse a resource file .
9388	Save a resource to a file .
9389	Build a window from a dictionary .
9390	Build a component from a dictionary .
9391	Connect to a component .
9392	Converts a PythonCard property to a PythonCard property .
9393	Sets the clipboard data .
9394	Find autosummary in a docstring .
9395	Loads the given object into the tree
9396	Inspects the given object .
9397	Activate an item .
9398	Update the name of a child item .
9399	Show context menu .
9400	Serializes the value to a thumbnail .
9401	Decorator to add an expression filter .
9402	Decorator to register a node filter .
9403	Assert that the current path is valid .
9404	Assert that the path is not the current path .
9405	Checks if the given path is the current path .
9406	Assert that path has no current path .
9407	Selects the option .
9408	Apply a filter to a value .
9409	Return a webdriver instance for the given browser name .
9410	Return an xpath representation of the expression .
9411	Return True if the node matches the filters .
9412	Switch to a specific frame .
9413	Accept an alert .
9414	Context manager to accept a confirmation message .
9415	Context manager to dismiss a confirmation message .
9416	Accept a prompt .
9417	Context manager to dismiss a prompt .
9418	Save the page to a file .
9419	Save a screenshot to a PNG file .
9420	Raise the server error .
9421	Return True if node matches the filter .
9422	Check if the element has checked or unchecked .
9423	Check if element has no checked field .
9424	Check if element has unchecked field .
9425	Checks whether the element identified by locator is not checked .
9426	Assert that the query is a text query .
9427	Assert that the query has no text .
9428	Assert that the given title is valid .
9429	Assert that there is no title .
9430	Assert that the given title exists .
9431	Assert that the given title has no title .
9432	Finds all resources matching the given criteria .
9433	Find the first matching record .
9434	Return the inner content of a node .
9435	Return the inner text of a node .
9436	Normalize a URL .
9437	Decorator for setting a property .
9438	Decorator to synchronize the session .
9439	Return True if the error should be handled .
9440	Return the number of rows that match the query .
9441	Return True if there is at least one result from the query .
9442	Return True if any of the options are not None .
9443	Return a failure message for the given description and options .
9444	Return True if the given number of options matches the given count .
9445	Normalize text .
9446	Normalize whitespace from a string .
9447	Convert text to a regular expression .
9448	Return True if the current URL is the same as the expected path .
9449	Resize the current window to the given width and height .
9450	Boots the server .
9451	Setter for AdvancedProperty .
9452	Decorator to set the instance method .
9453	Decorator to create a separate class method .
9454	Return full traceback as a string .
9455	Return a string representation of an object .
9456	Return the logger for the given instance .
9457	Sets the logger .
9458	Send request to the API .
9459	Returns a list of Channel objects .
9460	Returns a list of users owned by the authenticated user .
9461	Create a message .
9462	Translates a Slack message .
9463	Sends a Slack message .
9464	Read a Slack channel .
9465	Run the Slack API .
9466	Runs the bot .
9467	Return a dict of the difference between two dictionaries .
9468	Helper function to colorize a message .
9469	Start the playbook on a task .
9470	Returns True if the v2 runner is ok .
9471	Print v2 playbook stats .
9472	Displays a skipped task .
9473	Converts a prefix to an addressmask .
9474	Decorator to check that value is not empty .
9475	Add a model to the model .
9476	Return a dictionary of all elements in this document .
9477	Load a dictionary into the model .
9478	Converts the object to a dictionary .
9479	Parses a config file .
9480	Parse the state of the device .
9481	Translates config into a list of strings .
9482	Load all filters from JINJA .
9483	Find YANG parsing file .
9484	Convert a YANG model to a dictionary .
9485	Return a diff between two containers .
9486	Perform an HTTP POST request .
9487	Gets the URL to access the authorization code .
9488	Get access token .
9489	Return a dict of query parameters from a URL .
9490	Dequery a URL .
9491	Build a URL from a base URL .
9492	Handles an exception .
9493	Create a Response object from the given body and headers .
9494	Create a redirect error response .
9495	Make a JSON response .
9496	Get Authorization Code .
9497	Refresh Token .
9498	Get access token .
9499	Gets the authorization code for the given URI .
9500	Get access token from POST data .
9501	Get access token from authorization header .
9502	Open the device for the specified bus .
9503	Read a single byte from the device .
9504	Read a number of bytes from the specified address .
9505	Read one byte data from the device .
9506	Writes bytes to the device .
9507	Write a 2 byte data to the device .
9508	Write block data to the device .
9509	The CDN URL for the CDN .
9510	Create a copy of a file .
9511	Create a local copy of a file .
9512	Create a remote copy of a file .
9513	Construct a File instance from a file_info .
9514	Upload a file to the server .
9515	Upload a file from a URL .
9516	Upload a file from a URL .
9517	Returns a list of CDN URLs for each file .
9518	Construct a Group object from a group_info dict .
9519	Create a new group .
9520	Perform a base operation for the given method .
9521	Return a generator of UUIDs for each file in the sequence .
9522	Return a list of objects .
9523	Print a bar chart of the contents of an iterable .
9524	Send an HTTP POST request to upload a file .
9525	Return the home mode status .
9526	Get a list of cameras .
9527	Get camera information for a list of camera IDs .
9528	Get a snapshot of a camera .
9529	Disable a camera .
9530	Get an MotionSetting object for the given camera .
9531	This interface is used to update camera event parameters .
9532	Update camera and motion settings .
9533	Check if an element is the last element of a list .
9534	Return a generator for a single list item .
9535	Return the value of the ivl attribute of the element .
9536	Gets the merge element from the vMerge element .
9537	Gets the value of the grid span .
9538	Gets the span of the cell at the given index .
9539	Check if a style is false .
9540	Check if an element is bold .
9541	Return True if the element r is italicized .
9542	Check if an element is underlined .
9543	Check if a p element is a title .
9544	Get text run content data .
9545	Get relationship information from a tree .
9546	Get document data from a zip file .
9547	Returns the list type for the given id and ilvl .
9548	Build a list from a list of nodes .
9549	Builds a tr element for the given meta data .
9550	Build a table from a list of dictionaries .
9551	Return the HTML content of the given tag .
9552	Removes a tag from a tree .
9553	Find a dataset from a URL .
9554	Load MNIST dataset .
9555	Load the CIFAR dataset .
9556	Plots an array of images .
9557	Plots the layers of the given weights .
9558	Plots the filters .
9559	Generate samples from a list of arrays .
9560	Encode a string into a list of words .
9561	Generate a batch of data .
9562	Predict a sequence of labels .
9563	Add weights to the model .
9564	Encodes x into a numpy array .
9565	Decode function .
9566	Find the output layer .
9567	Compute the score of the given data .
9568	Return the predicted value for the given data .
9569	Predicted Classifier .
9570	Predicted logit .
9571	Compute the score of the given data .
9572	Create a batch of features with the given labels and lengths .
9573	Return a list of batches from the given dataset .
9574	Load a network from a file .
9575	Generate a random matrix .
9576	Generate a random vector .
9577	Given a dictionary of outputs and a list of patterns return a list of the outputs that match the given patterns .
9578	Given a list of layers and a list of patterns return a list of parameters matching the given patterns .
9579	Create BernoulliDropout from kwargs .
9580	Return a list of variables for the model .
9581	Computes the accuracy of the model .
9582	Perform a scan on inputs .
9583	Build a new activation .
9584	Return random samples from the source data .
9585	Add a loss to the model .
9586	Iterate over the data .
9587	Train all the monitors .
9588	Return a hash of the model .
9589	Build the computation graph for the given regularizers .
9590	Returns a list of inputs of the model .
9591	Returns a list of all variables in the model .
9592	Find the layer with the given param .
9593	Feed forward function .
9594	Return the prediction of the model .
9595	Computes the score of the given data .
9596	Save the model to a file .
9597	Load a model from a file .
9598	Computes the loss of the model .
9599	Updates the graph with the given arguments .
9600	The output size of this layer .
9601	Connects the given inputs with the given outputs .
9602	Bind the model to the graph .
9603	Resolves inputs for the given layers .
9604	Resolves the outputs of the layer .
9605	Log of the layer .
9606	Log all parameters .
9607	Helper function to format a string .
9608	Resolves the output shape of the given layer .
9609	Return the first parameter with the given key .
9610	Add a bias to the model .
9611	Convert this form to a dictionary .
9612	Loggabor distribution .
9613	Loggabor image .
9614	Adds a tier to the interval .
9615	Removes the tier with the given name .
9616	Returns the tier with the given name .
9617	Convert to EAF .
9618	Add a point to this tier .
9619	Add a new interval to this tier .
9620	Removes the interval for the given time .
9621	Removes a point from this tier .
9622	Return an iterator over the intervals .
9623	Return a list of all intervals for this tier .
9624	Indent an element .
9625	Add an annotation to a tier .
9626	Add a new entry to the controlled vocabulary .
9627	Add a description to the specified language .
9628	Add an external reference .
9629	Add a language .
9630	Adds a new lexicon reference .
9631	Add a Linguistic Type to the model .
9632	Adds a file to the media descriptor .
9633	Add a locale to the registry .
9634	Adds a secondary linked file .
9635	Adds a tier .
9636	Cleans the time slots .
9637	Removes all the annotations between the given time slots and the given time slots .
9638	Generate an annotation id .
9639	Generates a timestamp for the given time .
9640	Returns a list of child tiers for the given id .
9641	Return the full time interval .
9642	Returns the reference annotation data for the given time .
9643	Returns the reference annotation data before the given time .
9644	Returns a list of tiers for the given ling type .
9645	Merge a list of tiers into a single list .
9646	Removes all annotations from a tier .
9647	Removes a description from the controlled vocabulary .
9648	Removes a license .
9649	Removes all media descriptors that match the given criteria .
9650	Removes a property from the model .
9651	Removes an annotation for the given id_tier .
9652	Removes secondary linked files .
9653	Removes a tier .
9654	Removes the given list of tiers .
9655	Rename a tier .
9656	Shift the annotations for each tier .
9657	Main entry point for the algorithm .
9658	Writes the given storage to stderr .
9659	Return the base level of the given text .
9660	Get the embedding levels for the given text .
9661	Return a list of explicit embedding levels and overrides for the given storage .
9662	Calculate the run length and type of each level .
9663	Resolves the weak types for the given storage .
9664	Resolves the neutral types for the given storage .
9665	Reverse contiguous sequences .
9666	Reorder the levels of the given storage .
9667	Processes the current scene .
9668	Convert a list of lines to a list of lines .
9669	Add a new attribute to an object .
9670	Command - line tool .
9671	Maintain backwards compatibility .
9672	Show the MayaWindow .
9673	Return the first available GUI .
9674	Deregister the host .
9675	Adds an entry to a file menu .
9676	Context manager to change the selection .
9677	Context manager for managing time .
9678	Shows a message box with no GUI .
9679	Setup the types for the bot .
9680	Return a generator that yields the cumulative data .
9681	Returns a list of values for a single axis .
9682	Draw a constant line .
9683	Load the transform parameters .
9684	Reverse mapping .
9685	Yield float values between start and stop .
9686	Add data to self . data .
9687	Adds a list of filters to the document .
9688	Add data to the data store
9689	Burns the graph .
9690	Calculate the left margin of the plot .
9691	Calculate the right margin of the key box .
9692	Calculate the top margin for the graph .
9693	Add a popup to the foreground .
9694	Calculate the bottom margin .
9695	Draws the graph .
9696	Create a datapoint text element .
9697	Draws the x - labels of each step .
9698	Draw the y - labels for each step .
9699	Draws x - guidelines .
9700	Draws y - guidelines .
9701	Draw titles and subtitles .
9702	Render inline styles .
9703	Start SVG .
9704	Return a list of CSS resources for the current page .
9705	Runs a bot .
9706	Send data to the socket .
9707	Connect to the server .
9708	Respond to a message .
9709	Return a list of patterns to be dispatched .
9710	Create a new nick .
9711	Handles a ping .
9712	Handles registered data .
9713	Enter the event loop .
9714	Register with the boss .
9715	Run all the tasks in the queue .
9716	Decorator to require a boss .
9717	Return a list of command patterns .
9718	Called when the boss is ready to join the channel .
9719	Execute a command in a worker .
9720	Add a new worker to the pool .
9721	Sends a validation email notification to the user .
9722	Sends a password reset notification .
9723	Validate that value is a valid password strength .
9724	Verify token .
9725	Delete an avatar .
9726	Allows the user to access the view .
9727	Return an instance of ThreadPoolExecutor .
9728	Return an instance of the Docker client .
9729	Return a tuple containing the TLS client and key .
9730	The name of the service .
9731	Executes a Docker method on the Docker client .
9732	Executes a docker command .
9733	Poll the Docker service .
9734	Stops the Docker service .
9735	Override filter_queryset method for unique email validation
9736	Updates a user s password .
9737	Updates the user s password .
9738	Validate that an email address is valid .
9739	Create a new token .
9740	Delete a token .
9741	Overrides the initial view to check that the user is authenticated .
9742	Sends an email confirmation .
9743	Updates the expiration of the session .
9744	Generate a password reset email context .
9745	Send email to the user s email address .
9746	Handles a password reset email notification .
9747	Validates the email address of the user .
9748	Authenticate a request .
9749	Validate and update the expiration date of the token .
9750	Show a Jupyter notebook .
9751	Process a list of plots .
9752	Return a CustomJS callback .
9753	Return a widget for the given parameter name .
9754	Render a function to a Bokeh view .
9755	Create a text widget .
9756	Return a list of named objects from a list of dictionaries .
9757	Return the owner of a method .
9758	Assign values to self . _auth_user and self . _auth_password .
9759	Ping the server .
9760	Get information about the server .
9761	Get the health information for this cluster .
9762	Convert bytes to readable bytes .
9763	Return the total load of the CPU .
9764	Return the memory size in KB .
9765	Return the number of bytes allocated to the network .
9766	Returns a list of volume IDs .
9767	Return the volume with the given id .
9768	Return the total volume size .
9769	Return the percentage used for a given volume .
9770	Return the disk temperature for a given volume .
9771	Return the disk temp for the given volume .
9772	Returns the disk with the given id .
9773	Login to the server .
9774	Perform a GET request to the given url .
9775	Executes a GET request .
9776	Updates the system .
9777	Gets the System . Utilization API client .
9778	Gets the CGI . Storage API client .
9779	Create a Context object for a request .
9780	Gets the tenant token .
9781	Builds the widget s attributes .
9782	Override settings with a list of apps .
9783	Remove all apps from INSTALLED_APPS .
9784	Return a dictionary of all global settings .
9785	Do a GET request .
9786	Get a value from the config .
9787	Change a value in the config file .
9788	Migrate the OAuth2Util config file .
9789	Starts the OAuth2 server .
9790	Wait for the response to the server .
9791	Obtain access information from PRAW .
9792	Check if a new token is present .
9793	Set access credentials for Reddit .
9794	Refresh an OAuth2 token .
9795	Create a manifest table .
9796	Split a full path into two parts .
9797	Checks if a bucket is a GLACIER bucket .
9798	Extracts run_id from key .
9799	Cleans a dictionary .
9800	Add a run_id attribute to the manifest .
9801	Checks if an item is in a manifest .
9802	Extract schema from uri .
9803	Fix a schema .
9804	Parse a list of contexts .
9805	Parse an unstructured event .
9806	Transform an event line to JSON .
9807	Return a JSON representation of a Snowplow event .
9808	Returns a template name and a Template object from a response .
9809	Print the context .
9810	Print a list of variables for the given context .
9811	Converts a SQL string to HTML .
9812	Format a Django context object as HTML .
9813	Format a dictionary to HTML .
9814	Replace special characters in text .
9815	Return a pretty representation of the given object .
9816	Format an object to a stream .
9817	Get a Latex token from a string .
9818	Return a list of LaTeX nodes from a LaTeX string .
9819	Convert LaTeX content to text .
9820	Set the latex input directory .
9821	Read input file .
9822	Converts a LaTeX document to text .
9823	Converts UTF - 8 characters to LaTeX characters .
9824	Converts a string to a unicode string .
9825	Get organisation information .
9826	Get a list of boards matching the given query parameters .
9827	Gets a list of all members of this account .
9828	Updates an organisation .
9829	Removes a member .
9830	Adds a member to the system .
9831	Adds a member to the account .
9832	Gets a list of all information for a project .
9833	Adds a card to the account .
9834	Gets a list of label information for the current user .
9835	Returns a list of checkItems for the authenticated user .
9836	Updates a label .
9837	Updates a label .
9838	Get the authorisation URL for the application .
9839	Returns a list of card information for the authenticated user .
9840	Get a new board .
9841	Get a list of resources .
9842	Gets a list of checklists matching the given parameters .
9843	Adds a comment to the account .
9844	Adds an attachment to the account .
9845	Add a checklist to this account .
9846	Adds a label to the account .
9847	Adds a label to a class .
9848	Adds a member to the account .
9849	Get information about the authenticated user .
9850	Get a list of cards matching the given query parameters .
9851	Get organisations for a list of organizations .
9852	Create a new board .
9853	Decorator for a singledispatch method .
9854	Get information about the board .
9855	Gets a list of lists matching the given query parameters .
9856	Get a list of labels matching the given query parameters .
9857	Get a single card .
9858	Gets a list of all checklists for this account .
9859	Gets an organisation .
9860	Updates a board .
9861	Adds a list to this account .
9862	Add a label to this account .
9863	Returns a list of checklists .
9864	Get information about a card .
9865	Returns a list of checklistitem objects for this item .
9866	Updates a checklist .
9867	Adds a new item to this account .
9868	Removes a check item .
9869	Updates the name of this checklist item .
9870	Updates the state of this checklist item .
9871	Adds authorisation information to query_params .
9872	Check for errors in a resource .
9873	Builds a URL for the given path and query params .
9874	Fetch a JSON representation of a resource .
9875	Create an organisation .
9876	Create a board .
9877	Create a new label .
9878	Create a list .
9879	Create a new card .
9880	Create a checklist .
9881	Create a member .
9882	Get an organisation .
9883	Get a board .
9884	Get a list .
9885	Get a card .
9886	Get a checklist .
9887	Get a member .
9888	Converts a URL to a domain name .
9889	Convert a MarkUpless text to a raw text string .
9890	Convert text to raw text .
9891	Converts a text string to a list of sentences .
9892	Set the password for a user .
9893	Split text with locations .
9894	Marks the given regex with the given text .
9895	Marks the beginning and ending locations of the given regex .
9896	Runs the command .
9897	Create the AES cipher .
9898	Return the AES mode for the given mode .
9899	Return the priority of the cryptodome .
9900	Check if the encryption scheme is valid .
9901	Called when a message is published .
9902	Makes a new id and returns it .
9903	Connect to the server .
9904	Handles an incoming CONNECTACK packet .
9905	Encode a string .
9906	Decode a string .
9907	Encode a 16 - bit integer as a 2 - byte integer .
9908	Encode the length of a number into a byte array .
9909	Decode the length of a string .
9910	Encode the data to a byte string .
9911	Encode the message into a byte string .
9912	Decode a packet .
9913	Encode the session to a string .
9914	Decode a packet .
9915	Decode a packet .
9916	Encode the message to a string .
9917	Encode the message .
9918	Decode a packet .
9919	Encode the message .
9920	Encode the message to a string .
9921	Decode a packet .
9922	Decode a packet .
9923	Get the URL for this method .
9924	Make a request to the API .
9925	Refresh all blocks .
9926	Format data into a 2D array .
9927	Fit data to the model .
9928	Fit KMeans to data .
9929	Fit MeanShift to data .
9930	Fit the classifier to the given data .
9931	Return a list of clusters for the given data .
9932	Map a list of clusters to a list of integers .
9933	Sort clusters according to their contents .
9934	Converts a datetime object to a string .
9935	Returns the total number of points in a dictionary .
9936	Return the total time span of the given dictionary .
9937	Unitpicker .
9938	Return a pretty element from a string .
9939	Converts a string to a name mass .
9940	Converts an analyte to mass name .
9941	Collate data from in_dir to out_dir .
9942	Iterate over a boolean array .
9943	Convert a list of tuples to a boolean array .
9944	Perform a fastsmooth on an array .
9945	Compute the gradient of a over a window .
9946	Return True if x < = y .
9947	Calculates the cluster meanshift .
9948	Compute KMeans clustering .
9949	Performs a DBSCAN on the data .
9950	Return a numpy array of all the srm_file entries that have been defined .
9951	Read the configuration file .
9952	Read the latools . cfg file .
9953	Print all LATools configurations .
9954	Copy SRM file
9955	Create a new config file .
9956	Change the default configuration .
9957	Exclude downhole from a boolean array .
9958	Return a subset of a boolean array .
9959	Compute despike for each time step .
9960	Plots the autocorrelation .
9961	Makes an array of the RNG values for each bin .
9962	Calculate the ratio between the analytes and the internal standard .
9963	Calibration function .
9964	Sample statistics for the given analytes .
9965	Returns a dictionary of the ablation times for each sample .
9966	Filter for a given analyte
9967	Filter the gradients for the given analyte .
9968	Calculate the correlation between two data sets .
9969	Filter correlation .
9970	Create a new filter .
9971	Return a dictionary of parameters used for filtering .
9972	Plot histograms of data .
9973	Calculates the summary stats for the given data .
9974	Load reference data from Google sheets .
9975	Return a subclass of the given type and G .
9976	Calculates the atomic weight of each element .
9977	Calculate the molecular weight of the molecule .
9978	Generates an ANSISequences from a list of Namedtuples .
9979	Annihilate the given predicate and stack .
9980	Dedup a stack .
9981	Compute Gauss weighted stats .
9982	r Gaussian distribution .
9983	Return the standard deviation of a .
9984	Returns a list of samples for the given subset .
9985	Despike the data .
9986	Calculate Bkg - weighted mean .
9987	Calculate 1D 1D 1D 1D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 2
9988	Subtract background from the data .
9989	Calculates the ratio of each stage .
9990	Make a subset of the analysis .
9991	Filter gradient threshold for each sample .
9992	Fit a classifier .
9993	Applies the given classifier to the given samples .
9994	Filter correlation .
9995	Filter the data according to the given filter .
9996	Filter the data according to the given filter .
9997	Return a string describing the status of the subset .
9998	Filter the data according to the given threshold .
9999	Filter out samples that have not been removed .
10000	Plot the gradient of the model .
10001	Returns a 2D crossplot of the model .
10002	Returns a 2D histogram of the model .
10003	Plots for each analysis .
10004	Plots for all analyses .
10005	Filter reports by analytes .
10006	Sample stats for each analysis .
10007	Get statistics for each sample .
10008	Minimal Reproduction Dataset Exported from LATOOLS .
10009	Export the trace data to a file .
10010	Save the log to a file .
10011	Export data from LATOOLS .
10012	Split a file by regex .
10013	Fold function .
10014	Plots the principal components of the data .
10015	Calculates the Bayes scale of a matrix .
10016	Calculates the median of a string .
10017	Decrease noise despike .
10018	Exponential decay .
10019	Add a new component to the model .
10020	Removes a node from the graph .
10021	Clears the graph .
10022	Remove all components that are not used by analytes .
10023	Return a list of components that match the given fuzzkey .
10024	Return a boolean array corresponding to the given key .
10025	Return the index of the component corresponding to the given filter .
10026	Return information about the components .
10027	Decorator to log the result of a function .
10028	Writes a log file .
10029	Read a log file .
10030	Wrap a function with a timeout .
10031	Get information about modem .
10032	Send a message to modem .
10033	Parse a file or string .
10034	Return a link to the nbviewer .
10035	Return the thumbnail div for this snippet .
10036	Return the HTML representation of the code .
10037	Return the code example .
10038	The URL of the viewer .
10039	Returns the file name of the output file
10040	Process a notebook file .
10041	Converts the notebook to a Python file .
10042	Download data files .
10043	Create a thumbnail from a list of pictures .
10044	Returns a header and description from a description string .
10045	Scale an image to a specified number of pixels .
10046	Saves the image to thumbnail .
10047	Copy the thumbnail figure to the output directory
10048	Return the URL for the given nbfile .
10049	Return a list of languages that have been changed in the database .
10050	Returns a function that returns the default value of a field .
10051	Process a thumbnail file .
10052	Pre - save the file .
10053	Refresh the thumbnails for the source image .
10054	Return a list of thumbnails .
10055	Create a thumbnail .
10056	Delete an image .
10057	Create a thumbnail .
10058	Returns a Thumbnail object for the given source .
10059	Delete a thumbnail .
10060	Called when a message is received .
10061	Subscribe to a number .
10062	Return a set of states that have been accepted or expired .
10063	Register a provider .
10064	Sends a message to the provider .
10065	Create a receiver blueprint for the given provider .
10066	Return a dictionary of receiver blueprints for each provider .
10067	Receive a message .
10068	Receive a status object .
10069	Decorator to return a JSON response from a function .
10070	Forward an object to all connected clients .
10071	Signs a web3 transaction .
10072	Estimate GAS for a given address and value .
10073	Estimate the amount of gas needed for the given operation .
10074	Write to the output buffer .
10075	Read a line from the serial port .
10076	Sends an email message .
10077	Return the message as a string .
10078	Return True if the message has bad headers .
10079	Attach an attachment .
10080	Registers the given services .
10081	Return a Config object from a module .
10082	Registers resources .
10083	Return the value for the given key .
10084	Close the given object and raise an exception .
10085	Initializes the data manager .
10086	Return the angular velocity of a given wavelength .
10087	Calculate the cauchy equation .
10088	Initializes the backend .
10089	Login to the backend .
10090	Returns a dictionary of all child domains for this account .
10091	Get all items for the given endpoint .
10092	Patch an object .
10093	Delete a resource .
10094	Determines if two file paths refer to the same file .
10095	Create a Junction link .
10096	Initialize the Jacquard logger .
10097	Raise an error if the message is invalid .
10098	Return a list of MutectVcfReader objects for the given file_readers .
10099	Returns a new column header for the given vcf_reader .
10100	Claims the given file_readers into a list of readers .
10101	Initialize the population stats for the given vcf_reader .
10102	Claims unclaimed file readers .
10103	Split data into lines .
10104	Return the first line terminator that starts with data .
10105	Return the suffix of a line terminator .
10106	Seek to the next line .
10107	Seek to the beginning of the previous line .
10108	Returns a list of lines from the file .
10109	Return the head of the file .
10110	Follow lines from the file .
10111	Claims the given file_readers .
10112	Parse a VCF file into a VcfRecord
10113	Return sample tag values as a dictionary .
10114	Return a list of tags for each sample .
10115	Join info fields .
10116	Formats the field to be used in the query .
10117	Return a sample field .
10118	Return a string representation of this sample .
10119	Adds a sample tag value .
10120	Adds a filter to the query .
10121	Return a list of available categories for the given user .
10122	Create a ProductsForm for the given category and products .
10123	Create a staff products form .
10124	Adds an error for a product .
10125	Decorator to memoise a function .
10126	Create a form for a model .
10127	Return a list of items pending or purchased .
10128	Sends an email to the user .
10129	Return a stream of OLS from the OpenStreetMap API .
10130	Parse an OSM file into a list of nodes way relations .
10131	Iterate over the Osid notes feed .
10132	Return True if the user passes the filter .
10133	Check if a user is met .
10134	Return the remaining quantity for the given user .
10135	Pre - filter for carts .
10136	Pre - filter for carts .
10137	Filter out items that have been reserved beyond the limit .
10138	Filter out cancelled proposals .
10139	Pre - filter for user .
10140	Decorator to mark the cart as modified .
10141	Create a Cart object for a user .
10142	Extend the current reservation duration to the maximum of the number of products in the cart .
10143	Applies a voucher to the cart .
10144	Validates that the cart is valid .
10145	Fix errors in the cart .
10146	Recalculates the discounts for the products in the cart .
10147	Add a discount to the cart .
10148	Decorator to create a report view .
10149	Yields rows of the given content type .
10150	Returns a form instance for the given request .
10151	Render data to CSV or HTML .
10152	Return a list of reports .
10153	Return a list of items sold .
10154	Summarise all sales and credit notes .
10155	Returns a QuerysetReport for all payments .
10156	Pass through to provider CreditNote refunds
10157	Return a list of inventory items for a product .
10158	Return a list of items that have a discount .
10159	Return a list of line items associated with a product .
10160	Return paid invoices that have no payments .
10161	Return a QuerysetReport for credit notes .
10162	Return a QuerysetReport for invoices .
10163	Return a list of attendees .
10164	Return a QuerysetReport for the Speaker Registration Status .
10165	Return all invoices for the given product and category .
10166	Return the number of categories available for the given context .
10167	Returns the amount available for the given context .
10168	Return True if the user is sold out and unregistered .
10169	Shortcut for the guided registration process .
10170	Edit profile .
10171	Handles a profile request .
10172	Handles the product category .
10173	Handles products .
10174	Handles a voucher .
10175	Checkout .
10176	View to access an invoice .
10177	View for invoice .
10178	Performs a manual payment .
10179	Refund an invoice .
10180	Applied credit note to invoice .
10181	Amend the product and quantity for a user .
10182	Extend a reservation for a user .
10183	Sends an e - mail to all invoices in a product .
10184	Return a list of badges for each invoice .
10185	Render a badge for a user .
10186	Return a list of discounts for the given categories and products .
10187	Annotates past_use_quantity and past_use_quantity for the given queryset .
10188	Return a list of all products for the given user .
10189	Applies payment to invoice .
10190	Returns a new InvoiceController for the cancellation fee .
10191	Generate access code .
10192	Lazy evaluation of a function .
10193	Return an object from a fully qualified name .
10194	Create an Invoice for the given cart .
10195	Create a manual invoice .
10196	Generate line items from the cart .
10197	Apply credit notes to an invoice .
10198	Checks if user can view invoice .
10199	Refresh the invoice and cart .
10200	Validates that the invoice is allowed to pay .
10201	Updates the invoice s status .
10202	Mark the invoice as paid .
10203	Return True if the invoice matches the cart .
10204	Update the validity of the invoice .
10205	Mark the invoice as voided .
10206	Refunds the invoice .
10207	Sends an e - mail to an invoice .
10208	Update this instance with the given data .
10209	Flatten a single field based on a schema .
10210	Print a list of files that have been downloaded .
10211	Download a file .
10212	Get all data for a project .
10213	Returns a list of processors for the given name .
10214	Print the inputs for the given processor .
10215	Removes the data from the server .
10216	Upload files to project .
10217	Upload a file to the server .
10218	Download data objects .
10219	Return a list of all subclasses of c .
10220	Get repo and project .
10221	Get photypes with suggested changes for a list of variants .
10222	Given a list of variants and a list of phenotypes and a list of suggested changes .
10223	Search Variants by coordinates .
10224	Return True if there is a match between the query and the current query .
10225	Update this element from the cache .
10226	Return a list of unique elements in a sequence .
10227	Authenticate asana and github .
10228	Select a value from a list .
10229	Get the data for a saved issue .
10230	Move issue data to other data .
10231	Get the data for a task .
10232	Gets the task with the given id .
10233	Save data to file .
10234	Applies on_load on_load on_load on_load on_load on_load on_load on_load on_load on_load on_load on_load .
10235	Decorator for transport task .
10236	Flush all items from the queue .
10237	Create a task .
10238	Format a list of task numbers with links .
10239	Create a missing task .
10240	Return a list of data types for this project .
10241	Log a message to EK .
10242	Initializes the serial port .
10243	Sets the maximum number of Waits to wait_sleep .
10244	Combine V4 and V3 fields into one .
10245	Return a JSON representation of the reads since a given timestamp .
10246	Sets the context string .
10247	Calculate Capacitive Lag and Inductive Lag
10248	Set the maximum demand period .
10249	Set the meter password .
10250	Unpack data into a list of bytes .
10251	Convert data into a string .
10252	Return a JSON representation of this meter .
10253	Calculate the CRC of a read .
10254	Splits an ekm date into a list of EkmDate objects .
10255	Return the number of months in the specified direction .
10256	Set the CT ratio .
10257	Assign a schedule to a given period .
10258	Assign a schedule to a season .
10259	Set Season Schedules .
10260	Assigns a holiday date to the model .
10261	Read Schedules for the specified tableset .
10262	Extracts the schedule and period for the given schedule .
10263	Read Month Tariffs request .
10264	Extracts the Month Tariff for the given month .
10265	Read Holidays and Schedules CRC
10266	Extracts the Holiday date for a given setting .
10267	Read Holiday dates and schedules .
10268	Writes a command message .
10269	Sends a PWD request to the EK server .
10270	Update all observers .
10271	Initializes the LCDLookup
10272	Request data from the server .
10273	Request A .
10274	Request B .
10275	Makes all the fields that are not RESERVED and CRC
10276	Calculates the fields of the block .
10277	Set the LCD for a list of items
10278	Set the relay .
10279	Send the termination string to the serial port .
10280	Set the pulse input ratio .
10281	Resettable KWH .
10282	Set the LCD .
10283	Iterate over all fields in a schema .
10284	Iterate over a schema .
10285	Return a list of paragraphs .
10286	Generate a random text string .
10287	Return statistics for the given result and elapsed .
10288	Return an escape string for the given color and text .
10289	Write text to the output stream .
10290	Return a summary of the test result .
10291	Parse command - line arguments .
10292	Setup the ivoire result
10293	Run the given configuration .
10294	Applies the given config to sys . argv
10295	Transform describe node to ast . ClassDef
10296	Yield example from describe body .
10297	Transform an example node into a function definition .
10298	Transform example body to include the context variable .
10299	Return a function that takes only self .
10300	Register a file finder .
10301	Convert source bytes to a Python code object .
10302	Applies the given arguments parser to the given options .
10303	Load a module by name .
10304	Load a Python module from a file or directory .
10305	Given a path and a list of filter specs return a generator of the paths of the given path .
10306	Check for new files in a given location .
10307	Return a list of messages for the given location .
10308	Add a command to a Places environment .
10309	Remove a place .
10310	Restart a Places instance .
10311	Call a function on a dictionary of results .
10312	Return a new MultiService with the given messages .
10313	Create an instance of the processmon service .
10314	Refresh the session for the given node .
10315	Remove expired nodes from the cache .
10316	Removes a node .
10317	Get the last updated time for a node .
10318	Return a dictionary of all nodes in the cluster .
10319	Refresh session and remove expired nodes .
10320	Increments the number of times modified .
10321	De - dereference the node .
10322	Delimit a list of values by the given delimiter .
10323	Check if path is bad .
10324	Merge two messages into a single message .
10325	Check if a token exists .
10326	Converts a token to a Query object .
10327	Return a function that returns a constant value .
10328	Return a splatted version of a function .
10329	Unsplatted function .
10330	Runs the given arguments in a new process .
10331	Create a new timer service .
10332	Given a parser and a reader return a Failure if there is an error .
10333	Return a parser for a literal .
10334	Return a parser for the given parser .
10335	Return a RepeatedParser for the given parser .
10336	Return a RepeatedParser for the given parser .
10337	Return a RepeatedOnceSeparatedParser with the given separator .
10338	Return a new parser for the given parser and separator .
10339	Checks all of the states in the given location .
10340	Close the connection .
10341	Check whether the state is valid .
10342	Add the heart service to the master service .
10343	Wrap a Taservice . MultiService into a Taservice .
10344	Freeze from a checkpoint .
10345	Freeze model from checkpoint .
10346	Saves the graph only .
10347	Saves the graph only from a checkpoint .
10348	Saves weights from a checkpoint .
10349	Restore from a checkpoint .
10350	Parse the given parser and return a new instance .
10351	Render a tag .
10352	Raise an exception if the provided arguments are not allowed .
10353	Get the context data for this tag .
10354	Parse a template tag .
10355	Get the context data for this tag .
10356	Convert caffeflow model to tensorflow session .
10357	Freeze a caffe model from a checkpoint .
10358	Saves the caffem model to disk .
10359	Create a list of rows from a list of columns .
10360	Grouper n ofill strings from iterable .
10361	Yields every other element of an iterable .
10362	Removes duplicates from an iterable .
10363	Return the next element of an iterable .
10364	Yields the next element of an iterable that satisfy a predicate .
10365	Partition items by bin_size .
10366	Convenience function to always iterate over an iterable .
10367	Removes exceptions from a list of callables .
10368	Return True if there are duplicates in the given iterable .
10369	Raise an AssertionError if iterable is not ordered .
10370	Swap partition result on miss .
10371	Partition a dictionary by key .
10372	Get the first n_queues from the queue .
10373	Resets iterator and saved iterators .
10374	Parse a token as a variable .
10375	Decorator to create a template tag .
10376	Return the descendant of this key .
10377	Return a list of dictionaries of the SQLite master .
10378	Iterate over an object .
10379	Select an element based on a selector .
10380	Parse a selector and return a list of results .
10381	Parse selector functions .
10382	Returns a list of nodes that are direct parents of rhs .
10383	Returns a list of nodes that are ancestors of rhs .
10384	Returns a list of siblings of lhs and rhs .
10385	Returns the nth child production for the given lexeme .
10386	Return a list of nodes that match the given list of validators .
10387	Ping an ICMP port .
10388	Make a request to the given url and return the response body .
10389	Expire the cache if it s older than age .
10390	Set the value of a key .
10391	Get a value from the store .
10392	Return True if the given key is contained in the store .
10393	Return True if all three records have the same signature .
10394	Create a NistBeaconValue from a JSON string .
10395	Create a NistBeaconValue from XML .
10396	Return the rendered content .
10397	Return a list of lines from a file .
10398	Return a list of rows .
10399	Validate token against expected data .
10400	Return an instance of Fernet .
10401	Validate a token .
10402	Create a new secret link .
10403	Return the counter between 0 and 4294967295 .
10404	Return the counter between 0 and 64 .
10405	Calculate the average duration for a given number of times .
10406	Setup outputs for the server and port .
10407	Create sources from configuration .
10408	Send an event to the queue .
10409	Try to restart stale sources .
10410	Parse a format string .
10411	Parse a log line into a dictionary .
10412	Validates that field . data is a valid expiration date .
10413	Raise a ValidationError if the reject message is not provided .
10414	Verify that the token is valid .
10415	Return the name of the device .
10416	Wrapper for _warn_node_old
10417	Connects the receivers to send email validation and reject notifications .
10418	Create a secret link .
10419	Sends an accepted notification to the user .
10420	Sends email notifications for the request .
10421	Sends email validation notification .
10422	Sends a notification about a rejected access request .
10423	Sends an email notification .
10424	Create a new secret link .
10425	Validate that a token is valid .
10426	Revoke this link .
10427	Create a new request .
10428	Returns a User object for the given request and user .
10429	Confirm email address .
10430	Accept this request .
10431	Rejectoves this request .
10432	Create a secret link .
10433	Generate a SHA - 512 hash .
10434	Verify that a message_hash is valid .
10435	Checks if the given record is an embargoed account .
10436	Create an access request .
10437	Confirm email address and access request .
10438	Return a connection to the SSH server .
10439	Reverse the given column .
10440	Return the index of the selected item .
10441	Return a Query object for this query .
10442	Return the version of the file .
10443	Set the version of the file .
10444	Initializes the SSH connection .
10445	Start timer .
10446	Wait for the service to be ready .
10447	Delete a secret link .
10448	Create a new Riemann client .
10449	Stops the connection .
10450	Empty queue .
10451	Adds events to the queue .
10452	Create a new Riemann client .
10453	Create an elasticsearch client .
10454	Encode an event into a protobuf .
10455	Encode a list of events into a protobuf message .
10456	Decode a protobuf message .
10457	Send events to the device .
10458	Generate a file preview .
10459	Retrieve a file preview .
10460	Send a message_dict to the queue .
10461	Send ACK to the controller who requested work on this task .
10462	Return True if the log time is greater than the log_interval .
10463	Respond to the server .
10464	Aborts the SASL session .
10465	Perform a mapping from a list of characters to a list of strings .
10466	Return an AdminFooterNode for the given token .
10467	Builds the payment parameters for a given amount and client_ref .
10468	Builds the registration credit card parameters .
10469	Sends a payment request to pay with an alias .
10470	Return a short version string for the given version .
10471	Constructs the file system .
10472	Initializes the filesystem widget .
10473	Sets up the backspace shortcut .
10474	Activates the item at the given index .
10475	Called when the user wants to select an item .
10476	Called when the user clicks on the home button .
10477	Finalize the resource . qrc file .
10478	Runs pyside - rcc .
10479	Clean the project .
10480	Returns a list of all children of this object .
10481	Refetch all children .
10482	Return the icon at the given index .
10483	Executes the given command with the given arguments .
10484	Get the maximum file descriptor .
10485	Close a file descriptor .
10486	Close all open file descriptors .
10487	Redirects the given stream to the given target .
10488	Set form widgets attributes .
10489	Import an app module .
10490	Import all the sub - modules for the given module_name .
10491	Includes the contents of the template .
10492	Return the URL for a gravatar .
10493	Return a gravatar for the given object .
10494	Checks if a path is a valid file system path .
10495	Check if the url is a valid S3 URL .
10496	Return the absolute path of a template file .
10497	Returns a list of objects in the bucket .
10498	Build a JSON representation of the worklfow .
10499	Executes the GBDX API .
10500	Archive all files in folder .
10501	Recursively create a directory structure .
10502	Return a list of files that match the given pattern .
10503	Restore the project from a folder .
10504	Create a new API client .
10505	Returns a list of files for the given path .
10506	Download a file .
10507	Check if a storage path exists .
10508	Returns the parent entity for the given path .
10509	Create a folder at the given path .
10510	Upload a file to the storage .
10511	Delete a folder or file .
10512	Validates that the storage path is valid .
10513	Create a new storage client .
10514	Create a new entity .
10515	Get details about an entity .
10516	Sets the metadata for an entity .
10517	Get metadata for an entity .
10518	Updates the metadata for the given entity .
10519	Delete metadata for an entity .
10520	Returns a list of projects owned by this user .
10521	Get details about a project .
10522	Create a new project .
10523	Deletes a project .
10524	Create a new folder .
10525	Get details about a folder .
10526	Delete a folder .
10527	Upload a file or content to a file .
10528	Copy file content from another file .
10529	Download content for a file .
10530	Gets the signed URL for a file .
10531	Emit a record .
10532	Converts the given service and version to a service .
10533	Return a new instance of this instance with the given headers .
10534	Return a new instance of this instance with the given parameters .
10535	Throw an exception with the given exception class .
10536	Return a list of fields to be displayed in the admin .
10537	Add a map job to the given job .
10538	Run GenotypeGVCFs on GVCFs .
10539	Run Oncotator .
10540	Sort the list by the given function .
10541	Return a list of datetime objects for the given time .
10542	Loads the data . json file .
10543	Shift the data by the given amount .
10544	Return the sum of the data .
10545	Return an instance of rfxcom_collect .
10546	Create a new user .
10547	Parse VN results .
10548	Parse release results .
10549	Parses the production staff results .
10550	Parse character results .
10551	Parse tag results .
10552	Parse user results .
10553	Create a tarball from a list of file paths .
10554	Apply op to all files in file_paths in output_dir .
10555	Copy a file into an output directory .
10556	Return a list of parameters to be passed to spark .
10557	Return a list of parameters to pass to the docker command .
10558	Refresh the metadata from the database .
10559	Run MuTect .
10560	Create this resource .
10561	Return a list of streams .
10562	Exports the device to a directory .
10563	Search for VNDB .
10564	Parse search results .
10565	Add a stream to the query .
10566	Reset the API key .
10567	Return a list of all users .
10568	Run BWA index .
10569	Connect to the database .
10570	Add a stream to the database .
10571	Add a stream to the database .
10572	Insert a datapoint into the database .
10573	Sync all datapoints in the database .
10574	Start the syncer .
10575	Stops the connection .
10576	Download URL job .
10577	Upload a job to S3 .
10578	Get labels for the given ontology and base .
10579	Return a tree representation of the ontology .
10580	Calculate the mean insert size for a given bam .
10581	Return the current container ID .
10582	Download and run a star .
10583	Create a new document .
10584	Export the stream to a JSON file .
10585	Return a Device object representing the device .
10586	Get a list of labels for the given ontology .
10587	Gets the hierarchy of the given ontology .
10588	Run wrapper .
10589	Populates the arg_parser with the given config data .
10590	Return empty config file .
10591	Returns the mount path for the current Docker container .
10592	Add an option to an arg_parser .
10593	Create an argument parser for this workflow .
10594	Create a pipeline command .
10595	Login to the websocket .
10596	Handles the response from the server .
10597	Ping the server .
10598	Create a new resource .
10599	Updates a resource .
10600	Delete a resource .
10601	Subscribe to a stream .
10602	Create a new user .
10603	Return a list of all devices .
10604	Run Cutadapt .
10605	Run samtools FASTA .
10606	Run samtools index on the given bam .
10607	Run Samba s markdup .
10608	Run Samblaster .
10609	Mark duplicates .
10610	Runs a Picard sort .
10611	Run BaseRecalibrator .
10612	Run Kallisto .
10613	Download and run RSEM .
10614	Get the user affinity for the given test set .
10615	Send a command to the websocket .
10616	Subscribe to a stream .
10617	Connect to the websocket .
10618	Reconnect to the server .
10619	Resubscribing to streams .
10620	Called when the websocket connection is open .
10621	Called when the websocket is closed .
10622	Called when a connection error occurs .
10623	Called when a message is received .
10624	Check to see if the websocket is pingable .
10625	Run GATK SelectVariants to select variants .
10626	Run GATK VariantFiltration .
10627	Run GATK variant recalibrator .
10628	Use GATK to apply variant recalibration .
10629	Combine Variants in GATK .
10630	Run Quickcheck on a bam .
10631	Load handlers from a dictionary .
10632	Writes configuration to the config file .
10633	Get the configuration from a file .
10634	Get a single ontology term .
10635	Search for an ontology .
10636	Searches for the given ontology .
10637	Iterate over all descendant terms in an ontology .
10638	Iterate over the labels of the descendants of iri .
10639	Iterate over labels in an ontology .
10640	Iterate over the terms in the hierarchy .
10641	Run FastQC .
10642	Add a stream to the query .
10643	Create a Flask application .
10644	Starts the Spark master container .
10645	Starts a Spark worker .
10646	Starts the datanode .
10647	Stops the Spark worker .
10648	Checks the status of the container .
10649	Yields a list of tokens from a file .
10650	Look up a zone .
10651	Fetch the configuration for the specified zone .
10652	Merge multiple resource record sets into a single XML document .
10653	Validates that the changeset is valid .
10654	Return a list of members with the highest fitness score .
10655	Return the fitness of each member .
10656	Returns the cost function for each member .
10657	Returns the median cost function for each member .
10658	Return the number of parameters for each member .
10659	Returns a list of all members of this cluster .
10660	Adds a parameter .
10661	Generate the next generation of the population .
10662	Normalize keys .
10663	Return a list of environment variables for the current user .
10664	Raise exception with given exceptions .
10665	Transform a list of hits into a list of dictionaries .
10666	Return a string representation of the result .
10667	Converts HTML to XHTML .
10668	Converts xhtml to html .
10669	Return a string representation of a document .
10670	Open the given document in a browser .
10671	Removes this element from the tree .
10672	Removes this tag from the parent .
10673	Get element by id .
10674	Return a CSSSelector instance for the given expression .
10675	Return a list of members for each logger .
10676	Return a dictionary of test class and test module counts .
10677	Return True if the class is a single class .
10678	Return True if the given module is a single module .
10679	Validate that the request has the correct parameters .
10680	Validate that the request s id is valid .
10681	Decodes a file system path .
10682	Escapes the given iterable to the given escape .
10683	Return the canonical name of the given encoding .
10684	Detect the BOM for the file .
10685	Gets the remote address from the forwarded_for list .
10686	Converts an amount to a decimal number .
10687	Parses data and returns a BeautifulSoup object .
10688	Parse a file and return an etree . ElementTree object .
10689	Convert a beautiful soup tree into a list of child elements .
10690	Return the current traceback .
10691	Return the exception as a string .
10692	Renders the traceback as HTML .
10693	Generate a plaintext representation of the traceback .
10694	Return a list of Line objects that are annotated with this function .
10695	Render the source of the table .
10696	Check if the egg info matches the given search name and link .
10697	Return a list of index URLs for the given project .
10698	Find all versions for the given project .
10699	Return an InstallationCandidate for the given requirement .
10700	Sort links by eggs and no eggs
10701	Returns the Content - Type header for the given url .
10702	Yields a generator of Link objects for each external link .
10703	Return True if this link is verifiable .
10704	Return a list of data files for the given package .
10705	Return a list of files that should be excluded .
10706	Parse requirements from a file .
10707	Join a list of lines into a list of lines .
10708	Ignore comments from an iterator .
10709	Compile a marker .
10710	Ensure that node is allowed in environment markers .
10711	visit an Attribute node by returning a fresh instance of it
10712	Coerce a value to a number .
10713	Copies the current request context .
10714	Push this context onto the context stack .
10715	Pop a new app context .
10716	Return a copy of this request .
10717	Matches the request .
10718	Push the request context onto the request context stack .
10719	Make a relative path relative to another relative path .
10720	Determines if a distribution is editable .
10721	Add a value preprocessor to the application .
10722	Add a function to the application s url default functions .
10723	Decorator to register an error handler .
10724	Stream generator with context .
10725	Create a response from a list of arguments .
10726	Generates a URL for the given endpoint .
10727	Safely join a filename to a directory .
10728	Return the root path for the given import name .
10729	Return an instance of jinja . loaders . FileSystemLoader
10730	Run the script with the given options .
10731	Return the cookie domain for the given application .
10732	Return a cache key for a link .
10733	Check if a distribution is purelib .
10734	Return a list of uninstallation paths for a distribution .
10735	Check that the wheel is compatible with the given version .
10736	Build one wheel .
10737	Iterate over all symbols in the given code .
10738	Decorator to refresh the rate if it has not yet been refreshed .
10739	Add egg - info files to self . filelist
10740	Writes the DELETE_MARKER_MESSAGE to the file at the given directory .
10741	Return True if we are running in a virtualenv .
10742	Return the username of the current user .
10743	Return a distutils . dist . Distribution instance for the given distribution .
10744	Parse the Cache - Control header into a dictionary .
10745	Return the cached response for the given request .
10746	Adds the response to the cache .
10747	Updates the zipimporter cache for the given path .
10748	Load the script template .
10749	Install site . py .
10750	Saves the path to the file .
10751	Convert a value to a dictionary or list .
10752	Add filters to the given filterer .
10753	Configures a logging handler .
10754	Add handlers to the logger .
10755	Add handlers and filters to the logger .
10756	Executes a Python script file .
10757	Override tempfile . tempdir with replacement .
10758	Get the URL and revision from the URL .
10759	Return the first element of obj with the given argument .
10760	Generate a file from a source file .
10761	Compiles templates to a file .
10762	Return the default Python cache .
10763	Find eggs in a zip file .
10764	Return Distribution objects for the given path_item .
10765	Decorator to declare a namespace for a package .
10766	Return a list of all subclasses of cls .
10767	Return the adapter for the given ob .
10768	Ensure that a directory exists .
10769	Iterate over entry points for a given group .
10770	Return True if this distribution can be added to this distribution .
10771	Return the distribution that matches the requirement .
10772	Evaluate a marker .
10773	Evaluates the given text and returns the result .
10774	Format a log record .
10775	Format a number to a currency .
10776	Parse a number pattern .
10777	Return a decimal number of the given precision .
10778	Return the decimal precision of a number .
10779	Return the scientific notation elements of the given value .
10780	Return the total number of seconds from a TimeDelta object .
10781	Parse a list of requirements .
10782	Return the unpatched version of distutils .
10783	Check that value is a list of requirements .
10784	Fetch build egg .
10785	Roll dice .
10786	Convert a price object to a Price class .
10787	Create an instance of Price class .
10788	Validate a request .
10789	Get the method for the given arguments .
10790	Apply the given method to the given arguments .
10791	Deprecated . Use request . blueprint instead
10792	The blueprint for this endpoint .
10793	Attaches an error multidict to the request .
10794	Create an abstract distribution based on a requirement .
10795	Add a requirement to this virtualenv .
10796	Walk all unnamed requirements to install .
10797	Check whether to upgrade or re - install a requirement .
10798	Return a list of requirements that need to be installed .
10799	Return a list of all namespace packages .
10800	Return a JSON representation of an object .
10801	Return a list of tokens annotated with the given annotation .
10802	Merge HTML annotations between two sequences .
10803	Copy annotations from src to dest .
10804	Return a list of tokens that are not pre - tags or post - tags .
10805	Serialize a list of tokens to HTML .
10806	Expand a list of tokens into a list of tokens .
10807	Given a list of unbalanced end tags return a list of unbalanced end tags .
10808	Fixup a list of chunks into a list of tokens .
10809	Flatten an element .
10810	Splits text into a list of words .
10811	Start tag of an element .
10812	End of a tag .
10813	Serialize an HTML fragment into a string .
10814	Fixup ins and del tags .
10815	Extract a constant from a code object .
10816	Create a cache URL for this region .
10817	Autolink an element .
10818	Kill conditional comments .
10819	Create a document from a string .
10820	Decorator to return a JSON response from the API .
10821	Return a TreeWalker for the given tree type .
10822	Export an svn repository to a given location .
10823	Get the revision for the given location .
10824	Wraps a function to be called after the first request .
10825	Return the name of the import .
10826	Propagate exceptions from the config .
10827	Return the full path to the instance .
10828	Update the template context with the given context .
10829	Handles an HTTP exception .
10830	Tries to trap HTTP exception .
10831	Handles an exception .
10832	Raise a routing exception .
10833	Perform a full dispatch request .
10834	Create a default OPTIONS response .
10835	Create a url adapter for the given request .
10836	Injects values into the url_default functions for the given endpoint .
10837	Yields unique values from an iterable .
10838	Handles the requires section of the metadata dictionary .
10839	Converts a requirement to requires_dist .
10840	Convert pkginfo_path to metadata .
10841	Import all of the modules .
10842	Return a generator of all subclasses of this class .
10843	Return a list of method names .
10844	Find the basename for the given name .
10845	Check if path is a module path .
10846	Iterate over the contents of the site packages directory .
10847	Yields a list of absolute paths for the given module .
10848	Dumps the default JSON encoder and sort keys .
10849	Load the default JSON decoder .
10850	Set multiple values from a mapping .
10851	Increments the value of key by delta .
10852	Return a string representation of a Python object .
10853	Build a dictionary of editable options from a request .
10854	Populates the link for this upgrade .
10855	Ensures that the build location is set to the given parent_dir .
10856	Removes the temporary build directory .
10857	Return a pkg_resources . Distribution for the given egg_info path .
10858	Return the data for this form .
10859	Return a list of WSGI headers for this response .
10860	Converts an IRI to a URI .
10861	Return the user s cache directory .
10862	Return the path to the user - specific data directory .
10863	Return a path to the user s logs directory .
10864	Return the user - specific configuration directory .
10865	Return a list of directories for the given application .
10866	Iterate over all module files in sys . modules .
10867	Restarts the process with the reloader .
10868	Converts a string to a text type .
10869	Return path to CA bundle .
10870	Parse an HTML document .
10871	Parse the given stream into a DOM tree .
10872	Parse a fragment from a stream .
10873	Return a list of all non - zero transmissions for a word .
10874	Convert arguments to tokens .
10875	Bind to the server .
10876	Print the report to stdout .
10877	Load the bytecode from a file .
10878	Converts a dictionary of style parameters to a dictionary of style parameters .
10879	Runs a VCS command .
10880	Return the implementation version .
10881	Return a list of Distribution objects for the given location and extension .
10882	Find external links from page .
10883	Open a local file or directory .
10884	Process a URL .
10885	Removes all absolute paths from sys . path .
10886	Return a list of paths to sys . path .
10887	Add a package to sys . path .
10888	Add path components to sys . path .
10889	Check if the current user site is the same as the user site .
10890	Add paths to USER_BASE and USER_SITE .
10891	Set up the quit and exit functions .
10892	Alias for UTF - 8 .
10893	Set the default string encoding to UTF - 8 .
10894	Force global eggs after local site - packages .
10895	Fix classpath from sys . path .
10896	Runs a command in a non - blocking way .
10897	Return True if Pyrex is installed .
10898	Convert Cython sources to C ++ sources .
10899	Yields the contents of the application .
10900	Get a resource .
10901	Return a dictionary describing the user agent .
10902	Return True if name is a valid URL .
10903	Unpack a file from a link .
10904	Download an http link .
10905	Check if download_dir and link . filename exist .
10906	Format a currency .
10907	Register an exchange .
10908	Decode data according to content - encoding .
10909	Default template context processor .
10910	Render a template with the given context .
10911	Render a template .
10912	Render a template from a string .
10913	Parse a version string .
10914	Return True if name is declared .
10915	visit a Name node by returning a fresh instance of it
10916	visit a Include node by returning a fresh instance of it
10917	visit a FromImport node by returning a fresh instance of it .
10918	Create a wheel file for the given base directory .
10919	Decorator to atomize a function .
10920	Create a new instance of the given provider class .
10921	Converts a unicode string to a URL - encoded string .
10922	Return a list of wheels that match a requirement .
10923	Populate a requirement set with requirements .
10924	Export a Bazaar package to a temporary location .
10925	Return a list of AmazonProduct objects for the given response group .
10926	Iterate over all pages .
10927	Return the ancestor of this node .
10928	Return a list of all children of this node .
10929	Return the element at the given path .
10930	Return the text of the element at the given path .
10931	Gets the value of the element at the given path .
10932	Gets the price and currency for this offer .
10933	Gets the price and currency of the list .
10934	Send a request to the server .
10935	Builds the response for the given request .
10936	Create an attribute getter .
10937	Return the title of a string .
10938	Sort value according to the given attribute .
10939	Return a list of values grouped by attribute .
10940	Apply a function to each element of a sequence .
10941	Create a logger for the given application .
10942	Compare two constant time values .
10943	Verify the signature of a key and value .
10944	Derive a key from the secret key .
10945	Returns a base64 - encoded signature for the given value .
10946	Return a signature for the given value .
10947	Verify that a signature is valid .
10948	Unsign a signed value .
10949	Sign the value with the timestamp .
10950	Validate a signed value .
10951	Serialize a Python object to a byte string .
10952	Send an error to the server .
10953	Return a list of packages that match the given where .
10954	Yield packages that have no parents .
10955	Yields all subdirectories of base_path .
10956	Prepare the response for the given request .
10957	Unsign a wheel file .
10958	Unpack a wheel file to a given destination .
10959	Install scripts for the given distributions .
10960	Create a new graph and arrange all of its contents .
10961	Redraws the graph .
10962	Returns the node with the given ID or None if not found
10963	Sets the directed edges of the graph .
10964	Called when edges are added to the graph .
10965	Called when a component is changed .
10966	Handles left - dclick events .
10967	Called when the diagram canvas has changed .
10968	Clears the diagram canvas .
10969	Called when a domain model has changed .
10970	Map the current model to the given new model .
10971	Unmap the model with the new model .
10972	Map an element to a diagram .
10973	Set the node s style attributes .
10974	Parse xdot data .
10975	Process the font .
10976	Create an ellipse from a list of tokens .
10977	Create a polygon from a list of tokens .
10978	Create a polyline from a list of tokens .
10979	Return a Text instance from a dictionary of tokens .
10980	Processes a list of image tokens .
10981	Render a GridFS file .
10982	Save the object to dot file .
10983	Load dot file from disk .
10984	Return True if point_x and point_y are in the ellipsoid .
10985	Draws the bounding box .
10986	Create a new dot graph wizard .
10987	Connect to the SQLAlchemy database layer .
10988	Parse the DOT code .
10989	Create a new graph .
10990	Open file dialog .
10991	Save the model to a file .
10992	Saves the model to a file .
10993	Configure the graph for the given info .
10994	Configure the nodes for the given info .
10995	Configure the edges for the given info .
10996	Edit the about view .
10997	Add a node to the graph .
10998	Add an edge to the graph .
10999	Add a sub - graph to the graph .
11000	Add a cluster to LiVemodal
11001	Request a new graph .
11002	Edit godot options
11003	Configure the dot code .
11004	Called when the Godot exits .
11005	Move points to the origin .
11006	Save the object to a file like object .
11007	Load data from a file - like object .
11008	Save data to a file .
11009	Load an object from a file .
11010	Create an alias for a property .
11011	Parse a text file into a list of words .
11012	Return a list of start words .
11013	Add a new chain .
11014	Removes a chain .
11015	Build the chain for the given source .
11016	Generate a sentence from a chain .
11017	Create a new graph .
11018	Add a node to the graph .
11019	Delete a node from the graph .
11020	Returns the node with the given ID .
11021	Delete an edge from the graph .
11022	Add an edge to the graph .
11023	Adds a sub - graph to the graph .
11024	Check if the program has changed .
11025	Sets the node lists .
11026	Parse a DOT file into a graph .
11027	Parse a DOT file .
11028	Build a top - level graph from a list of tokens .
11029	Build a graph from a list of tokens .
11030	Get time units and multiplier for a given number of seconds .
11031	Return a string representation of a number of seconds .
11032	Loads the editor graph from the given path .
11033	Create the UI for the graph .
11034	Split a sequence into n lists .
11035	Yields the elements of an iterable in chunks of length .
11036	Run the Godot application .
11037	Returns a list of subgraphs and edges of the given object .
11038	Append a child to an object .
11039	Insert a child into the given object .
11040	Delete a child from an object .
11041	Called when all subgraphs and clusters have been replaced .
11042	Called when the children of the object have changed .
11043	Returns the label for the given object .
11044	Set the label of the object .
11045	Called when the label is changed .
11046	Initializes the graph .
11047	Updates the editor .
11048	Add listeners to the graph .
11049	Replaces old and new nodes .
11050	Called when a node is changed .
11051	Adds the given features to the graph .
11052	Replaces old edges with new edges .
11053	Called when edges are changed .
11054	Add edges to the graph .
11055	Parse an Xdot directive .
11056	This method is called when drawing is done .
11057	Create a node for the given row_factory_kw .
11058	Create an edge from a graph .
11059	Prepares the connection to the database .
11060	Parse an Xdot drawing directive .
11061	Parse a Xdot label directive .
11062	Called when drawing has changed .
11063	Called when the component s position changes .
11064	Called when the component s position changes .
11065	Handles right - down events .
11066	Highlights information about the given style .
11067	Draw the mainlayer .
11068	Check if point_x and point_y are inside the polygon
11069	Draw the main layer .
11070	Handles an event .
11071	Runs the function in the queue .
11072	Returns a full page URL for the given page number .
11073	Render previous and next links .
11074	Render SEO links .
11075	Return True if the content type matches the given pattern .
11076	Selects the best match for the given content type .
11077	Rewrite a URL .
11078	Remove URL Auth .
11079	Create a URL identifier from user and password .
11080	Normalize a host according to the given scheme .
11081	Return a list of all modules in the given directory .
11082	Return a list of all modules in the given directory .
11083	Return a list of all sub - modules of a module .
11084	Return a list of all subclasses of the given module .
11085	Return a list of all classes in a module .
11086	Ensures that a directory exists .
11087	Create a text blob with the given contents .
11088	Check if a number is a Luhn number .
11089	Return the git revision .
11090	Loads the specified module .
11091	Adds a path to the path list .
11092	Return a ModuleLoader for the given module name .
11093	Split a line into two lines .
11094	Removes namespaces from root .
11095	Check consistency of the package and version .
11096	Create a new instance from a yaml file .
11097	Merge the given dictionary with the given dictionary .
11098	Execute all the actions .
11099	Create an instance from a yaml file .
11100	Add details to a Flask request .
11101	Emit a single record .
11102	Adds the rendition to the context
11103	Log the attempt at key .
11104	Add url to queue .
11105	Start all the workers .
11106	Set the value of a key .
11107	Get the value of a key .
11108	Returns a dictionary of all the entries for the given key .
11109	Returns the index for the given key .
11110	Delete a key .
11111	Plots a heatmap of the feature importance report .
11112	Add a number of months to a timestamp .
11113	Add a number of months to a date .
11114	Check if the current date is a christmas period .
11115	Use a music service .
11116	Use the storage service with the given name .
11117	Load data from CSV file .
11118	Return a list of values from a JSON file .
11119	Convert data to a JSON file .
11120	Filter data by label .
11121	Calculate the average of the values for each label .
11122	Generate a feature importance report .
11123	Restores data from session .
11124	Merge dictionary b into a .
11125	Decorator to handle multiple dispatch functions .
11126	Decorator to add a method to a dispatch function .
11127	Import all the apps that have a sizedimage module .
11128	Verify that a block is registered under the given type .
11129	Registers a block .
11130	Unregisters a block of type block_type .
11131	Converts a file to an MP3 file .
11132	Return a string describing the desired version .
11133	Handles SSL redirection .
11134	Initializes the celery task .
11135	QueuedEmail model .
11136	Parse a Content - Type header value .
11137	Parse a cache control header value .
11138	Parse a Content - Type into a datastructures . ContentType object .
11139	Parse a Forwarded header value .
11140	Parse a comma - separated list of strings .
11141	Parse a list of parameter names and values .
11142	Resizes an image to fit_width
11143	Adds a value to the link .
11144	Download file at url .
11145	Connect to Drive API .
11146	Upload a file to Google Storage .
11147	Connect to the music folder .
11148	Writes sky parameters to file .
11149	Update the filenames of the sky files .
11150	Reads the ahpi absorption from a file .
11151	Scale a_phi by the given parameter .
11152	Read water absorption from file_name .
11153	Read water scattering from file_name .
11154	Read the IOP from a file .
11155	Writes iop to file_name
11156	Build b with scattering fraction of water .
11157	Build total absorption .
11158	Build total attenuation C
11159	Build all IOPs
11160	Batch parameters .
11161	Read a parameter file into a dictionary .
11162	Convert a string to a list of floats .
11163	Read the PR report .
11164	Sets the handler for the given signals .
11165	A pseudo - handler for a SIGUSR signal .
11166	Default handler for the given signal .
11167	Pauses a SIGALRM or SIGCONT .
11168	Aborts the process .
11169	Respond to a status signal .
11170	Unregisters an event from a list of signals .
11171	Fetch metrics for a given metric and time range .
11172	Return a list of metrics sorted by the given criteria .
11173	Return a list of all elements in an iterable .
11174	Print an item to stdout .
11175	Print all elements of an iterable .
11176	Returns the signature for the given function .
11177	Initializes the signature from a partial instance .
11178	Return a copy of the command - line arguments .
11179	Ignore metainf files .
11180	Return a key for a file .
11181	Convert a VLQ to an integer .
11182	Read data into a dictionary .
11183	Parse starCraft II replay header .
11184	Returns a string representing the duration of the given number of seconds .
11185	Print details about the game .
11186	Gets the data for this batch .
11187	Open File Search result .
11188	Writes the batch to file .
11189	Perform the data processing for each cell in the data file .
11190	Display the graphic connection .
11191	Print the graphic information .
11192	Displays the error message .
11193	Hides the error message .
11194	Runs the planarrad script .
11195	Cancels the planarrad .
11196	Quit the program .
11197	Saves the current figure to disk .
11198	Open log file .
11199	Open documentation .
11200	Populate the prerequisite actions .
11201	This method is called when a button is clicked .
11202	Reimplements mouse_move method .
11203	Display the graphic at x y .
11204	Return a LockSet for the given genesis and privkey .
11205	Sign this message with the given private key .
11206	Return a hash of the message .
11207	Checks if the cluster is valid .
11208	Issue funds .
11209	Return the lock for the last round .
11210	Return the last voted blockproposal .
11211	Return the last valid lockset .
11212	Return the amount of time to wait for the transaction to complete .
11213	Called when a HDCProtocol is about to be processed .
11214	Create a list of privkeys for a number of colors .
11215	Return the delay between the sender and receiver .
11216	This method is called when a slow transport is received .
11217	Create a proxy object for the given contract address .
11218	Convert a native contract address to a native contract class .
11219	Register a native contract .
11220	Update the filter with the given data .
11221	Called when a list of transactions has been received .
11222	Convert VGG image to RGB .
11223	Convert image to VGG .
11224	Get the f_layer for the given layer .
11225	Get the output of a layer .
11226	Returns a dictionary of features for each layer .
11227	Create a new key file .
11228	Finish the job and return the exit code .
11229	Load data from a file .
11230	Put items into the database .
11231	Releases the load .
11232	Return a list of tables for this dataset .
11233	Fix a distutils . ccompiler . CCompiler . compile method .
11234	Return the path to the Teradata client .
11235	Get the value for the given key .
11236	Set the value of a key .
11237	Write the table output to log .
11238	Executes a query .
11239	Get the value for the given key .
11240	Writes the default configuration file .
11241	Set the columns to be filtered .
11242	Write the table to a GIRAFFE file .
11243	Convert data to a string .
11244	Convert a string to a float with a multiplier .
11245	Return a dictionary of all gains in a string .
11246	Parse device settings from a string .
11247	Wrap text to 80 characters wide .
11248	Return a list of SoapySDR devices .
11249	Set the center frequency .
11250	Calculate the result of the PSD calculation .
11251	Wait for the future to complete .
11252	Update the psd_state with the given samples_array .
11253	Read data from file .
11254	Write PWR array to file .
11255	Submits the given function with the given arguments .
11256	Convert time to repeats .
11257	Calculate the frequency plan for each bin .
11258	Create a buffer .
11259	Set up the data stream .
11260	Stops the stream .
11261	Tune to a specified frequency .
11262	Perform a sweep of the data .
11263	Sets the address of the slave .
11264	Run CMake .
11265	Filter a list of datetimes .
11266	Masks the given datetime with the given options .
11267	Mask the given datetime to the first weekday of the week .
11268	Keep only the dates that are present in the database .
11269	Converts a list of datetime objects to a list of datetime objects .
11270	Return a list of dates to keep for the given dates .
11271	Return a list of dates to be deleted .
11272	Get the SPI control byte .
11273	Read a single bit from the specified address .
11274	Writes a boolean value to the specified address .
11275	Get the bit number of a bit pattern .
11276	Watch events for the specified port .
11277	Handles events from the event queue .
11278	Bring a GPIO interrupt into userspace .
11279	Set the GPIO interrupt edge .
11280	Wait until a file exists .
11281	Register a callback for a pin .
11282	Deregister a pin .
11283	Enable all gpio interrupts .
11284	Send bytes_to_send to the device .
11285	Renders the form .
11286	Return True if the form has any errors .
11287	Render a link .
11288	Extract version from setup . cfg .
11289	Override to customize the kwargs of the form .
11290	Helper method to check the status of the response .
11291	Make a GET request to the API .
11292	Get download link .
11293	Upload a link to a folder .
11294	Upload a file to a folder .
11295	Upload a file to a remote server .
11296	Get remote upload status .
11297	Returns a list of all files in a folder .
11298	Returns a list of running conversions for this folder .
11299	Calculate the humidity given temperature and dewpoint .
11300	Calculate Dewpoint from temperature and hum .
11301	Publish a message to the server .
11302	Calculate CRC of data .
11303	Verify that the data is valid CRC .
11304	Unpack a storm date into a string .
11305	Return True if there is an archived B archive .
11306	wakeup the weather station
11307	Send a command to the weather station
11308	Send DMPAFT command .
11309	Get the newest record from the weather station .
11310	Parse the data into a dictionary .
11311	Update weather data .
11312	Initializes the log .
11313	Return a list of PUB services for the given opts .
11314	Get the wind speed for a station .
11315	Updates the PWS data .
11316	Set self . args and self . args
11317	Publishes the config to a file .
11318	Decorator to decide whether the user wants a request .
11319	Initializes the extension .
11320	Fulfills a list of requirements .
11321	Push this context onto the override context stack .
11322	Pop from the override context stack .
11323	Override the current value with the override value .
11324	Push additional context into the context stack .
11325	Pop a new additional context .
11326	Adds an additional element to the tree .
11327	Remove duplicate field names from a list of field names .
11328	Interpretation of results .
11329	Extract parameters from a query .
11330	Run a query .
11331	Returns a pandas dataframe representing the data .
11332	Return a NetworkX graph representing the results of the query .
11333	Plot a pie chart .
11334	Plot the data .
11335	Plot a bar chart .
11336	Return a CSV representation of the result .
11337	Check if the user has permission to access the dashboard .
11338	Adds the widget to the context
11339	Return a list of widgets sorted by position .
11340	Return a list of widgets that need to be updated .
11341	Register a dashboard widget .
11342	Unregisters the given widget class .
11343	Gets the last update for this widget .
11344	Get the setting for the given setting name .
11345	Save a setting .
11346	Return True if the last update should be updated .
11347	Convert an array to a numpy array .
11348	Create a new empty array of the given shape and type .
11349	Concatenates two bolt arrays .
11350	Check whether the given arguments are BoltArraySparks .
11351	Format a list of axes to a valid shape .
11352	Wrap a function to create a BoltArraySpark .
11353	Reshape the array so that the keys are mapped over the given axes .
11354	Convert numpy array to Spark array .
11355	Corresponds to the tordd function .
11356	Stack the elements of the RDD into a new RDD .
11357	Apply a function to each element of the RDD .
11358	Split the RDD into chunks of the given size .
11359	Apply func to each element of the array .
11360	Apply a function to each element of the RDD .
11361	Return the plan of the array .
11362	Removes padding from an array .
11363	Return the number of elements in a plan .
11364	Returns a list of slices for a plan .
11365	Returns a boolean mask for the given indices .
11366	Repartitions the RDD with the given number of partitions .
11367	Stack the array into a new array .
11368	Aligns the values and key axes to the specified axis .
11369	Returns the first element of the RDD .
11370	Return a StatCounter for each element in the array .
11371	Return the mean across the given axis .
11372	Return the variance across the given axis .
11373	Return the standard deviation along an axis .
11374	Return the sum across the given axis .
11375	Returns the maximum value across the given axis .
11376	Return the minimum value along an axis .
11377	Split the RDD into chunks of size .
11378	Swap the data in kaxes with vaxes .
11379	Transposes the values along the given axes .
11380	Swap two axes .
11381	Reshape the RDD to the given shape .
11382	Reshape the keys and values to the same size .
11383	Squeeze the array along the given axis .
11384	Cast each element of the RDD to the given dtype .
11385	Return a new RDD with elements clipped to the given range .
11386	Return a numpy array representing the elements of the RDD .
11387	Takes a tuple list ndarray or iterable and returns it as a tuple .
11388	Return a tuple representing the elements of a list or ndarray .
11389	Check whether the given axes are in the given shape .
11390	Return True if a and b are equal .
11391	Convert a list into a list of integers .
11392	Convert a slice into a new slice .
11393	Validate that two axes are istransposeable .
11394	Return True if two keys have the same size .
11395	Concatenates a list of values along a given depth .
11396	r Expand an array with extra dimensions .
11397	Return the elements of the RDD with respect to the index of each element .
11398	Decorator to wrap a function .
11399	Look up a constructor by mode .
11400	Reshape the array to the given shape .
11401	Transposes the array along the given axes .
11402	Reshape the array to the given shape .
11403	Transposes the array along the given axes .
11404	Return a new array of the given shape and type .
11405	Return numpy . ndarray with zeros initialized to 0 .
11406	Concatenate arrays along given axis .
11407	Calculates the discrete likelihood .
11408	Computes the most likely alpha .
11409	Computes the MLE of the discrete data .
11410	Computes the discrete best alpha for the given data .
11411	Computes the discrete best alpha .
11412	Plot a PF distribution .
11413	Fit to the lognormal distribution .
11414	Sanitize Turbo HTML .
11415	Configure Yandex analytics .
11416	Returns a list of tags for the given list of tags .
11417	Return the MD5 hash of the key .
11418	Return the SHA - 256 hash of the key .
11419	Return the SHA - 512 hash of the key .
11420	Parse a byte string into a long .
11421	Decode a base64 - encoded key .
11422	Parses and validates a list of options .
11423	Process SSH key data .
11424	Process SSH DSS key .
11425	Process an ECDSA key .
11426	Process an ed25516 key .
11427	Parse SSH2 public key .
11428	Perform a single step of the GSS session .
11429	Performs a single step of the authentication process .
11430	Return a list of Mechanism objects .
11431	Store the credentials for this GSSAPI session .
11432	Main entry point .
11433	Initializes the distribution .
11434	Context manager to create an audio file .
11435	H5BP CSS file .
11436	Set the DJFRONTend normalize stylesheet .
11437	Render djfrontend . css .
11438	Render modernizr script tag .
11439	Render djfrontend script tag .
11440	Return HTML for jQuery UI .
11441	Render jQuery Datatables for frontend .
11442	Return HTML for djfrontend jQuery Datatables .
11443	Loads the jQuery Datatables plugin .
11444	DJFRONTEND_JQUERY_FORMSET
11445	View for djfrontend .
11446	DJFRONTEND_JQUERY_SMOOTHSCROLL .
11447	Return HTML for djfrontend .
11448	DJFRONTEND_GA_SETALLOWLINKER DJFRONTEND_GA
11449	Render a CodeMirrorTextarea .
11450	Generate a list of auth hashes for the given user .
11451	Calculate the expiry time for a number of minutes .
11452	Return a token for a user .
11453	Serializes a Users object to a dictionary .
11454	Deserialize a profile into a dictionary .
11455	Update a user s profile .
11456	Send a user login failed signal .
11457	Return a User instance for the given token .
11458	Check if the request is secure .
11459	Get the username of a user .
11460	Create a new user .
11461	Login to a user .
11462	Logout the user .
11463	Login to the server .
11464	Login to the user with the given credentials .
11465	Login with resume token .
11466	Change the user s password .
11467	Sends a forgot_password signal .
11468	Resets the user s password .
11469	Merge two dictionaries into one .
11470	Read the contents of a file .
11471	Returns an AleaId for the given object or model .
11472	Return a list of AleaId objects for the given object_ids .
11473	Return the object_id for the given model .
11474	Return a list of ObjectMapping objects corresponding to the given meteor_ids .
11475	Get an object from the database .
11476	Set default meteor ids for all objects in the model .
11477	Set the default meteor_id for all objects in the model .
11478	Truncates the given models .
11479	Truncates the database for the given app_label .
11480	Truncates the database backwards .
11481	Initializes the build options .
11482	Set up the build and build . py files .
11483	Runs the build .
11484	Converts a path to a directory path .
11485	Generate a random seed from a list of values .
11486	Return the state of the simulation .
11487	Generate a random string .
11488	Decorator to set the API endpoint .
11489	Yields all API endpoints for the given object .
11490	Clears the API path map cache .
11491	Print a dictionary .
11492	Validate kwargs for a function .
11493	Called when the connection is open .
11494	Called when connection is closed .
11495	Called when a WebSocket message is received .
11496	Parse a DDP message and return a list of dictionaries .
11497	Process a DDP message .
11498	Dispatch a message to a handler .
11499	Initiate a connection to the server .
11500	Receive a ping message .
11501	Receive a sub message .
11502	Unsubscribe from the server .
11503	Receive a method from the server .
11504	Return a JSON representation of the connection info .
11505	Start a DDP server .
11506	Main entry point for the server .
11507	Print a message .
11508	Stops all worker threads .
11509	Wait for all threads to be stopped .
11510	Return a psycopg2 connection .
11511	Wait for a NOTIFY message .
11512	Return True if greenify is enabled .
11513	Return a random ID for the given name .
11514	Autodiscover dddp . api . API
11515	Return a dictionary representation of the error .
11516	Get an object from a factory .
11517	Emit a new log record .
11518	Create a negotiation middleware for the given renderers .
11519	Adds a route context to the application .
11520	Add a resource object to this route .
11521	Run an application .
11522	Send a message to the device .
11523	Send multiple messages to APNS .
11524	Return a list of inactive feedback IDs .
11525	Send a message to the GCMMessenger .
11526	Send a bulk message to the GCMMessenger .
11527	Send JSON to the device .
11528	Send data to the API .
11529	Return a model from a module location .
11530	Fast forward selection algorithm
11531	Search Giphy API .
11532	Return a new Giphy object for the given term and phrase .
11533	Trending API .
11534	Create a gif .
11535	Return a GIPHY screensaver .
11536	Upload a file to GIPHY .
11537	Normalize frames height and size to integers .
11538	Fetch data for an endpoint .
11539	Translate an image to a GIF .
11540	Return a list of GiphyImage objects that are trending .
11541	Returns a GiphyImage object for the given gif_id .
11542	Upload an image to GIPHY .
11543	Create an access control extension .
11544	Authenticate with Youtube API .
11545	Upload a new video entry .
11546	Checks the status of a video .
11547	Updates an existing video .
11548	Deletes a video .
11549	Check availability of a video .
11550	Check video availability .
11551	Return a list of videos for the authenticated user .
11552	Upload a video to the server .
11553	Upload a video .
11554	Redirect to the upload page .
11555	Remove a video .
11556	Return the entry for this video .
11557	Save the video to youtube .
11558	Deletes the video .
11559	Updates the metadata for this project .
11560	Updates a metadata field .
11561	Updates this item .
11562	Parse a string into a list of AST nodes .
11563	Dumps a list of trees into a single string .
11564	Load data from a file - like object .
11565	Read data from a file .
11566	Parse a node from a string .
11567	Create a node with the given name and length .
11568	Return a newick string .
11569	Converts a string to ASCII art .
11570	Return the node with the given label .
11571	Removes the leaves from the tree .
11572	Resolves polytomies .
11573	Removes internal names .
11574	Removes leaf names .
11575	Decorator to check if user is authenticated .
11576	Disposes a JSON string into a list of strings .
11577	Require a setting with the given name .
11578	Return the first argument with the given name .
11579	Returns a list of arguments for the given name .
11580	Asynchronous callback is a function that will be executed asynchronously .
11581	Get a cookie from the Cookie Monster .
11582	Remove a cookie from the cookie monster .
11583	Redirect to the login page .
11584	Gets the authenticated user .
11585	Return OAuth request parameters .
11586	Redirect to the authorize page .
11587	Make a request to Facebook .
11588	Gets an authenticated user .
11589	Concatenates url with args .
11590	Parse a header line into a dictionary .
11591	Add a value to the header .
11592	Returns a list of headers for the given name .
11593	Parse a line of a multi - line header .
11594	Parse a list of headers into a dictionary
11595	Normalize a header name .
11596	Converts a string to UTF - 8 .
11597	Convert a byte string to unicode .
11598	Converts a value to a base - 64 string .
11599	Recursively convert all strings in obj to unicode .
11600	Setup the authorization plugin .
11601	Iterate over all subclasses of cls .
11602	Select a policy based on the request method .
11603	Calculate the occupancy of a set of points .
11604	Write the gro data to a file
11605	Write a PDB file .
11606	Given a list of molecules and a list of absolute molecules and a list of relative molecules return a list of molecules .
11607	Resizes PBC for a list of lipids .
11608	Write a rudimentary topology file .
11609	Iterate over a resource file .
11610	Send a message to a user .
11611	Message a list of users .
11612	Return a list of messages for the given user .
11613	Adds all messages to the session .
11614	Check if the config file is valid .
11615	Verify that the profile name is valid .
11616	Retrieve data from config .
11617	Retrieve a user s password from a configuration file .
11618	Updates the config data for a message .
11619	Update the user s password .
11620	Create a new config profile .
11621	Display the required items for a message type .
11622	Get data from user .
11623	Get auth from user .
11624	Create a new profile .
11625	Writes data for a profile .
11626	Writes auth information to cfg .
11627	Add attachments to the message .
11628	Sends the message to the server .
11629	Send a message of type msg_type .
11630	Create a message from a message type .
11631	Create a property for a credential .
11632	Validate a property on an instance .
11633	Validate input .
11634	Validate Twilio attributes .
11635	Validate SlackPost attributes .
11636	Validates that the value is a WhatsApp object .
11637	Send coroutines to the pool .
11638	Adds a message to the queue .
11639	Get the body from a file .
11640	Removes arguments from a dictionary .
11641	Send a message .
11642	Returns the chat id for the specified user .
11643	Sends the message to the server .
11644	Sends the message to the server .
11645	Return the SMTP server for the given address .
11646	Generates an email message .
11647	Adds the header to the message .
11648	Adds the body to the message .
11649	Add attachments to the message .
11650	Login to the server and return a session object .
11651	Return an instance of smtplib . SSL .
11652	Return a connection to the SMTP server .
11653	Sends the email to the user .
11654	Save the tags to a file .
11655	Unloads the image .
11656	Get the region of the image .
11657	Validates that the data is valid .
11658	Remove all elements from the internal list .
11659	Writes the data to the file .
11660	Read data from file .
11661	Delete this chunk from the file .
11662	Resizes the chunk to the given size .
11663	Insert a chunk into the file .
11664	Save an ID3 file to a file .
11665	Delete the file .
11666	Parse the given file .
11667	Processes a normal line .
11668	Add lines to the block .
11669	Draw a string .
11670	Parse an ISO8601 time string into a Python datetime object .
11671	Make an HTML string from a list of words .
11672	Converts a word into an HTML word .
11673	Converts a list of words to HTML paragraphs .
11674	Create HTML code from a list of lines .
11675	Converts a list of items to HTML paragraphs .
11676	Save the metadata to a file .
11677	Update the parents of a file .
11678	Runs the game .
11679	Register a mapping for a product .
11680	Get a controller by vendor and product .
11681	Registers a Freeform key .
11682	Sign string_to_sign with HMAC - SHA256 .
11683	Return the request headers for the request .
11684	Send a request to the Route53 API .
11685	Sends a GET request .
11686	Send a POST request .
11687	Send a DELETE request to the server .
11688	Convert a value to an APEValue .
11689	Send a request to the server .
11690	Perform an HTTP call to the API .
11691	List all hosted zones .
11692	Create a hosted zone .
11693	List resource record sets for a zone .
11694	Change resource record sets .
11695	Draw an image .
11696	Draw a region of an image .
11697	Return the number of bytes required to store the packet .
11698	Replace the old pages with the new ones .
11699	Find the last page of an Ogg file .
11700	Sets the section with the given name .
11701	Add markup to the document .
11702	Process the content into a list of markup lines .
11703	Get a markup with the given tag name .
11704	CreateHostedZoneRequest to create a hosted zone .
11705	Lock a file .
11706	Insert a number of bytes into a file .
11707	Delete bytes from a file .
11708	Convert data to UTF - 8 .
11709	Add a change to a record set .
11710	Parse an e_change_info element into a dict .
11711	Return the width of a string .
11712	Return True if this object has been modified .
11713	Delete this resource record set .
11714	Saves the changes to the resource record set .
11715	Parses an ID3v1 tag .
11716	Makes an ID3v1 ID3v2 ID3v2 ID3v2 ID3v2 ID3v2 ID3v2 .
11717	Read size bytes from file .
11718	Removes all keys that start with key .
11719	Load a frame from a tag .
11720	Update all PICs and LNK frames .
11721	Update to v24 .
11722	Unloads the sound .
11723	Plays the sound .
11724	Sets the number of loop points from start_sample to end_sample
11725	Return a list of glyphs and values from a list of adobe glyphs .
11726	Return a list of glyph names that match the filter .
11727	Dump a list of encoding values to a file .
11728	Dump an array to a file .
11729	The main entry point for the script .
11730	Check if a file exists .
11731	Return a list of files that exist in sys . argv .
11732	Parse a HostedZone instance into a dictionary .
11733	Parse the e_delegation_set element into a list of nameservers .
11734	Writes a list of blocks to a byte string .
11735	Group padding into a list of Padding objects
11736	Delete all metadata blocks .
11737	Save the metadata block to a file .
11738	Parse an RRSet alias element .
11739	Parse a list of RRSet record values into a list of strings .
11740	Parse a resource record set .
11741	Delete this HostedZone .
11742	Add a record to a record set .
11743	Create a new A resource record .
11744	Create a new AAAA resource record .
11745	Create a CNAME resource record .
11746	Create a new MXResourceRecordSet .
11747	Create a new NS resource record set .
11748	Create a PTR resource record set .
11749	Create a new SP resource record set .
11750	Create a new SRV resource record set .
11751	Create a new TXT record .
11752	Registers a TXXX key .
11753	Get the initial values for a change .
11754	Writes a change to XML .
11755	Writes a change resource record set to XML .
11756	Initializes the NanoPlot logs .
11757	Return the item with the given alias .
11758	Freeze a dictionary .
11759	Join HTML attributes into a single HTML tag .
11760	Initializes the application .
11761	Initializes all bars .
11762	Bind a bar .
11763	Return a dictionary of the arguments to be passed to the function .
11764	Return the URL for this endpoint .
11765	Return True if this view is currently active .
11766	Validate that metric_class is a metric class .
11767	Get a statistic by name .
11768	Calculate statistics for a list of frequencies .
11769	Attempt to import the gadgets module .
11770	Return a CSV dump of a metric .
11771	Rescalculates and recalculates the statistics .
11772	Return a list of values for a GET variable .
11773	Returns a boolean value for a GET variable .
11774	Get the next colour .
11775	Return a dictionary of the request parameters for a Gecko chart .
11776	Return the number of widgets for the given request .
11777	Return a list of metrics that have been rendered in Geckobard .
11778	Geckoboard line chart .
11779	Return the latest Geckoboard count for the given request .
11780	Geckoboard Funnel .
11781	Returns a list of all active stats .
11782	Registers a gadget .
11783	Return a dictionary of context data .
11784	Print an error message and exit .
11785	Decorator to check that a function is valid .
11786	Prompts the user to enter multiple lines .
11787	Prompts the user for a list of items .
11788	Prompts the user for a file or directory .
11789	Return the schedule for the given year .
11790	Return the winner of the game .
11791	Return the season of the current season .
11792	Return a DataFrame of starters .
11793	The surface of the game .
11794	Return the coin toss of the game .
11795	Returns a dictionary of the game s weather information .
11796	Return a dictionary of the reference information .
11797	Get the schedule for the current season .
11798	Returns a DataFrame of the standings for each team .
11799	Gets the stats table for the given selector .
11800	Return the roy voting table .
11801	Returns a DataFrame containing the line score for each team .
11802	Return the season of the current month .
11803	Returns player stats for the given table_id .
11804	Switches the current working directory to dirPath .
11805	Decorator to check whether the cache is valid or stale
11806	Return a tuple of the key of a class instance .
11807	Decorator to memoize a function .
11808	Returns the age for the given year month and day .
11809	Get the stats table for the given table_id
11810	Returns a table of stats per game .
11811	Gets the stats table for the totals table .
11812	Returns a list of stats per minute for a given kind .
11813	Get stats for perposs .
11814	Get the advanced stats table .
11815	Get stats about shooting .
11816	Get stats table for advanced_pbp .
11817	Return the basic playoffs for the given year .
11818	Get session data
11819	Expand details into a single DataFrame .
11820	Add team and opp columns to the features dataframe .
11821	Add features for each team .
11822	Calculates the initial win probability of a line .
11823	Return the passing playoffs .
11824	Return a list of a single year award .
11825	The name of the team .
11826	Return the boxscores for the given year .
11827	Return the first occurrence of a keyword in a year .
11828	Returns a list of coach IDs for the given year .
11829	Return the schedule for the given year .
11830	Return the Offensive Coordinator URL for the given year .
11831	Return the Coordinator URL for the given year .
11832	Gets the stadium for a given year .
11833	Return the Offensive Scheme for the given year .
11834	Returns the alignment for the given year .
11835	Returns a DataFrame of the splits for the given year .
11836	Get HTML for given URL .
11837	Flatten all links in the given element .
11838	Converts a relative url to an identifier .
11839	Converts keyword arguments to QuerySet objects .
11840	Streamer s read_process method .
11841	Directly put the object into the read queue .
11842	Return a direct copy of the guard .
11843	Close the queue .
11844	Get a batch of data from a HDF5 file .
11845	Gets the remainder of the given path .
11846	Get a queue for the given path .
11847	Get a generator for the given path .
11848	Parse a string or file - like object .
11849	Dump a list of PB objects to a file .
11850	Read a varint from the file descriptor .
11851	Read objects from the object group .
11852	Close the underlying file .
11853	Writes one or more PB2 objects to the file .
11854	Flush the output buffer .
11855	Return the game s directory .
11856	Input text with keyboard emulation .
11857	Make a fake movie .
11858	Evaluate all traits .
11859	Wait until a condition is true .
11860	Wait until all traits are present .
11861	Adds exceptions to self . _ignored_exceptions .
11862	Returns the main volume .
11863	Returns the main source for the given operator .
11864	Send a message to the server .
11865	Return the status of the NAD .
11866	Turn off power .
11867	Power on the device .
11868	Set the volume .
11869	Select a source .
11870	Deobfuscate the request with the given key .
11871	Calculate the CRC of a plaintext .
11872	Deobfuscate a value .
11873	Download missing schema .
11874	Return a list of all links .
11875	Check if song name is correct
11876	Parse song_name from url and return href .
11877	Return a google url for a song .
11878	Parses a google download URL from an HTML page .
11879	Parses a song from a website .
11880	Download page and return response content .
11881	Download a file from a URL .
11882	Download a file using wget
11883	Return a list of station codes for a city .
11884	Get details about a location .
11885	Parse an observation response into a dictionary .
11886	Get observation data for a station .
11887	Return a list of paths to search for .
11888	Return a list of compiler extensions .
11889	Return the MIME type of the file .
11890	Return the result type of the compiler .
11891	Return the compiler extension .
11892	Register a processor for a mimetype .
11893	Unregisters a processor .
11894	Return a list of paths associated with this finder .
11895	Register default mimetypes preprocessors and postprocessors .
11896	Imports the Qt core .
11897	Returns a Netnode object for the given org and application .
11898	Adds a plugin name to the meta - netnode metadata .
11899	Delete a Netnode plugin .
11900	Imports settings from a config file .
11901	Exports settings to config_path .
11902	Return a DirectoryIDASettings for this plugin .
11903	Iterate over all keys in the database .
11904	Simple error handler .
11905	Return a table object for the given name .
11906	Return a list of all tables .
11907	Fetch items for a category .
11908	Return the metadata id for the given item .
11909	Return the updated_at of a metadata item .
11910	Fetch the owner team for a Crate .
11911	Fetch the owner user for a Crate .
11912	Fetch the versions attribute of a Crate object .
11913	Fetches the downloads for a Crate version .
11914	Fetch data for a Crate .
11915	Get a summary of the category .
11916	Get a list of all crates for this user .
11917	Get information about a Crate .
11918	Get attribute data for a Cate .
11919	Fetch items from the API .
11920	Fetch items for the given category .
11921	Fetch items from Kitsune API .
11922	Get all the questions for the current user .
11923	Fetch items for the given category .
11924	Return the updated time for the given item .
11925	Return the category of an item .
11926	Get all items for a category .
11927	Return a list of buffer objects .
11928	The io priority of the IOCB .
11929	Close the connection to the queue .
11930	Submit the given list of block_list .
11931	Cancel a block .
11932	Cancel all submitted blocks .
11933	Return a list of all events in the stream .
11934	Fetch all events for a category .
11935	Returns a list of all cells in the spreadsheet .
11936	Parse the feed .
11937	Return the export formats for the given pid_type .
11938	Return the permission factory .
11939	Create a blueprint for the records interface .
11940	Create a url rule .
11941	Record a view .
11942	Default view method .
11943	Export a record to a template .
11944	Return a Chronometer object for the given target .
11945	Close the socket .
11946	Removes a client .
11947	Increments a metric .
11948	Send a timing metric .
11949	Create a timing object for the given name and start_time .
11950	Sends a gauge .
11951	Sends a gauge delta to a metric .
11952	Sets the value of a metric .
11953	Send data to the storage .
11954	Create a batch client .
11955	Return a unit client .
11956	Flush all batches .
11957	Return a permission checker for the given record .
11958	Create a batch client .
11959	Flush all batches to the socket .
11960	Create a unit client .
11961	Create a User with the given permissions .
11962	Converts a Python object to an OpenMath object .
11963	Convert a term to an OpenMath object .
11964	Convert an OMS object to a Python object .
11965	Convert obj to OpenMath .
11966	Register a converter to openmath .
11967	Deprecated method .
11968	Initializes the application .
11969	Yields valid choices .
11970	Split model kwargs into model fields and fields_agrs .
11971	Decorator to register a function .
11972	Create a value from the registry .
11973	Return a default form for the given form class .
11974	Decorator to check if a field is required .
11975	Wraps a field s choices attribute to a list of valid choices .
11976	Return a string representation of a decimal field .
11977	Return data for an email field .
11978	Return the data for a date field .
11979	Return a random value for a datetime field .
11980	Return a string representation of a float field .
11981	Return a string representation of integer field .
11982	Return a random time field .
11983	Return a random choice for a field .
11984	Return data for multiple choice field .
11985	Return a random choice for the given field .
11986	Encode bytes to XML .
11987	Publish package .
11988	Create a new tag for the build .
11989	Decorator to check if a field is not blank .
11990	Load a global variable from a module .
11991	Build an instance from a dictionary .
11992	Convert a list to an openmath . OMSymbol
11993	Create an OMSymbol object representing a tuple .
11994	Decode data to bytes .
11995	Encode data into a byte string .
11996	Convert a floating point number to a fixed precision number .
11997	Format a number .
11998	Converts a number to a money representation .
11999	Convert numpy data to numpy array .
12000	Deserialize data from a byte array .
12001	Add a workspace at the given path .
12002	Remove a workspace .
12003	Return a list of all workspaces .
12004	Get a workspace by name .
12005	Check if a repository exists in the workspace .
12006	Sync the configuration for the given workspace .
12007	Clone a repository .
12008	Check the version of ndio .
12009	Convert numpy array to voxels array
12010	Convert a list of voxels to a numpy array .
12011	Executes the command .
12012	Print an update of a repository .
12013	Set the console handler .
12014	Executes the given command with the given path .
12015	Load PNG file into numpy array .
12016	Save numpy data to PNG file .
12017	Save all layers in a collection of files .
12018	Print the status of a workspace .
12019	Print the status of a repository .
12020	Get the cube dimension for a block .
12021	Create a cutout with no chunking data .
12022	Load image from a Tiff file .
12023	Save numpy data to a TIFF file .
12024	Load data from multi - layer TIF files .
12025	Writes the config to a file .
12026	Clone a branch .
12027	Return the version of yoda .
12028	Mix and Match the given name and greeting .
12029	Decorator for command line options .
12030	Reserve ids for a channel and quantity .
12031	Merge a list of ids into a single list .
12032	Propagate the data .
12033	Returns a list of projects for the given dataset .
12034	Get a dataset by name .
12035	Returns a list of all datasets for this resource .
12036	Parse the output of the show command .
12037	Show information about a workspace .
12038	Show a workspace .
12039	Show all available workspaces .
12040	Return a URL for the given endpoint .
12041	Try to guess the file format from the extension .
12042	Opens an image file .
12043	Convert an input file to an output file .
12044	BuildGraph API endpoint .
12045	Computes invariants for the given input format .
12046	Convert a graph file to a list of output formats .
12047	Convert a list of ramons to a dictionary .
12048	Return the RAMON type for the given type .
12049	Delete a channel .
12050	Adds a dataset .
12051	Return a JSON representation of the dataset and project .
12052	Return a dictionary of the dataset .
12053	Create a dictionary for a channel .
12054	Return a dictionary representing a project .
12055	Identify the image size for the given image type .
12056	Updates data with the given data .
12057	Find path for given workspace and repository .
12058	Returns a list of all public tokens for this account .
12059	Get information about the project .
12060	Set metadata for remote data .
12061	Get a URL .
12062	Send a POST request to a URL .
12063	Delete a URL .
12064	Load data from hdf5 file .
12065	Save an array to an HDF5 file .
12066	Infer gaps in a tree .
12067	Resumes a new NvimIORecover .
12068	Install translations for jinja templates .
12069	Acquire and release an exclusive NS .
12070	Return the percentage of data for a part and total .
12071	Returns a dictionary of stats for the specified server .
12072	Returns a dictionary of the Slabs for the specified server .
12073	Return a dictionary with all context data .
12074	Show the server status .
12075	Show the dashboard .
12076	Show statistics for a specific server .
12077	Show the Slabs for a specific server .
12078	Convert a number of bytes to human - readable bytes .
12079	Find the config for the given children .
12080	Adds the given arguments to this directory .
12081	Applies the config to the application .
12082	Return the path to this path .
12083	Return the contents of the file .
12084	Writes data to the file .
12085	Configure the logger .
12086	Create the file .
12087	Applies the given applicator to this path .
12088	Return the path to this path .
12089	Removes the directory .
12090	Calls the prepare method of the child object .
12091	Cleans up all child objects .
12092	Converts a path to a relative path .
12093	Return a list of all files in this directory .
12094	Write data to a file .
12095	Read a file from disk .
12096	Add a file or filename to the tree .
12097	Save the config to a file .
12098	Loads the config file from disk .
12099	Remove the file from disk .
12100	Load all plugins in the given directory .
12101	Update dict with source dict .
12102	Return a child config node at the given path .
12103	Resolves the path to the root node .
12104	Return the value for this path or None if not found .
12105	Updates this node with the given data .
12106	Load the config .
12107	Return a string representation of a config block .
12108	Builds the callback url for the given message .
12109	Process the input from the socket .
12110	Send output to pyngus .
12111	Sends an RPC call request .
12112	Read input from a socket .
12113	Writes output data to the given socket object .
12114	Decorator to ensure that a function is not reentrant .
12115	Get the settle mode for a remote link .
12116	Configures the dynamic target .
12117	Return the source address of the link .
12118	Return the target address of the link .
12119	Close the session .
12120	Create a new sender .
12121	Request sender link .
12122	Create a new receiver .
12123	Request a receiver link .
12124	Destroy all resources for a link .
12125	Close the session .
12126	Processes an endpoint event .
12127	Extend markdown with markdown .
12128	Close the remote connection .
12129	Called when a receiver has failed .
12130	Return host and port from server address
12131	Connect to a socket .
12132	Create a server socket .
12133	Return a list of connections that need to be processed .
12134	Decorator to ensure that the connection is not re - used .
12135	Process a SASL connection .
12136	Return the output data .
12137	Create a new sender .
12138	Rejects a sender link .
12139	Create a new receiver .
12140	Called when the connection failed .
12141	Check if connection is up .
12142	Close connection to remote server .
12143	Override method to customize connection error .
12144	Decorator for the twilio view .
12145	Return a string representation of the color .
12146	Return a dictionary of font names for the given search path .
12147	Sets the compression option .
12148	Add an object to the PDF .
12149	Writes the given stream to the page .
12150	Put the given stream into the output stream .
12151	Add a page to the document .
12152	Sets the color scheme .
12153	Set the default font .
12154	Add a page to the PDF .
12155	Set the font size .
12156	Add text to the page .
12157	Add newlines to the page .
12158	Add a pie chart to the current page .
12159	Output all pages .
12160	Return a list of orientation changes .
12161	Output all fonts .
12162	Helper function to output images .
12163	Output for this image .
12164	Translates the current matrix .
12165	Return the absolute position of x and y .
12166	Set the style of the symbol .
12167	Rotate pointX and pointY according to self . angle .
12168	Set information about the user .
12169	Set the display mode .
12170	Close the output file .
12171	Writes the header of the PDF file .
12172	Writes the page objects to the output .
12173	Return a dictionary representation of the document .
12174	Add information to the session .
12175	Puts the catalog into the session .
12176	Create a new trailer .
12177	Yields the floyd sequence .
12178	A naive version of seqs .
12179	Return the gosper of a sequence .
12180	Return the brent of a sequence .
12181	Return True if x is within test_length .
12182	Return True if y is within test_length .
12183	Check if x is greater than or equal to test_ordinate .
12184	Check if y coordinate is greater than test_ordinate .
12185	Return a copy of this cursor .
12186	Adds x to self . x .
12187	Adds y to self . y .
12188	Draws the table .
12189	Create a new Tag .
12190	List tags for this account .
12191	Get a label by name .
12192	Updates a label .
12193	Delete a Tag .
12194	Create a new label .
12195	List all actions .
12196	Returns a list of tags for the given label .
12197	Create a new hook .
12198	List all hooks .
12199	Update a hook .
12200	Create a new alert .
12201	Returns a list of alerts of the given type and arguments .
12202	Update an existing alert .
12203	Setup extension mappings and links .
12204	Return the path to the themes directory .
12205	Perform a POST request to the logentries API .
12206	Return a list of host objects .
12207	Get a log set .
12208	Find attacker slider .
12209	Return the duration in seconds .
12210	Updates the model .
12211	Computes and returns the result .
12212	Return an instance of _Bin .
12213	Free the array .
12214	Receive data from the socket .
12215	Return a generator for each line from the buffer .
12216	Return a generator that yields bytes from the buffer .
12217	Return NNTP status code and message .
12218	Return a generator for the given code and message .
12219	Returns a string containing information about the given code and message .
12220	Send a command to NNTPSync .
12221	Return a list of capabilities .
12222	Read mode reader .
12223	Quit the server .
12224	Returns a datetime object representing the current date .
12225	Help for NNTP .
12226	Generates a list of newsgroups for a given timestamp .
12227	Generates a list of news entries for a pattern and timestamp .
12228	Return a list of newnews for the given pattern and timestamp .
12229	List active newsgroups .
12230	List all active time objects .
12231	List all newsgroups .
12232	List Overview . FMT format generator
12233	List all NNTP extensions .
12234	Return a generator for the given keyword .
12235	Return a list of objects with the given keyword and arg .
12236	Return the number of members of a group .
12237	Returns the next article and identifier .
12238	Send an article to NNTP .
12239	Get the head of the article .
12240	Get the body of a message .
12241	Sends XGTITLE command .
12242	Sends an XHDR message .
12243	Send XZHDR command .
12244	Return a generator over the contents of a range .
12245	Return a generator for the XPAT message .
12246	Return a list of xpat objects for the given header .
12247	Return True if gzip compression is enabled .
12248	Send a POST request to NNTP .
12249	Return the offset between 0 and 100 .
12250	Convert a timestamp to a timestamp .
12251	Convert a string to a datetime object .
12252	Perform a POST request to the API .
12253	Handles a DELETE request .
12254	Handles GET requests .
12255	List all scheduled queries for this account .
12256	Returns a list of tags for this account .
12257	Returns a list of tags with the given name or id .
12258	Create an alert notification .
12259	Delete a tag .
12260	Create a scheduled query .
12261	Create a new alert notification .
12262	Delete a tag .
12263	Unparse a range into a string .
12264	Parse a newsgroup info line .
12265	Parse a header line .
12266	Unparse headers .
12267	Perform a POST request .
12268	Run all test cases .
12269	Return a docstring for a list of defaults .
12270	Decorator that appends default kwargs to a function s docstring .
12271	Return a docstring for the defaults class .
12272	Set the value of the field .
12273	Raise TypeError if value is None .
12274	Return the value of the variable .
12275	Check that value is a scalar .
12276	Return the symmetric error .
12277	Set the list of errors .
12278	Set the bounds and errors .
12279	Import metrics from the API .
12280	Return a dictionary representation of a list of metrics .
12281	Filter metrics based on the filter expression .
12282	Calls the API .
12283	Return an expression that applies to the terminal .
12284	Create an operator from a string .
12285	Adds text to the op_add token .
12286	Initializes all required properties .
12287	Returns a list of parameters for the given pnames .
12288	Return a list of parameter values for the given parameter names .
12289	Return a list of errors for a list of parameters .
12290	Clear all derived parameters .
12291	Sets the method .
12292	Set environment variables based on environment variables .
12293	Returns the URL parameters for the request .
12294	Perform a GET request .
12295	Perform a DELETE request .
12296	Perform a POST request to the API .
12297	Perform an HTTP PUT request .
12298	Calls the API .
12299	Validate that the sceneInfo is valid .
12300	Verify that the type product is valid .
12301	Return the size of the remote file .
12302	Download File
12303	Validate that a list of bands is valid .
12304	Establish connection to Earthexplorer .
12305	Adds a prefix to the name of the model .
12306	Return a timezone object for the given zone .
12307	Normalize time to UTC .
12308	Joins the elements of an iterable with the given delimiter .
12309	Returns a list of positions of newlines in text .
12310	Convert a point to a source string .
12311	Dump the results to a text file .
12312	Filter out metrics and plugins from the result .
12313	Create a new Fortune object from a list of Fortune files .
12314	Set the chance of the given files .
12315	Run the application .
12316	Return the rule for the given text .
12317	Special handling for the given text .
12318	The grammar of the input file .
12319	Return a list of Rule objects representing the grammar .
12320	Return a list of comments .
12321	Return a list of directives associated with this comment .
12322	Return compiled output source .
12323	Compiles a pyebnf . primitive . Primitive .
12324	Return list of import directives .
12325	Return a string representation of the token type enum .
12326	Return the class definition for this parser .
12327	Return the entry point .
12328	Return the definition of a rule .
12329	Return the source of a rule .
12330	Return the transform for a rule .
12331	Converts an expression to an ASN representation .
12332	Converts a node to an ASN expression .
12333	Return a list of operands that should be hopped .
12334	Removes grouping groups from optree .
12335	Convert AST node to code .
12336	Convert AST node to code .
12337	Converts a terminal to a list of code .
12338	Converts an option group to a list of lines .
12339	Converts a repetition group to code .
12340	Converts a special handling to code .
12341	Converts an AST AST node to a list of AST nodes .
12342	Convert an AST operation concat to code .
12343	Return a list of code lines for an exclude instruction .
12344	Convert AST opr to code .
12345	Convert an AST opr to code .
12346	Return a list of directives that match the predicate .
12347	Return True if the child node is a child of the parent node .
12348	Parse directives from a comment .
12349	Handles the results from the API .
12350	Generate a wx . NewId and return it .
12351	Removes a hotkey .
12352	Add command line arguments to the command line .
12353	Set up logging .
12354	Validate that the arguments are valid .
12355	Infix all operators whose precedence is greater than the node s precedence .
12356	Convert a list of nodes to an OptreeNode .
12357	Reduce the number of operators in a list of nodes .
12358	Add command line arguments .
12359	Loads the manifest .
12360	Get a metric definition by name .
12361	Returns the number of columns in the table .
12362	Return the number of columns required to display the metrics .
12363	Replace underscores with underscores .
12364	Output field markdown .
12365	Output a metric markdown .
12366	Generates the Markdown file .
12367	Parse the given text into a tree .
12368	Attempt to determine the amount of text to be consumed .
12369	Add command specific arguments .
12370	Parse a time date .
12371	Print the result in CSV format .
12372	Output JSON to stdout .
12373	Output raw text to stdout .
12374	Create an XML representation of a JSON result .
12375	Return True if node is a default node .
12376	Pretty print a tree structure .
12377	Return a partial of _get_repetition with the given bounds .
12378	Return a ParseNode for a terminal value .
12379	Get a repetition node from the given text .
12380	Gets the exclusion for the given extractor .
12381	Return the number of leading whitespace characters in text .
12382	Call the extractor with the given text .
12383	Return the position of this node .
12384	Return True if this node is empty .
12385	Adds the list of ignored items to self . ignored .
12386	Return True if value is of type self . node_type .
12387	Return a new ParseNode that is flattened of this node .
12388	Return a copy of this parse node with all sub - parse nodes removed .
12389	Merge two ParseNode objects into a single ParseNode .
12390	Return a parsed node of the given type .
12391	Return a new ParseNode with a compressed version of this node .
12392	Return a |Position| object representing the position of this block .
12393	Return the maximum readed position .
12394	Step to the next character .
12395	Step to the next line .
12396	Step to the previous line .
12397	Return the last readed line .
12398	Increase the position of the cursor .
12399	Saves the context for this query .
12400	Restores the current context .
12401	Convert to a formatted string .
12402	Set internal name .
12403	Return the number of variables .
12404	Return the number of functions .
12405	Update self . _ntypes _nvars
12406	Updates the scope with the given scope .
12407	Return a union of the current scope and the given scope .
12408	Updates the scope with the intersection of the given set .
12409	Return the intersection of the current scope and the given scope .
12410	Updates the scope with all the scopes that are not in the given set .
12411	Return a copy of the current scope with the given signature removed .
12412	Updates the symmetric difference between the current scope and the given scope .
12413	Return a new scope that is the symmetric difference of the current scope and the given scope .
12414	Add a new scope to this scope .
12415	Removes a scope from the set .
12416	Removes the scope from the graph .
12417	Return a list of values associated with this scope .
12418	Returns the first signature .
12419	Return the last signature .
12420	Return the value for the given key .
12421	Return a scope for the given symbol name .
12422	Get Signature by symbol name .
12423	Return a |Scope| object representing all |Scope| objects contained in this scope .
12424	Calls the given Translator instance .
12425	Normalize a node .
12426	Set the attributes of this node to the values of the othernode .
12427	Return a generator yielding the values of each element in the sequence .
12428	Check if a hit is ok .
12429	Computes the signature of the component .
12430	Resolves the current symbol .
12431	Returns a list of the names of the resolved names for the given TypeName .
12432	Set the name of the resolved type .
12433	Delete local file .
12434	Delete S3 bucket .
12435	Delete a file .
12436	Saves local file to disk .
12437	Saves a file to S3 .
12438	Save the object to a file .
12439	Returns a list of objects matching the given path .
12440	Create a new Enum object from a dictionary of parameters .
12441	Check that the function s arguments have the correct types .
12442	Set a callobject with the given name .
12443	Decorator to add a method to a class .
12444	Decorator to register a function as a hook .
12445	Decorator to define a new rule .
12446	Decorator to register a directive .
12447	Decorator that registers a function as a decorator .
12448	Bind a rule to another rule .
12449	Read EOL .
12450	Push all rule nodes into the tree .
12451	Pop all rule nodes .
12452	Return the value of the node n .
12453	Parse a stream .
12454	Start a new tag .
12455	End of a tag .
12456	Sets the rules to the given dict .
12457	Sets the hooks to the given dict .
12458	Set directives .
12459	Evaluate a rule .
12460	Evaluate a hook .
12461	Peeks text at the end of the stream .
12462	Read one character from the stream .
12463	Read a character from the stream .
12464	Read until EOF .
12465	Ignore blanks from the stream .
12466	Sets the hit_dtype of the cluster .
12467	Set the cluster dtype .
12468	Check that the hit data fields are compatible .
12469	Adds a rule clause name .
12470	Adds a rule to the config .
12471	Adds a rule to the document .
12472	Add sequences to the parser tree .
12473	Adds an alternative parser to the parser tree .
12474	Adds a range to the document .
12475	Add a lookahead rule .
12476	Add a capture to the given sequence .
12477	Adds a Bind element to the given sequence .
12478	Add a new parser hook to the given parser sequence .
12479	Sets the number of a parameter .
12480	Converts a string to a parameter .
12481	Set a parameter for a character .
12482	Set the ID of the parameter at index i .
12483	Sets the name of a hook .
12484	Add a parameter to a hook .
12485	Return a parsing . Node representing the BNF rules .
12486	Ignore C ++ .
12487	Add a state to the model .
12488	Converts the state to a dot representation .
12489	Write the model to a dot file .
12490	Convert to PNG file .
12491	Return a string representation of the state .
12492	Return the next state .
12493	Resets the LivingState to the initial state .
12494	Infer block .
12495	Infer a subexpression .
12496	Infer the ID for the given symbol .
12497	Infer a literal .
12498	Dump all node information .
12499	Convert a parser rule to ast . FunctionDef .
12500	Return the exit scope .
12501	Return a list of AST . If statements .
12502	visit a Call node
12503	visit a CallTrue AST node
12504	visit a Hook node
12505	Recursively visit a parsing rule node .
12506	Recursively visit a Capture node .
12507	visit a Scope node
12508	visit a Alt node by returning a list of AST AST ASTStmts
12509	Recursively visit a Seq node .
12510	visit a RepOptional node by returning a fresh instance of it
12511	visit a Rep0N node by returning a list of AST objects
12512	visit a Rep0N node by returning a list of statements
12513	Concatenates two strings into a single string .
12514	Set the indent of each element in a list .
12515	Convert a list to a string .
12516	Print a list of nodes .
12517	Populates a list of sequences from a sequence .
12518	Populates a state register from a list of sequences .
12519	Builds the state tree for all State instances in the tree .
12520	Return True iff n is equal to val .
12521	Create a new grammar from a string .
12522	Create a new grammar from a file .
12523	Parse a node from a file - like object .
12524	Parse a file into a Node object .
12525	Set a node from another node .
12526	Sets the node s value as an integer .
12527	Get a subnode of a node .
12528	Default serializer .
12529	Get all depositions for a given date .
12530	Dump a deposition to a dictionary .
12531	Return a list of recids invenio12 .
12532	Return a list of recids invenio2 .
12533	Import BibRecDocs and BibDoc .
12534	Dump all Bib docs for a given recid .
12535	Return the number of entries in the database .
12536	Check to see if there are any missing files .
12537	Return a JSON representation of an object .
12538	Return the number of users in the database .
12539	Dump a User object to a dictionary .
12540	Get a list of communities .
12541	Return a list of modified recids invenio12 .
12542	Return a set of records modified during a given date .
12543	Return a list of all access restrictions for a collection .
12544	Return a list of record revisions for the given recid .
12545	Return a dictionary of all and restricted collections for a record .
12546	Return a JSON representation of a record .
12547	Return the number of records that match the query .
12548	Dump all revisions for a given recid .
12549	Dumps a ra into a dictionary .
12550	Loads the common data into the database .
12551	Return a dictionary of things from entry points .
12552	Initializes the application context .
12553	Decorator to memoize a function .
12554	Return an instance of run_sql .
12555	Return a dictionary of role information for the given action_id .
12556	Get all actions that match the given query .
12557	Return a JSON representation of a Remote Account .
12558	Loads a token from data .
12559	Import a record into the database .
12560	Return the config variable or default if not found .
12561	Return a JSON representation of an object .
12562	Return the number of users for Invenio version 1 .
12563	Get all users invenio2 .
12564	Return a dictionary representation of the user .
12565	Load deposit data into database .
12566	Create a new record and pid .
12567	Load a record from the database .
12568	Load all records from a list of sources .
12569	Return a list of records from a list of sources .
12570	Load data from a dump file .
12571	Load communities for the given sources .
12572	Load all users from a list of sources .
12573	Load a deposit from a list of sources .
12574	Return a list of profiling statistics for each function .
12575	Starts the web server .
12576	Runs CProfileWrapper . dump_stats .
12577	Delete the profile .
12578	Delete the profile .
12579	Get the status of the server .
12580	Disable timestamp for a method .
12581	Load a User object from the database .
12582	Calculate translations for each image in parallel .
12583	Stitch an image collection into a new image collection .
12584	Add one - dim to an array .
12585	Create a new persistent identifier .
12586	Create a new record .
12587	Updates a record .
12588	Create persistent identifiers for the given pids .
12589	Delete a record .
12590	Create files from existing files .
12591	Create a file from a list of file versions .
12592	Delete all buckets for the given record .
12593	Return a list of pids that are missing .
12594	Prepare revisions .
12595	Prepare files .
12596	Prepare a list of pids for each revision .
12597	Check if a record is deleted .
12598	Load an invenio community .
12599	Loads a featured community .
12600	Dump data for a thing .
12601	Checks the given thing for the given thing .
12602	Deletes the peng .
12603	Return the magnitude of a vector .
12604	Normalize a list of values to the same magnitude .
12605	Transform a list of texcoords .
12606	Ensure that all bones are present in data .
12607	Set the length of the bones .
12608	Sets the parent of this Bone .
12609	Calculate the pivot point of a sphere .
12610	Start animation .
12611	Set the state of the object .
12612	Unset the state of the object .
12613	Sets the state of the texture .
12614	Unloads the state of the mesh .
12615	Ensure that the model data for the given object has been initialized .
12616	Redraw all vertices and texcoords of an object .
12617	Draw a 3D model .
12618	Create a new model .
12619	Writes reports to a file .
12620	Converts a list of test reports to XML .
12621	Adds a menu to the window .
12622	Redraws the label .
12623	Redraws the label .
12624	Draws the background .
12625	Delete a widget
12626	Redraw the label .
12627	Register event handlers .
12628	Register event handlers for the player .
12629	Adds a label main to the dialog .
12630	Adds an OK button to the dialog
12631	Close the dialog .
12632	Adds a confirm button .
12633	Add a cancel button to the dialog .
12634	Updates the progress bar .
12635	Render the scene in 3d .
12636	Render the world in 3d .
12637	Context manager for a single step .
12638	Check if a resource exists .
12639	Add a category to the peng3d .
12640	Gets the missing texture .
12641	Return the model object for the given name .
12642	Load a model .
12643	Return the model data for the given model name .
12644	Load model data from a JSON file .
12645	Adds a widget to this container .
12646	Draw the menu .
12647	Redraw the background and stencil .
12648	Redraw the scrollbar .
12649	Return True if the mouse position is within a bounding box .
12650	Calculates the probability that the variable is smaller than nmin .
12651	Adds a layer to the stack .
12652	Returns a vertexbuffer . IndirectArrayRegion for the given buffer .
12653	Draw the current buffer to the given mode .
12654	Add a function to the actions dict .
12655	Runs the given action .
12656	Register a new registry .
12657	Adds a layer to the model .
12658	Draws the layered widget .
12659	Delete all layers .
12660	The border of this widget .
12661	Return a WatchingList with the offset of the widget .
12662	Return the size of the widget .
12663	Read a HDF5 file .
12664	Create a connection matrix for the given shape .
12665	Sets the list of fields to be used in the query .
12666	Add fields to the model .
12667	Check that all elements have the same types .
12668	Return a list of all space elements .
12669	Calculates the centroids and volumes of each element in the mesh .
12670	Calculates the angles of the ellipsoid .
12671	Returns a DataFrame of the edges .
12672	Returns a DataFrame of the stats of the mesh .
12673	Convert element set to node set .
12674	Convert node set to surface .
12675	Convert a surface to element sets .
12676	Return metadata for each field .
12677	Return a pandas Series containing the metadata for this step .
12678	Makes the workdir and workdir directories .
12679	Run the post - processing program .
12680	Run GMSH on the mesh .
12681	Read history report .
12682	Read field report from file path .
12683	Convert a list to a string .
12684	Return a string representation of the equation .
12685	Return a string representation of a set .
12686	Parse the response and return the payload .
12687	Make a GET request .
12688	Writes an xy report .
12689	Writes a field report .
12690	List component types .
12691	Return the error message for this descriptor .
12692	Return True if the exception was thrown by a descriptor .
12693	Set x and y data .
12694	Return the mode to use for the given axis .
12695	Set xaxis and yaxis options .
12696	Create a class from a function and a list of attributes .
12697	Cycle through all datafeeds .
12698	Try to convert a value to a float or bool .
12699	Convert a string to a number .
12700	Parses the given token and returns a GraphRenderer .
12701	Converts a string to unicode .
12702	Create a clean HTML string from a raw HTML string .
12703	Check if mime_type is in include_mime_types list .
12704	Return a domain name from a raw string .
12705	Return a list of cut strings for the given domain .
12706	Create a hash key for the given token .
12707	Return a Counter of all words in the given si .
12708	Indexes a stream item .
12709	Invert a token hash .
12710	Get all document frequencies for a list of hashes .
12711	Return a list of stream IDs for the given hash table .
12712	Return a list of stream IDs for the given hash table .
12713	Create stream items from a file - like object .
12714	Create a streamitem from a feed entry .
12715	Create a streamcorpus . ContentItem for the given node .
12716	Reads a varint from the stream .
12717	Return a new instance of cls .
12718	Serializes a StreamItem key .
12719	Convert a streamitem to key data .
12720	Context manager to temporarily change working directory .
12721	Strip a prefix from a string .
12722	Strip suffix from a string .
12723	Return True if needle is a subsequence of haystack .
12724	Return a flask . web . web . web . web . web . web . web . web . app .
12725	Run the WGiref server .
12726	Close the server .
12727	Decorator to add a route .
12728	Decorator to register an error handler .
12729	Return a static file from the given path .
12730	Return the callback for the error page .
12731	Add a callback to the route .
12732	Resolves the given method and path .
12733	Resolves a non - literal route .
12734	Normalize a pattern .
12735	Return the response as a list of bytes .
12736	Adds a header to the response .
12737	Set a cookie .
12738	Return the status line .
12739	Return media type and charset .
12740	Return a list of all values for a key .
12741	Removes the given path .
12742	Return a list of open files .
12743	Return a list of file type stats .
12744	Run a rejester run .
12745	Attempt to fetch the data for the given work unit .
12746	Return a list of lines from a file .
12747	Return a pair of random adjspecies .
12748	Return a random adjspecies pair .
12749	Morph a sentence .
12750	Get the similarity between two applications .
12751	Convert Hiragana API .
12752	Retrieve entity from Goolabs API
12753	Shortsum a review .
12754	Get a list of keywords for an application .
12755	Returns a list of datetime objects for the given sentence .
12756	Create a copy of a stage .
12757	Create all the stages for the given stage name .
12758	Initializes all the stages .
12759	Run a single stream item .
12760	Runs the writers for the given path .
12761	Runs incremental transforms on the given StreamItem .
12762	Replace a configuration with a new configuration .
12763	Create a WSGI application .
12764	Create a dictionary of all the chains that have the same name .
12765	Return True if chain_mentions contains all target_mentions .
12766	Return True if chain_mentions contains the target_mentions .
12767	Return a list of regex objects that match the given rating .
12768	Performs a multi - token match on the given stream item .
12769	Create an Ner XML file from a template file .
12770	Align the input chunk with the output chunk .
12771	Terminate the child process .
12772	Multiply p by n .
12773	Fix emails in text .
12774	Yields a list of sentences between start and end .
12775	Create the label index for the given stream item .
12776	Create a list of sentences for the given stream item .
12777	Convert HTML entities to unicode .
12778	Create a cleansed file from i_chunk .
12779	Create a new RN file for the given tagger .
12780	Remove whitespace from a string .
12781	Align a chunk with another chunk .
12782	Makes absolute paths from the given config .
12783	Instantiate config from a dictionary .
12784	Generates a smith chunk for a given path .
12785	Make a clean visible text from an HTML string .
12786	Remove HTML tags that are not visible to the user .
12787	Create a clean visible XML file from the i_chunk .
12788	Remove punctuation and whitespace from a string .
12789	Runs the command - line tool .
12790	Try to load a stage .
12791	Load external stages .
12792	Load all Stages from a module .
12793	Initializes a stage .
12794	Read a single byte from the stream .
12795	Return True if the href is valid .
12796	Return a list of labels for this offset .
12797	Yields absolute paths of all files in input_dir .
12798	Yields all tasks for the given key_prefix .
12799	Return a random number of records that are available for the given number of workers .
12800	Yields the tokens for each sentence in the given sentence_dom .
12801	Returns a list of sentences for the given ner_dom .
12802	Retry function .
12803	Verify that md5_expected is equal to md5_recv .
12804	Get S3 bucket .
12805	Decode data to streamcorpus . Chunk .
12806	Extract a single chunk from a file .
12807	Converts a stream id to a kvlayer key .
12808	Converts a key to a stream id .
12809	Return the key for a stream item .
12810	Main entry point for the server .
12811	Build a command line parser .
12812	Adds xpaths to the stream item .
12813	Convert sentences to char tokens .
12814	Converts a list of si_tokens to character offsets .
12815	Convert a list of character offsets to XpathTextCollector objects .
12816	Adds an element to the document .
12817	Return an xpath piece for this element .
12818	Return the index of the last text node .
12819	Yield all descendants of elem .
12820	Select elements from source .
12821	Select elements that match the given name .
12822	Select elements that match the given pattern .
12823	Select elements that match the given attribute .
12824	Return an iterator of the siblings of the given element .
12825	Makes a pretty representation of an element .
12826	Calls the inkscape binary .
12827	Export an inkscape file .
12828	Convert an SVG file to a PDF file .
12829	Convert an SVG file to PNG file .
12830	Returns a Jinja environment for the given file path .
12831	Sets up the template file .
12832	Fills the document with the given doc_contents .
12833	Saves the template content to file_path .
12834	Create a Document from a template file .
12835	Override fill method to replace characters for SVG code .
12836	Render an SVG file to PDF .
12837	Render a PDF file .
12838	Parse an XML document .
12839	Parse an HTML document from the given source .
12840	Create a markup fragment from a source string .
12841	Inserts text into the tree .
12842	Insert node before refNode .
12843	Clone this node .
12844	Executes the Makefile . include and Makefile . include files for the given options .
12845	Return a string representation of a node .
12846	Insert a child element into this element .
12847	Parse config file .
12848	Get Google API credentials .
12849	Create start and end dates from config .
12850	Create an event .
12851	Create a new event .
12852	Returns the extension of a file .
12853	Add extension to filepath if it doesn t exist .
12854	Return a temporary file .
12855	Remove all files with the given extension from workdir .
12856	Convert CSV file to JSON file .
12857	Replace content of a file .
12858	Parse the HTML document .
12859	Checks the next sibling of a tag .
12860	Create italic tag .
12861	Create a strong tag .
12862	Create underline tag .
12863	Parse attributes from a tag .
12864	Remove linebreaks from a tag .
12865	Parse an href into a query string .
12866	Parse an attribute value .
12867	Translates key values from a dictionary .
12868	Convert the object to a JSON string .
12869	Return a list of files that match the given regex .
12870	Concatenates a list of strings .
12871	Return True if full starts with part .
12872	Return True if full is contained in part .
12873	Return the length of a string .
12874	Return True if obj is a boolean .
12875	Iterate over a sequence .
12876	Look up the value of the given key in the given table .
12877	Replace characters for SVG code .
12878	Checks that svg_file is a valid SVG file .
12879	Merge two SVG files .
12880	Merge PDF files into one .
12881	Converts a font file to SVG .
12882	Converts a font to SVG .
12883	Checks that the inputs are of the correct type .
12884	Check that the function is callable .
12885	Recurses a list of inputs and outputs .
12886	Create an input file from an option list .
12887	Recurses the inputs and outputs .
12888	Converts an object to a string .
12889	Converts an object to a number .
12890	Convert an object to a boolean .
12891	Yields a string representation of an AST .
12892	Change the XML encoding of a file .
12893	Save text into a QR code .
12894	Launch gromacs using longbow ...
12895	Call a command with arguments .
12896	Converts a PDF file to a PDF file .
12897	Return a list of options for the given psy .
12898	Transform a geom to a new sref .
12899	Create a geometry from a GeoJSON or WKB string .
12900	Expand two lists into a single list .
12901	Return a new Envelope with the intersection of this one and another .
12902	Return True if this Envelope intersects with other .
12903	Return a polygon representation of the polygon .
12904	Create a DataFrame from a ZNM matrix .
12905	Write the data to a file .
12906	Select rows that satisfy the given condition .
12907	Return a new table with the given nuclei .
12908	Return the intersection of this table and another table .
12909	Return a new table that is not in the given table .
12910	Return the odd even number of items in the group .
12911	Evenly divisible by 2 .
12912	Evenly divisible by 2 .
12913	Returns a new table with the error .
12914	Return the mean squared error .
12915	Calculates the binding energy .
12916	The s2n attribute of the MeV object .
12917	The s1n attribute of the MeV object .
12918	Calculates the proton mass in MeV .
12919	Calculates the proton mass in MeV .
12920	Return a derived table .
12921	Creates a new db session and commits the transaction .
12922	Derive a key from a master password .
12923	Bootstrapping a new database .
12924	Search for domains matching the given query .
12925	Modify a domain .
12926	Create a new domain .
12927	Extract HBS from a file .
12928	Return a VSI prefix for the given path .
12929	Gets the EPSG ID of the EPSG .
12930	Main entry point .
12931	Initializes the logging module .
12932	Update a file from a URL .
12933	Return a dictionary of all available GDAL drivers .
12934	Return a driver for the given path .
12935	Convert a GDAL geometry to a numpy array
12936	Rasterize a raster layer
12937	Open a raster from a file .
12938	Create a raster from byte data .
12939	Copy a raster from one location to another .
12940	Return a dictionary of DMD CREATION OPTIONS .
12941	Create a raster from a file .
12942	Sets the geo transform of the dataset .
12943	Reads the data as an array .
12944	Return a ~gwpy . core . geometry . Envelope .
12945	Return an instance of ImageDriver .
12946	Create a copy of this raster .
12947	Return a ~numpy . ndarray representing the masked array .
12948	Returns the nodata value .
12949	Reads a raster .
12950	Resample the image to the given pixel size .
12951	Saves the image to disk .
12952	Sets the projection .
12953	Warp this raster to a Warped VRT raster .
12954	Calculates the length and enclen of each chunk .
12955	Look up the correct alphabet for the given charset .
12956	Encode a chunk at the given index .
12957	Convert a chunk to a long .
12958	Get the chunk at the given index .
12959	Decorator to memoize a function .
12960	Return a compiled regular expression for the given filename .
12961	Converts a date string to a date string .
12962	Return the timezone for the current locale .
12963	Converts the object to a dictionary .
12964	Activate the debugger hook .
12965	Return an emphasized representation of an object .
12966	Handles a list of jobs .
12967	Runs the given job handler in a worker thread .
12968	Runs the given job handler in a worker pool .
12969	Sets the classification of this OrderFulfillment .
12970	Send a message to the queue .
12971	Turn ON light .
12972	Turn on a switch .
12973	Turn on with brightness .
12974	Turn Off a device .
12975	Send all the messages in the queue .
12976	Send a reliable message to the device .
12977	Create a new adapter for the given object .
12978	Corresponds to IDD Field nature
12979	Update sct_dict with values from sct_dict .
12980	Resets all defaults to their default values .
12981	Sets the configuration files .
12982	Return a list of option values for each SCT .
12983	Return a generator of the default options .
12984	Create the config file at the given index .
12985	Updates the configuration with the given dictionary .
12986	Read configuration from a file .
12987	Reads the configuration from the config files .
12988	Return a list of names for the given option .
12989	Return a list of sections for a given command .
12990	Solve the options for a given command .
12991	Add options to the given parser .
12992	Build the command line parser .
12993	Parse command line arguments .
12994	Print a help message for the given command .
12995	Complete a zsh command .
12996	Return a list of options for the given command .
12997	Complete a BASH command .
12998	Start a new master .
12999	Called when a connection is established .
13000	Called when a line is received .
13001	Close the connection to the worker .
13002	Called when a job is loaded .
13003	Called when a response is received from the worker .
13004	Close the job .
13005	Run a list of jobs .
13006	Close the connection to the server .
13007	Change all waiters to None .
13008	Add a result to the queue .
13009	Wait for the future to complete .
13010	Load the next job from the deck .
13011	Mark the job as done .
13012	Adds a result to the queue .
13013	Cancel all active jobs .
13014	Wait for all active jobs to complete .
13015	Distribute all JavaScript jobs .
13016	Add a list of jobs to the job set .
13017	Get a job .
13018	Return a job from the pool .
13019	Add a result to the job .
13020	Marks the job set as done .
13021	Close the session .
13022	Uniquify a list of lists .
13023	Return True if the given regex matches the given object .
13024	Returns a list of entries that match the filter .
13025	Get the AWS default region .
13026	Filter entries according to filters .
13027	Get host information from EC2 .
13028	Create an instance from a dictionary .
13029	Return a string representation of an attribute .
13030	Sort entries by attribute .
13031	Return a string representation of the table as a line .
13032	Create a CloudFormation instance from a boto instance .
13033	Return True if the given filter matches the given value .
13034	Return a human readable representation of this instance .
13035	Render a list of entries to a table .
13036	Add a timestamp to the event dict .
13037	Set up logging .
13038	Create a new logger .
13039	Setup a new Celery instance .
13040	Get information about a worker .
13041	Remove a job from the session .
13042	Create a Switch option .
13043	Create a section of the config file .
13044	Set values from a configuration file .
13045	Handles the config command .
13046	Create the complete files for the given command .
13047	Render a list of columns .
13048	Render a single row .
13049	Render a table .
13050	Prepares the rows of a table .
13051	Return a color for the given number .
13052	Get the color hash of a string .
13053	Return a random color .
13054	Get input from the user .
13055	Check if a user has the given credentials .
13056	Check if a token is valid .
13057	Decorator to require token authentication .
13058	Check if a process is running .
13059	Dynamically import a module and return the object .
13060	Return self - ip address .
13061	Make a request to the API .
13062	Prepare POST parameters for the given files .
13063	Serve the application .
13064	Render a value to a string .
13065	Stream the output of a command into a stream .
13066	Stream commands from a list of dictionaries .
13067	Stream commands from a list of commands .
13068	Return the network days between the given date and the given date .
13069	Return the path of the given command .
13070	Builds the SSH command for a given host .
13071	Builds a SCP command .
13072	Copy entries to local_path .
13073	Copy entries from local path to remote path .
13074	Run SSH command on matching hosts .
13075	Connect to an SSH entry .
13076	Load a LSI profile .
13077	Create a LsiProfile object from a list of arguments .
13078	Create a relationship between two parts .
13079	Return a list of related relationships for the given type .
13080	Load all relationships from the given source .
13081	Add a part to this content type .
13082	Load a part from the database .
13083	Searches the config for the given name or extension .
13084	Construct a ContentType object from an ElementTree element .
13085	Parse a string and return a parsed tree .
13086	Build a JWK object from a secret key .
13087	Assign a force field to an ampal object .
13088	Find the maximum radius and npnp .
13089	Return a dictionary of force field parameters .
13090	Return a file - like object as a byte stream .
13091	Get all the segments in the given zf that match the given name .
13092	Copy a directory .
13093	Open S3 bucket .
13094	Upload a directory to S3 .
13095	Upload a file to S3 .
13096	Upload an object to S3 .
13097	Returns a list of filenames in a directory .
13098	Returns a list of all directories under a given directory .
13099	Create a prefix for the given directory .
13100	Delete a file .
13101	Login to the LTD Keeper server .
13102	Return the loud .
13103	Delete a directory .
13104	Return the URL of the home page .
13105	Wraps a function so that it returns a string if not home_namespace .
13106	Return the home breadcrumb .
13107	Return the home breadcrumb .
13108	Returns the interaction energy for the given ampal objects .
13109	Returns the internal energy of an AMPAL object .
13110	Return a list of hotspots .
13111	Get a keeper token .
13112	Upload files to Travis CI .
13113	Check whether to skip Travis event .
13114	Purge a key for a service .
13115	Register a build .
13116	Confirm build .
13117	Recursively update a dict with the values from u .
13118	Main function for ltdconveyor .
13119	Edit part files .
13120	Shortcut for pack_dir .
13121	Splits a path into multiple parts .
13122	Find the file path and part path for the given path .
13123	Returns the editor for the given file path .
13124	Processes the given node as a Python module .
13125	Generate an HTML representation of a chart .
13126	Generate HTML for a chart object .
13127	Serialize a data object to a chart .
13128	Patch json_data with json_data
13129	Convert JSON data to HTML .
13130	Convert a dictionary to a pandas dataframe
13131	Writes an HTML file .
13132	Return a Chart object for the given chart type .
13133	Encode xfield and yfield with time_unit .
13134	Create a GitHub user role .
13135	Infer the URL for the app . json file .
13136	Create a new app .
13137	Destroy an app .
13138	Decorator for iterating over an attribute of a class .
13139	Generate a binary string of the given length .
13140	Generate a random IPv4 address .
13141	Generate a random date between start and end .
13142	Return a session object .
13143	Make a request to the API .
13144	Create a build .
13145	Checks the status of a build .
13146	Generates a sequence of sequences for the given prefix .
13147	Decorator to memoize a function .
13148	Wraces a function to return a list of unique arguments .
13149	Register subcommands with the given parser .
13150	Return the root argument parser .
13151	Get the description from the docstring .
13152	Return the help string for this command .
13153	Run the sub - command .
13154	Encode a list of datasets .
13155	Returns a pandas dataframe of the list of all theathletes for this host .
13156	Returns the last n activities from the activity list .
13157	Request activity list .
13158	Request activity data from athlete .
13159	Return the endpoint for the athlete .
13160	Return the URL for an activity file .
13161	Make a request to GoldenCheetah
13162	Create a tarball build .
13163	Return url with auth .
13164	Return a random title for the given languages and genders .
13165	Generate a random person .
13166	Return a random last name for the given languages .
13167	Render the data to a string .
13168	Sets the dataset and series .
13169	Render the chart .
13170	Check that the chart type is valid .
13171	Return the URL for this resource .
13172	Open a browser window .
13173	Save the image to a file .
13174	Open a connection to the server .
13175	Return a PIL . Image object representing the image .
13176	Write a file to a file - like object .
13177	Calculates the checksum of the file .
13178	Return a random amount between 0 and 1 .
13179	Decorator to mark a class as entity_name .
13180	Return a dictionary of unprotected and protected claims .
13181	Return a list of signing keys as jwks .
13182	Unpacks a ClientMetadataStatement into a dictionary .
13183	Create and sign a metadata statement .
13184	Evaluate metadata statement .
13185	Corrects the usage of the metadata statements .
13186	Extend a request object with a list of SMSs .
13187	Parse command line arguments .
13188	Add command line options to an argparse . ArgumentParser .
13189	Applies logging options to all log files .
13190	Log msg with severity VERBOSE .
13191	Return a dictionary for each letter in a word .
13192	Return a list of anagrams in a word .
13193	Convert a class to an AMP string .
13194	Transform timeseries data .
13195	Get the last value from a timeseries .
13196	Validate that the page number is valid .
13197	Gets a page of items from an iterator .
13198	Change the permissions of a path .
13199	Create an internal signing service .
13200	Create a new signing service .
13201	Sign a request .
13202	Create a new account .
13203	Updates a metadata statement .
13204	Updates a signature .
13205	Yields the contents of a bundle .
13206	Create a bundle from a dictionary .
13207	Returns a list of urls for the given asset type .
13208	Render HTML tags for the given asset type .
13209	Return a list of HTML tags for all assets .
13210	Ensure that the URL is a valid protocol .
13211	Return a list of links for the given url .
13212	Connect to an AMP server .
13213	Returns a list of modules in the project .
13214	Import all service modules .
13215	Converts a parameter to a list of dates .
13216	Select fields from a nested dictionary .
13217	Map a list of dates to a list of dates .
13218	Print a cursor .
13219	Output the results of the query .
13220	Given a list of do_tasks and a dependency graph return a list of all tasks that depend on the given dep_graph .
13221	Create default departments for a project .
13222	Create default assettypes for a project .
13223	Create default sequences for project .
13224	Add user rnd shots to project .
13225	Add default dependencies and sequences to the project .
13226	Create a shot for the given RNDSEQ instance .
13227	Create all tasks for the given element .
13228	Pre - establish a connection to a peer .
13229	Send a packet to a peer .
13230	Get a value from a config file .
13231	Decorator to add function to Nova customer process .
13232	Decorator to add function to Cinder customer process .
13233	Decorator to add function to neutron customer process .
13234	Decorator to add function to glance customer process .
13235	Decorator to add a function to process an event type .
13236	Decorator to add function to keystone process .
13237	Decorator to add function to process event_type .
13238	Adds a factory for the given identifier .
13239	Remove a factory from the pool .
13240	Connect to the remote server .
13241	Receive data from the server .
13242	Disconnects a connection .
13243	Calls a remote command .
13244	Create multiplexed AMP connection .
13245	Called when multiplexed AMP connection is made .
13246	Send data to the server .
13247	Send data to the remote server .
13248	Called when the connection is closed .
13249	Return the protocol associated with the given connection identifier .
13250	Called when data is received from the remote server .
13251	Disconnects a connection .
13252	Return a string centered at the given string .
13253	Display clock on right .
13254	Return a version number for the given major minor patch and build .
13255	Identify unit framework for target unit .
13256	Raise a TraitError if value is not in target_unit .
13257	Pads data_to_pad to block_size bytes .
13258	Unpad data .
13259	Signs the request and returns a JSON representation of the request .
13260	Return a dictionary of metadata statements for the given context .
13261	Print a list of anagrams .
13262	Adds an argument parser to the command line arguments .
13263	Runs the sowpods_in_word function .
13264	Called when data is received .
13265	Called when there is no handler for the given type .
13266	Create a function stub for a remote function .
13267	Ping a remote call .
13268	Return a list of commands that match the given command group .
13269	Create a new amp . AmpList from a protobuf .
13270	Return a string representation of this AMPList .
13271	Verify that the metadata statement is valid .
13272	Parse a JWKS response .
13273	Dump database to a file .
13274	Return a list of database names .
13275	Return a dictionary of local files for the given path .
13276	Sync a folder to S3 .
13277	Decorator to check if tokens are required for a list of services .
13278	Login to the user .
13279	Build all sub - modules of the given package .
13280	Create a new Fridge instance and close it .
13281	Load JSON data from file .
13282	Signs a JWT with JWKS .
13283	Create a request signed by signing keys .
13284	Decorator to mark a function as a library .
13285	Descovery the given directory .
13286	Execute tests for each card in a librarian library
13287	Return the score for a given letter .
13288	Return the score of a word .
13289	Return a list of words between start and end .
13290	Check if a word is a valid scrabble word .
13291	Runs the SOSearch .
13292	Runs the given command .
13293	Called when a string is received .
13294	Return the command and responder function .
13295	Parse request values .
13296	Run an AMP command .
13297	Writes the response to the transport .
13298	Called when the connection is closed .
13299	Build a JSONAMP dialect receiver .
13300	Convert jwks to a KeyJar
13301	Deserialize jstr into a KeyJar object .
13302	Process a message for a given event type .
13303	Process a message for a given event type .
13304	Process a message for a given event type .
13305	Processes a glance customer process .
13306	Processes an event .
13307	Processes a keystone customer process .
13308	Process a message for a given event type .
13309	Serve the server .
13310	Print a message to stdout .
13311	Print a message to stderr .
13312	Registers a CommandSubClass class .
13313	Registers a command sub - class .
13314	Return a string representation of the value .
13315	Convert a string to a Python value .
13316	Updates the completer dictionary with the given dictionary .
13317	Connect to the Ternya server .
13318	Initializes the connection to the queue .
13319	Import all the modules in the config .
13320	Initializes the openstack nova notification .
13321	Initializes openstack cinder notification .
13322	Initializes openstack neutron notification .
13323	Initializes the glance consumer .
13324	Initializes the heat consumer .
13325	Enable component notifications for the given openstack component .
13326	Get information about a song .
13327	Download a song .
13328	Execute this instruction .
13329	Load the given name from the globals dictionary .
13330	Call a function at index i .
13331	Dump database to file .
13332	Render a ditaa image .
13333	Calls the _atexit_func method of the application .
13334	Run the application .
13335	Context manager to temporarily change the working directory .
13336	Recursively copies the contents of src to dst .
13337	Sets up the debugger .
13338	Return the modification time of a file .
13339	Check if file is changed .
13340	Synchronize all files in the directory .
13341	Removes all files in the directory .
13342	Scrape a feed from a URL .
13343	Downloads the image from the server .
13344	Check if the image has been modified or not .
13345	Decorator to create a fancy tag function .
13346	Return a tuple of the caller and function .
13347	Gets the defining component for the given pe_pe .
13348	Main entry point for the model .
13349	Find a symbol for the given name and kind .
13350	Check if pe_pe is contained in root .
13351	Check if the PE is global .
13352	Return the name of the data type .
13353	Returns a list of related attributes for the given r_rgo
13354	Create a new Enum object from an S_EDT object .
13355	Create a bridge for the given s_brg .
13356	Create an external entity for the given s_ee .
13357	Create a function that will be run at the end of the sync .
13358	Create a constant from a CNST_SYCSC object .
13359	Create an operation from an o_tfr .
13360	Create a derived attribute .
13361	Create a new class based on the given model .
13362	Create a simple association .
13363	Create a relationship between two objects .
13364	Create a new association .
13365	Create a component for the given model .
13366	Executes the given call with the given arguments .
13367	Sends an ACCEPT command to the given socket .
13368	Rejectoves a message from the server .
13369	Raise an exception .
13370	Wait for a call to the collector .
13371	Establish a connection to a worker .
13372	Dispatch a reply to a remote result .
13373	Guess the type name for a value .
13374	Deserialize a value from a string .
13375	r LPAREN .
13376	r RPAREN .
13377	Returns a Feature object for the given content id .
13378	Return a generator for each document in the index .
13379	Index a list of features .
13380	Delete a document .
13381	Delete all mappings in the index .
13382	Delete the index .
13383	Scan the database for the given key ranges .
13384	Yields the ids for the given key_ranges .
13385	Scan features in a given prefix .
13386	Scans the given prefix and returns a generator of feature_ids .
13387	Perform a fulltext scan for a query .
13388	Perform a fulltext scan of query_id and query_fc
13389	Similar to _keyword_scan but does not return features .
13390	Yields a list of query ids that match the given query .
13391	Yields all documents that match the given criteria .
13392	Return a list of feature names from a list of feature names .
13393	Return a list of filters for a list of key ranges .
13394	Create the index .
13395	Create the mappings for the index .
13396	Return a mapping from feature names to index names .
13397	Return a list of field types for the given index .
13398	Returns a list of disjunction features from a query .
13399	Returns the number of features in fc_dict .
13400	Count the number of bytes that match the filter .
13401	Return a string representation of the feature counts .
13402	Find Known Secrets .
13403	Default error message formatter .
13404	Converts an instance to a link .
13405	Return a pretty unique identifier for an instance .
13406	Check uniqueness constraint .
13407	Raise an error if there is an integrity violation in a link .
13408	Raise an error if there is an integrity violation between the two models .
13409	Given a list of feature names return a list of features .
13410	Convert a string to a byte string .
13411	Put items into the cache .
13412	Deletes all tables and indexes .
13413	Perform a scan for the given key ranges .
13414	Scan the table for the given key ranges .
13415	Perform an index scan .
13416	Return the index scan prefix for the given index .
13417	IndexScan prefix and return key .
13418	Implementation of _index_scan_prefix_impl
13419	Define an index .
13420	Updates the index with the given ids and fcs .
13421	Put a raw value into the index .
13422	Return the keys for the given idx_name .
13423	Return the index with the given name .
13424	Check that the package name is valid .
13425	Adds the given direction to the value .
13426	Gets the type name of the given SDT .
13427	Gets the reference to the referenced attribute
13428	Builds the core type for the given S_CD .
13429	Builds an xs . enum type for the given s_edt .
13430	Build a struct type from a S_SDT object .
13431	Builds a user type from a SUDT .
13432	Return the build type for the given SDT .
13433	Build a class from an OObject .
13434	Build a component for the given O_OBJ model .
13435	Build a schema for the given m and c .
13436	Return a pretty representation of an XML string .
13437	Fetch a list of bike data .
13438	Set the positional information of the node .
13439	Decorator to track production information .
13440	r Double equal .
13441	Set endlexpos to the end of the value .
13442	Adds the lexpos to the end of the value .
13443	Adds the lex position to the end of the value .
13444	Adds the lexpos to the end of the value .
13445	Adds the lexpos to the end of the value .
13446	r DOT notation .
13447	r LQBR .
13448	r QBR .
13449	r QMARK .
13450	r LSSTHAN .
13451	Adds the lexpos to the end of the value .
13452	Adds the lex position to the end of the value .
13453	Create a queue .
13454	Delete a queue .
13455	Return a list of all queue objects .
13456	Return a list of all exchanges .
13457	Purge a queue .
13458	Create a multipart message .
13459	Reads the image from disk .
13460	Checks if the input string is visible to the user .
13461	Main entry point for xtuml .
13462	Serialize a value to a string .
13463	Serialize the association to a SQL statement .
13464	Serialize a class to a SQL CREATE TABLE statement .
13465	Search files using n - grams .
13466	Search for the given query .
13467	Return a list of elements that satisfy a condition .
13468	Runs a web application .
13469	Return the bidi of the request .
13470	Find a link between two models .
13471	Return a new instance of the target class that is a reference to the source class .
13472	Return a lookup key for the given instance .
13473	Compute the index key for the given instance .
13474	Return the attribute type for the given attribute name .
13475	Create a new instance of this model .
13476	Return a generator of all instances of this class .
13477	Define a class with the given attributes .
13478	Send a message to a ZMQ socket .
13479	Receive a message from a socket .
13480	Generate the dead code for the project .
13481	Parse emails from a list of strings .
13482	Decorator to wrap a function as an RPC .
13483	Return a dictionary of rpc specs for the given application .
13484	Normalizes the request to match the given postcode .
13485	Return the next value from the stream .
13486	Accept all S - SYS child elements .
13487	Accepts a C_C instance .
13488	Accept all PE - PEs in an instance .
13489	Get the brightness of the image .
13490	Return True if the pattern matches the given arguments .
13491	Search for the character at the given position .
13492	Return a selection for the character at the given position .
13493	Called when the cursor position has changed .
13494	Return a tuple of the exc_info of this exception .
13495	Create the input hook for Qt4 .
13496	Get a mapper instance by name .
13497	Decorator to register a function as a url pattern .
13498	Decorator to register a function as a url .
13499	Add a function to the data store .
13500	Adds a function to a path .
13501	Call url with the given method and arguments .
13502	Runs the given command .
13503	Move to the first line of the prompt .
13504	Move the cursor down .
13505	Return True if there is a previous version of the history .
13506	Return True if there is a history entry with the given substring .
13507	Handles an execute reply message .
13508	Return True if the history is locked .
13509	Returns the edited history at the given index .
13510	Sets the history .
13511	Stores the current history .
13512	Called when time to close the console .
13513	Build a Record Collection from a DataFrame
13514	Convert a collection to a pandas dataframe .
13515	Create a spin dataframe from a DataFrame .
13516	Set the attributes of the model .
13517	Subscribe to all topics .
13518	Log a log message .
13519	Merge a list of lists into a list of lists .
13520	Iterate over a remote iterator .
13521	Convert a notebook to v2 format .
13522	Return the build platform .
13523	Return an import object for the given path item .
13524	Return a StringIO object for the given arguments .
13525	Parse a version string into a tuple .
13526	Return True if the requirement overrides setuptools .
13527	Add a new entry to the registry .
13528	Find all the plugins in the given environment .
13529	Get the cache path for the given archive .
13530	Parse a string into a Requirement object .
13531	Return the parsed package info .
13532	Return a list of Require - Dist and Provides - Extra requirements .
13533	Parse a filename .
13534	Collapse leading whitespace from a string .
13535	Hides the widget .
13536	Override method to update the current cursor position .
13537	Return the current text cursor .
13538	Update the current item .
13539	Registers the admin site .
13540	Return a list of partition objects for a list of Windows partition objects .
13541	Get system CPU time .
13542	Return a list of system per CPU time .
13543	Return raw data from stdin .
13544	Return a raw block of data from stdin .
13545	Updates the tab bar visibility .
13546	Create a tab with the current kernel .
13547	Add a new tab to the frontend .
13548	Adds an action to the given menu .
13549	Decorator to create dynamic magic .
13550	Populate all the magic menu .
13551	Close all tabs and Quit .
13552	Return a random password .
13553	Check if the passphrase matches the hashed passphrase .
13554	Create an editable boolean cell .
13555	Short title of an item .
13556	Return a dictionary of editable Booleans .
13557	Toggle boolean .
13558	Return True if the user has permission to change an object .
13559	Return True if the user has permission to delete an object .
13560	Adds all the children of the given parent to the graph .
13561	Create a bintree .
13562	Submit jobs for each node in the graph .
13563	Validate that the tree is valid .
13564	Create color table for the given in_class .
13565	Return a copy of this color scheme .
13566	Add a ColorScheme instance to the ColorSchemeTable .
13567	Set the active color scheme .
13568	Return the path to the home directory of the lib directory .
13569	Handles iopub messages .
13570	Handles an iopub request .
13571	Wait for the kernel to be running .
13572	Set the style .
13573	Get the format for the given token .
13574	Return a QTextCursor for the given token .
13575	Return a QtGui . QTextCharFormat for the given style .
13576	Try to find a command on the PATH .
13577	Normalize a path .
13578	Raise an error if value is not a package namespace .
13579	Raise DistutilsSetupError if value is invalid .
13580	Return True if src is the last blank line .
13581	Return True if the last two blank lines of the given source .
13582	Transform assign system .
13583	Transform assignment magic .
13584	Transform a classic prompt .
13585	Transform IPython prompt .
13586	Push a list of lines into the code object .
13587	Return True if the client should accept more than one block of input .
13588	Find indent and full dedent .
13589	Store lines into self . _buffer .
13590	Resets the source to its initial state .
13591	Handles cell magic .
13592	Append lines to the cell .
13593	Apply the given cell to the source .
13594	Add lines to the input splitter .
13595	Initializes the observers .
13596	Post a notification for a given type and sender .
13597	Return a set of observers for the given ntype and sender .
13598	Add an observer for the given type and sender .
13599	Create a new job .
13600	Update the status of all jobs .
13601	Print a group of jobs .
13602	Flush all jobs in a group .
13603	Create a new status report .
13604	Update the status of the group .
13605	Initializes the background job .
13606	Insert a value at the specified index .
13607	Return a copy of this object .
13608	Declares a special variable .
13609	Declare a list variable .
13610	Declare a new SetVariable .
13611	Set the current working directory .
13612	Move the route to the given state .
13613	Returns the energy of a given state .
13614	Return a dictionary with the default values .
13615	Check if the table exists .
13616	Convert a list into a dictionary .
13617	Return a list of expressions for the given check .
13618	Print a warning message and exit .
13619	Parse the config file and return the loaded config .
13620	Create a table from a list of rows .
13621	Create a link .
13622	Adds media_url for relative paths
13623	Adds media_url for relative paths
13624	Return an image tag for the given url .
13625	Subtracts two numeric values .
13626	Multiply a value by the given number .
13627	Divide value by arg .
13628	Return the remainder of the given value .
13629	Return the verbose name of a model .
13630	Split a line of user input .
13631	Add command line options to the given parser .
13632	Add a builtin function to the global dictionary .
13633	Removes a builtin function .
13634	Deactivates the module .
13635	Find URL name for a requirement .
13636	Return a list of Link objects for the given rels .
13637	Unquote a comma - separated list of filenames .
13638	Runs the coverage script .
13639	Add an action .
13640	Append an action to the parser .
13641	Parse command - line options .
13642	Print help for coverage .
13643	Handles help and version .
13644	Check if the arguments are valid .
13645	Run the script .
13646	Print the coverage information .
13647	Unserialize a list of objects .
13648	Set the display hook .
13649	Log any errors raised by a function .
13650	Return True if url is a valid URL .
13651	Validate that the given url is valid .
13652	Validate that a container is a valid URL .
13653	Pull a list of keys from the user namespace
13654	Return a list of random ports .
13655	Decorator to create a remote function .
13656	Return a parallel version of a function .
13657	Map a sequence of sequences to a new sequence .
13658	Get the tail of the history .
13659	Set the auto - indent flag .
13660	Initializes the logstart .
13661	Saves the state of the sys module .
13662	Restores the sys module state .
13663	Register a post - execute function .
13664	Create a new Fakemod module .
13665	Cache the main module .
13666	Initializes the user s namespace .
13667	Return a list of all namespace references for this user .
13668	Resets the state of the session .
13669	Delete a variable .
13670	Resets all namespace references that match the given regex .
13671	Push variables to the user namespace .
13672	Return a dict of all aliases for the given oname .
13673	Return the info for a class property .
13674	Search for an object by name .
13675	Inspect an object .
13676	Initializes the history .
13677	Show the traceback of an exception .
13678	Show a traceback .
13679	Print a traceback .
13680	Show syntax errors .
13681	Prepends the current string to the readline buffer .
13682	Complete the given text on the given line .
13683	Set a completer .
13684	Set the completer frame .
13685	Run a line magic .
13686	Return the magics for the given magic name .
13687	Define a macro .
13688	Runs the given command in the system .
13689	Try to auto - rewrite input .
13690	Return a dictionary of user - defined variables .
13691	Return a dictionary of user expressions .
13692	Evaluate the given expression .
13693	Safely execute a file .
13694	Runs a cached cell magic .
13695	Run a single cell .
13696	Run AST nodes from a list of nodes .
13697	Enable IPython .
13698	Expands the given command to the given depth .
13699	Create a temporary file .
13700	Extracts the input lines for the given range_str .
13701	Return the code for the given target .
13702	Close all tempfiles .
13703	Broadcast a message to a sender .
13704	Send a message to one or more targets .
13705	Decorator to mark a function as skipped .
13706	Decorator to mark a function as known failure .
13707	Decorator to mark functions as deprecated .
13708	Returns a list of profiles in the given path .
13709	Return a list of all bundled profiles .
13710	Return the version of the requirement if it exists .
13711	Run a command and wait for it to finish .
13712	Return full path to a file or None if not found .
13713	Return the next line from the stream .
13714	Send a string to the child process .
13715	Send a single character to the child process .
13716	Prepare a compiled regex pattern .
13717	Expects a list of patterns matching the given pattern .
13718	Expects the given searcher to match the given searchwindow size .
13719	Prepare a compiled regex pattern .
13720	Search for all strings in buffer .
13721	Searches for the given buffer .
13722	Log listener .
13723	Unpack a directory .
13724	Emit a message .
13725	Return the last error .
13726	Checks the output of a command .
13727	Find the source for the given filename .
13728	Return a list of arcs that have been executed .
13729	Return a list of arc possibilities that are not in no_branch .
13730	Return a list of unpredicted arc possibilities .
13731	Return a list of branch lines .
13732	Return the total number of branches .
13733	Return a dictionary of missing branch arcs .
13734	Return a dictionary of the number of missing branch ARCs .
13735	Sets the precision of the model .
13736	Calculate the coverage of the number of statements and branches .
13737	Return a string representation of the PC covered .
13738	Highlight text in needles and haystack .
13739	Highlight the given string with the given keywords .
13740	Highlights the given string with the given keywords .
13741	Runs the given function and returns the result .
13742	Unquote the end of a string .
13743	Indent a string .
13744	Convert a string to a marquee string .
13745	Format a screen string .
13746	Dedent the given text .
13747	Wrap paragraphs .
13748	Find optimal number of rows in a list .
13749	Return the value at index i or default if not found .
13750	Compute the item matrix for a list of items .
13751	Return a list of fields .
13752	Builds the arguments for the kernel .
13753	Initiate SSH connection to the remote host .
13754	Return a pretty representation of an object .
13755	Print a representation of an object .
13756	Return a list of MROs for the given object class .
13757	Default Print .
13758	Create a pretty representation of a sequence .
13759	Decorator to create a ppprinter from a dictionary .
13760	Pretty print a super object .
13761	Pretty print a re . pattern .
13762	Prepends the name of the object to p .
13763	Pretty print a function .
13764	Pretty print an exception .
13765	Return a function for a given type .
13766	Return the deferred function for the given type by name .
13767	Writes a text object to the output .
13768	Break the current group .
13769	End a group .
13770	Flush the output buffer .
13771	Return a pretty representation of the given object .
13772	Return a ColorSchemeTable of color schemes to be used in the traceback .
13773	Writes a row into an ods sheet .
13774	Get the text from the clipboard .
13775	Get clipboard contents .
13776	Get text from the clipboard .
13777	Return the build prefix .
13778	Rekey a dictionary .
13779	Extract dates from a dictionary or list of strings .
13780	Recursively squash dates from a dict or list .
13781	Return a default string representation of a date object .
13782	Return a JSON string representation of an object .
13783	Check if the site - dir is a site - dir .
13784	Write contents to script_name .
13785	sleep for a given number of seconds
13786	Create a new command line parser .
13787	Convert cython sources to C .
13788	Connect to the iopub server .
13789	Build a package finder .
13790	Called when a log level is changed .
13791	Return a default logger .
13792	Asserts that all of the flags have changed .
13793	Print the help for the given aliases .
13794	Print the help for each flag .
13795	Print the subcommands .
13796	Print help .
13797	Print examples .
13798	Update the current config with a new one .
13799	Initializes a sub - command .
13800	Flatten all of the flags for each class .
13801	Parse command line .
13802	Load a config file .
13803	Generates the configuration file .
13804	Downsample k elements from an array .
13805	Format a dictionary into a list of strings .
13806	Writes a message to the output file .
13807	Check if the config has changed .
13808	Return the help for the given class .
13809	Return the help for the given trait .
13810	Return a section of a class s configuration .
13811	Clears the instance of the calling class .
13812	Create and return an instance of cls .
13813	Format a test failure .
13814	Handles an exception and prints it to stderr .
13815	Flush all sub - sockets .
13816	Starts new channels .
13817	Read data from file object fp .
13818	Return the contents of the file p without interrupts .
13819	Process handler .
13820	Split a string into a list of tokens .
13821	Compress a list of histograms .
13822	Instantiate the magics class .
13823	Record a function for a given magic kind .
13824	Decorator to mark a function as a method .
13825	Decorator to mark a function as a magic function .
13826	Return a dictionary of all lsmagic functions .
13827	Registers the given magic objects .
13828	Register a function in the user_magics table .
13829	Format a LaTeX string .
13830	Parse command line options .
13831	Set a default option .
13832	Create an IPython page .
13833	Create a task with a callable .
13834	Return the function info of a task with a given label
13835	Return a callable for the given info .
13836	Calculates the next run from the schedule .
13837	Submits the task .
13838	Run the task .
13839	Runs the job asap .
13840	Run the given callable with the given number of iterations .
13841	Run the given callable only once .
13842	Find the URL file .
13843	Binds the kernel to the IPython session .
13844	Run through extension hooks .
13845	Create an interrupt event .
13846	Wait for the process to terminate .
13847	Filter ns by name pattern and type pattern .
13848	List all objects in a namespace .
13849	Makes sure that the options are mutually exclusive .
13850	Draws the current active figure if it is in interactive mode .
13851	Forcefully close all figures .
13852	Send a figure to ZMQ .
13853	Load an extension from a module .
13854	Unloads an extension .
13855	Generate random ports .
13856	Initializes the notebook server .
13857	Handles a SIGINT signal .
13858	Confirm shutdown of the server .
13859	Shut down kernels
13860	Calculate price options for a given stock price and number of days .
13861	Replace multiple strings in a dictionary .
13862	Return a string representation of the given name .
13863	Launch a new kernel .
13864	Create a zip file .
13865	Fix version in metadata . txt .
13866	Check if an object is mappable .
13867	Return the partition of a sequence .
13868	Monpatch pexpect . spawn .
13869	Runs the given file .
13870	Runs the given source .
13871	Report coverage data to XML file .
13872	Create an XML file representing the analysis .
13873	Download the pi200m file .
13874	Reduce the number of frequencies in a list of frequencies
13875	Compute n_digit_freqs for a file .
13876	Converts a text file to a list of digits .
13877	Return the frequency of the number of digits in a list of integers .
13878	Calculate the two - digit frequency of a list of integers .
13879	Returns the number of times each digit appears in the given list of digits .
13880	Plots the two - digit frequency distribution .
13881	Plots for one digit frequency .
13882	Print a debug message for debugging .
13883	Reverse a view .
13884	Checks whether the given base is private .
13885	Create a DocFileSuite from a list of paths .
13886	Create a debug script from an example script .
13887	Run a script in debug mode .
13888	Returns a debug script for the given module .
13889	Return a dictionary of the contents of the given hashroot .
13890	Compress all files in hashroot .
13891	Return a list of all files that match the given glob .
13892	Allow or deny a record .
13893	Return True if any of the given matchers match the given record .
13894	Format an error .
13895	Runs the shell with the given arguments .
13896	Runs the IPython interpreter .
13897	Returns two CSV writer objects for the given title and meta title .
13898	Create locale directories for the given languages .
13899	Writes a list of POEntries for each language .
13900	Write header to file .
13901	Subscribe to a user .
13902	Initializes the command line parser .
13903	Search for a module within its parent package .
13904	Run a file .
13905	Create a code object from a Python source file .
13906	Create a code object from a . pyc file .
13907	Converts an item matrix to an HTML table .
13908	Sets the current value .
13909	Cancels the completion .
13910	Select the index for the given row and column .
13911	Select up to the end of the index .
13912	Selects down to the end of the query .
13913	Selects the first element of the sequence .
13914	Selects the right side of the query .
13915	Updates the list .
13916	Return the frequency of each word in text .
13917	Print the frequency of each word .
13918	Return a string representation of the element .
13919	Writes the object to a file .
13920	Validate that the pin is valid .
13921	Sends a shared pin to one or more topics .
13922	Delete a shared pin .
13923	Sends a user pin .
13924	Delete a userpin .
13925	Subscribe to a topic .
13926	List all subscriptions for this user .
13927	Decorator to mark a function as monitored .
13928	Starts a new workload .
13929	A context manager for a task .
13930	A context manager for a subtask .
13931	Updates the progress monitor .
13932	Create a sub - monitor .
13933	Mark the task as done .
13934	Display a page of text .
13935	Moves this package to a new build location .
13936	Load configuration from a list of pyconfig files .
13937	Load configuration from file .
13938	Load the config file as a dictionary .
13939	Loads a flag from a dictionary .
13940	Decodes a list of arguments .
13941	Load configuration from a file .
13942	Load the config from the given arguments .
13943	Parse command - line arguments .
13944	Converts the parsed data to a dictionary .
13945	Find a module by name or path .
13946	Called when the stop signal is called .
13947	Notify the process that the process is running .
13948	Called when the process is stopped .
13949	Interrupt the process then kill the process .
13950	Return a list of arguments to be passed to mpi_cmd .
13951	Start a new process .
13952	Send a file to a remote location
13953	Copy a file from remote to local
13954	Return the number of engines .
13955	Start one or more engines .
13956	Start a Win HPC job .
13957	Return default context .
13958	Parse a job id from an output string .
13959	Writes a batch script .
13960	Start the batch script .
13961	Create context menu for given position .
13962	Append a jpg to the document .
13963	Append a PNG to the prompt .
13964	Append an SVG to the document .
13965	Adds an image to the document .
13966	Copy image to clipboard .
13967	Gets the image with the given name .
13968	Inserts an image into the cursor .
13969	Inserts SVG data into the cursor .
13970	Saves an image .
13971	Stops the IOLoop if it has changed .
13972	Initializes the environment for this process .
13973	Automatically rewrite input .
13974	Ask the user to exit the process .
13975	Set the next input .
13976	Read configuration from file .
13977	Returns a list of values for a section and option .
13978	Return a list of values for option in section .
13979	Set self . timid from environment variable .
13980	Create an instance from a dictionary of arguments .
13981	Load configuration from a file .
13982	Set an attribute from a config option .
13983	Expand a user s home directory .
13984	Sets the delims .
13985	Split a line into a list of tokens .
13986	Return a list of global matches for the given text .
13987	Return a list of attribute matches for the given text .
13988	Set the splitter s delims attribute to new .
13989	Return a list of filenames that match the given text .
13990	Return a list of aliases that match text .
13991	Return a list of matches for text .
13992	Returns a list of default arguments for the given object .
13993	Return a list of completions for the given text .
13994	Re - complete the given text .
13995	Return True if the record matches one of the tests .
13996	Return a list of records that match the given dictionary .
13997	Return a copy of the given record with the given keys .
13998	Return True if there is no output to the user .
13999	Writes the output prompt .
14000	Writes the data to the output file .
14001	Log the output of the command .
14002	Raise InvalidOperationException if the object is not freezed .
14003	Convert a MySQL timestamp to a Python timestamp .
14004	Called when the eventloop is changed .
14005	Dispatches a control message .
14006	Dispatch a shell message .
14007	Starts the shell .
14008	Do one iteration of the process .
14009	Publish a PythonIn message .
14010	Abort request .
14011	Send a clear request to the server .
14012	Return the topic for this process .
14013	Send the shutdown message to the iopub socket
14014	Create a copy of sys . modules and append it to the context .
14015	Removes all sys . modules entries from the context .
14016	Return the absolute path of the given path .
14017	Return True if the given path is a file or directory .
14018	Check if an object is a class .
14019	Check if the given path is a package .
14020	Return the package name for the given filename .
14021	Return the label as a long string .
14022	Return the last key for the given regex .
14023	Decorator to transplant a function .
14024	Return a transplant class from a module .
14025	Get system CPU time .
14026	Get the cmdline of the process .
14027	Return a list of open files for this process .
14028	Return a list of connection objects for the given kind .
14029	Check if a user has a group .
14030	Resolve a class from its fully qualified path .
14031	Return the usage percentage .
14032	Memoize a function .
14033	Decorator to mark functions as deprecated .
14034	Login to Google docs .
14035	Gets the key from the URL .
14036	Ensure temp path exists .
14037	Clear all temp files .
14038	Uploads a file to the Google docs .
14039	Synchronize data from GCS to PO docs .
14040	Download CSV from GDOCS .
14041	Upload translations to local ODS .
14042	Delete the empty . csv file .
14043	Create a new Qt console .
14044	Check if url is accessible from this machine .
14045	Check if url has contents .
14046	Return the response code for the given URL .
14047	Compares a URL s content type to a given content type .
14048	Compare the response code with the given code .
14049	Validate that data and metadata are valid .
14050	Clear stdout and stderr .
14051	Return the full path to a command .
14052	Return a list of CodeUnit objects from a list of morfs .
14053	Return the flat root name of the module .
14054	Return the source file for this code .
14055	Return True if the file should be Python .
14056	Return the total number of seconds since epoch .
14057	Wait for the result to be ready .
14058	Wait for the output to be ready .
14059	Return a dictionary representation of the job metadata .
14060	Abort a message .
14061	Return the number of seconds since the last message .
14062	Wait for the task to finish .
14063	Republish a displaypub .
14064	Wait for all outputs to be ready .
14065	Wait for the result to complete .
14066	Return the absolute path of a file .
14067	Prepare a list of patterns to be prepended .
14068	Return the separator for the given string .
14069	Find all Python files in the given directory .
14070	Return filename relative to relative_dir .
14071	Return the canonical filename for the given filename .
14072	Extract data from a zip file .
14073	Return True if fpath is a file in the directory .
14074	Return True if fpath matches one of the patterns .
14075	Map the given path to the given path .
14076	Start event loop for Qt4 .
14077	Runs the given kernel in a wx event loop .
14078	Runs the given kernel in a separate thread .
14079	Loop the GTK kernel .
14080	Create a CFRunLoop from a Cocoa backend .
14081	Enable an IPython GUI .
14082	Calculate GOE .
14083	Calculates the difference between the eigvalues of a matrix and returns the difference .
14084	Calculates the difference between ensemble values and Eigenvalues .
14085	Create a new instance of self with the given context and step address .
14086	Parse a step configuration file .
14087	Parse a single step .
14088	Initializes the crash handler .
14089	Load the config file .
14090	Initializes the profile directory .
14091	Generate and write the default config file .
14092	Writes the data to the file .
14093	Erases the file .
14094	Return a dictionary of line data .
14095	Return a dictionary of the arc data .
14096	Write the data to a file .
14097	Read lines and arcs from a file
14098	Read raw data from file .
14099	Read data from a file .
14100	Combine parallel data into a single file .
14101	Add line data to self . lines .
14102	Add arc data to self . arcs .
14103	Add lines and ARCs to a hash .
14104	Return a summary of the contents of the file .
14105	Return a list of pasted lines .
14106	Runs the main loop .
14107	Replaces the contents of source_raw with hlen_before_cell .
14108	Return a raw input from the user .
14109	Edit syntax error .
14110	Return True if the editor should be re - compiled .
14111	Ask the user to exit .
14112	Get the URL and revision from the URL .
14113	Create a new frontend master .
14114	Initializes the colors for the given widget .
14115	Return a tuple of identity url pub url and location .
14116	Convert an R object to a numpy array .
14117	Find source code for the given object .
14118	Set colors to the active color scheme .
14119	Toggle the color scheme .
14120	Convert a structured traceback to a text string .
14121	Return a structured traceback .
14122	Format a list of filenames and line numbers .
14123	Format exception only .
14124	Print exception only .
14125	Return a PDB instance of the debugger .
14126	Set the mode of the traceback .
14127	Decorator to check if the user is a member of a group .
14128	Recursively import from a list of sub - modules .
14129	Add a line to the code .
14130	Adds a section to the code .
14131	Return the function with the given name .
14132	Return the code for an expression .
14133	Render the view to a dictionary .
14134	Return a value from a list of dots .
14135	Render a template .
14136	Return default formatters .
14137	Add a function to be used for the given type .
14138	Return the deferred printer function for the given type .
14139	Set the float precision .
14140	Return a list of user - specific config files .
14141	Configure the test suite .
14142	Configures the logging .
14143	Set up the configuration for the given where .
14144	Print a page of text .
14145	Print a page of text from a string .
14146	Show the contents of a file .
14147	Get PAGER command .
14148	Get the start string for a pager .
14149	Print a string to the screen .
14150	Print a basic Unicode string .
14151	Print a PNG representation of an object .
14152	Print a display .
14153	Return True if the given object can be printed in LaTeX .
14154	Print a La representation of an object .
14155	Add options to the plugin .
14156	Validate that the input is a list of strings .
14157	Validate that a dictionary is a string .
14158	Start the ioloop thread .
14159	Handles a received message .
14160	Executes the given code .
14161	Sends a complete request .
14162	Get information about an object .
14163	Sends a history request .
14164	Send shutdown request to the kernel .
14165	Flush all pending data to the IOLoop .
14166	Send an input message to the user .
14167	Starts all the channels .
14168	Stops all open channels .
14169	Return True if all channels are running .
14170	Load the connection file .
14171	Writes the connection file .
14172	Launch a kernel on a local interface .
14173	Shutdown the kernel .
14174	Restarts the kernel .
14175	Kill the kernel .
14176	Interrupts the kernel .
14177	Sends a signal to the kernel .
14178	Check if the kernel is still running .
14179	Return an instance of the shell channel .
14180	Return an instance of the sub channel .
14181	Return an instance of hb_channel_class
14182	Bind a kernel to an IPython instance .
14183	Prints a debug message if the debug level is greater than level .
14184	Return a dictionary of extension classes .
14185	Pre - step hook .
14186	Runs the post_step hook .
14187	Finalize all extensions .
14188	Iterate over an egg directory .
14189	Scan for a module .
14190	Launch a new instance of the application .
14191	Save connection info to file fname .
14192	Load configuration from JSON file .
14193	Load the secondary config from a JSON file .
14194	Executes the given cell in parallel .
14195	Enable autopx .
14196	Disable autopx .
14197	Run a single cell .
14198	Runs a heartbeat .
14199	Runs a task .
14200	Remove a task from the database .
14201	Patch protocol for agent .
14202	Patch an object if it doesn t exist .
14203	Accept a connection .
14204	Rejectoves the connection .
14205	Get a proxy agent .
14206	Validates that the form is valid .
14207	Delete the object .
14208	Pre - save the user .
14209	Writes the code units to a file .
14210	Check if all modules have been loaded .
14211	Open an IPython editor .
14212	Fix an error editor .
14213	Return the clipboard .
14214	Add a function to the chain .
14215	Return the metadata for the given path or module .
14216	Configures the configuration for debugging .
14217	Import an item from a Python module .
14218	Try to use passwordless SSH .
14219	Try to use a passwordless SSH connection .
14220	Try to use a passwordless SSH connection .
14221	Open a tunnel connection .
14222	Open SSH tunnel .
14223	Stops all outstanding tasks .
14224	Unwrap an exception .
14225	Registers an engine message .
14226	Unregisters an engine .
14227	Handles an execute reply message .
14228	Flushes all pending notifications .
14229	Flush all results from the server .
14230	Flush the control to the given socket .
14231	Flush all data from the control socket .
14232	Flush all IOPub messages from a socket .
14233	Spawns the simulation every interval seconds .
14234	Stops the spin thread .
14235	Flushes all pending data .
14236	Wait for all outstanding jobs to be processed .
14237	Send a request to the server .
14238	Sends a execute request to the server .
14239	Get the result for a list of messages or a list of message ids .
14240	Get the status of a queue .
14241	Purge results for one or more targets .
14242	Return the history of the query .
14243	Send a query to the database .
14244	Return a set of opcodes for the given names .
14245	Return the byte parser .
14246	Return a list of lines that match one of the given regexes .
14247	Return a list of tokens which match the exclusion pattern .
14248	Returns the first line for the given line .
14249	Returns the first lines in the given list of lines .
14250	Parse a Python source file .
14251	Return a list of all arcs .
14252	Return a dictionary of exit counts for each class definition .
14253	Return a list of child parsers for this code object .
14254	Return a generator for each byte number and line number .
14255	Find all of the statements in this code .
14256	Return a representation of a block stack .
14257	Split the code into chunks .
14258	Validate that the chunks are valid .
14259	Yields the arcs of the trace function .
14260	Split all child parsers into chunks .
14261	Return a list of all arcs for this parser .
14262	Add coverage options to the given parser .
14263	Start the coverage instance .
14264	Generate HTML and XML coverage report .
14265	Return True if the given file should be covered .
14266	Interpretation of a distribution name .
14267	Open a URL with authentication .
14268	Fetch a distribution based on a requirement .
14269	Return the parent of the given object .
14270	Return the root topic of the engine .
14271	Render a template .
14272	Configures the config with the given options .
14273	Format an error .
14274	Split data by num elements .
14275	Converts a notebook to this version of nbformat .
14276	Convert hex color to RGB .
14277	Get the colors for the given stylename .
14278	Return a font for the given family .
14279	Handles a reply to an execute message .
14280	Handles a history reply .
14281	Handles a pyout message .
14282	Handles display data .
14283	This method is called when the IPython widget is initialized .
14284	Executes a file .
14285	Process an error message .
14286	Processes a single payload .
14287	Set the default style .
14288	Edit a file .
14289	Make an in - prompt .
14290	Make a continuation prompt .
14291	Called when the style sheet has changed
14292	Called when the syntax style has changed .
14293	Handles the response from the server .
14294	Sign url_parameters with API secret .
14295	Transform data into a dictionary .
14296	Return information about the virtual memory .
14297	Get system CPU time .
14298	Return a list of process uids for this process .
14299	Returns a list of GIDs for the process .
14300	Returns a list of all threads owned by this process .
14301	Return a list of open files for the process .
14302	Return installation and repository hash .
14303	Return information about a package .
14304	Return information about the system .
14305	Return the number of CPUs .
14306	Return the number of CPUs .
14307	Return the next result set for this query .
14308	Fetch a single row from the database .
14309	Fetch a number of rows from the database .
14310	Fetch one or more rows from the database .
14311	Connect to the server .
14312	Convert a JSON string to a JSON object .
14313	Converts a string to a Python notebook .
14314	Return a list of reads for the given format .
14315	Writes a notebook to a file .
14316	Writes data to a file .
14317	Convert all . ipynb files to metadata files .
14318	Loads the value from a dictionary .
14319	Return True if name matches one of the filters .
14320	Return True if the given class should be subclass of the given class .
14321	Return True if the given directory should be included .
14322	Check if file should be loaded .
14323	Check if a function should be called .
14324	Check if the given method should be called .
14325	Return True if the given module is wanted to be imported .
14326	Return a list of lines from a file .
14327	Print the contents of the list command .
14328	Print a list of lines .
14329	Prepend locals and globals to the current frame .
14330	Returns the conversion factor between two currency prices .
14331	Convert a currency symbol to another currency symbol .
14332	Computes the return for a given date .
14333	Return the encoding for the given stream .
14334	Return the default encoding for stdin .
14335	Writes the connection file .
14336	Initializes the heartbeat .
14337	Log connection info .
14338	Initializes the session .
14339	Initializes the iopub stream .
14340	Initializes the kernel .
14341	Initiate a connection to the remote host .
14342	Register with the controller .
14343	Converts HTML content to text .
14344	Convert markdown content to text .
14345	Converts a domain name to a fully qualified domain name .
14346	Adds command line options to the given parser .
14347	Configure configuration for NoseExclude .
14348	Return True if the given directory should be excluded .
14349	Return True if this extension links to dynamic libraries .
14350	Calls each of the functions in a list .
14351	Calls each of the given functions in reversed order .
14352	Add a function to the list .
14353	Insert a function at the specified index .
14354	Format a usage string .
14355	Initializes the parallel application .
14356	Writes the pid file .
14357	Removes the pid file .
14358	Get the pid from the pid file .
14359	Construct a parser for the given magic function .
14360	Return the real name of a magic function .
14361	Highlights the given string .
14362	Rehighlights a block .
14363	Override this method to set the format for the current offset .
14364	Copy the current page to the clipboard .
14365	Executes the given source .
14366	Called when the prompt is finished .
14367	Perform tab completion if tab is pressed .
14368	Create the context menu .
14369	Filter a key event .
14370	Inserts the prompt at the end of the input .
14371	Handles a complete reply .
14372	Sends a silent exec callback to the kernel .
14373	Handles an exec callback message .
14374	Handles a execute reply .
14375	Handles an input request .
14376	Handles kernel died .
14377	Handles an object info reply .
14378	Handles a pyout message .
14379	Handles a stream message .
14380	Handles a shutdown reply .
14381	Executes a file at path .
14382	Interrupts the kernel .
14383	Resets the session to its initial state .
14384	Restarts the kernel .
14385	Sends the call tip request to the kernel
14386	Send the completion request to the kernel .
14387	Process an error message .
14388	Process a message and print a warning if there is an error .
14389	Called when the contents of the document have changed .
14390	Adds a plugin to the registry .
14391	Runs all the plugins in the chain .
14392	Return a generator for each of the plugins .
14393	Runs all the plugins with the given arguments .
14394	Configures the plugins .
14395	Load all installed plugins .
14396	Load all builtin plugins .
14397	Convert a LaTeX string to PNG .
14398	Converts a LaTeX string to HTML .
14399	Converts a string to an image .
14400	Check if the requirement is installed .
14401	Return an iterator over all processes in the process pool .
14402	Return the percentage of idle CPU time .
14403	Return a dictionary representation of this process .
14404	Return the name of the process .
14405	Return the full path to the executable .
14406	Return a list of all children of this process .
14407	Get the CPU percent of the system .
14408	Returns the amount of memory allocated to this platform .
14409	Return a list of all memory maps for this platform .
14410	Check if the process is running .
14411	Suspend the current process .
14412	Resumes the current process .
14413	Kill the current process .
14414	Wait for the process to terminate .
14415	Wires the kernel .
14416	Hijack gtk . main and gtk . main_quit .
14417	Check if identifier is shadowed .
14418	Initializes the transformers .
14419	Register a transformer .
14420	Unregisters a transformer .
14421	Initializes the checkers .
14422	Register a checker .
14423	Unregisters a checker .
14424	Initializes the handlers .
14425	Registers a handler for the given name .
14426	Unregisters a handler .
14427	Prefilter a line info .
14428	Find handler for line_info .
14429	Apply transformers to line .
14430	Pre - filter a line .
14431	Prefilter a list of lines .
14432	Check ifun is an IPyAutocall instance .
14433	Check if the line_info is a magic line .
14434	Check if the given line_info is a help or shell command .
14435	Check if the line_info is a valid alias .
14436	Handles a line_info .
14437	Processes the given line_info .
14438	Handles the given line_info .
14439	Handles a line_info .
14440	Handles a line_info object .
14441	Handles a line_info .
14442	Hides the tooltip if the object is a callTip widget .
14443	Override method to stop the timer .
14444	Override this method to customize the tooltip .
14445	Show information about a call .
14446	Shows the given tip .
14447	Called when the cursor position has changed .
14448	Return a proxied attribute .
14449	Converts a path to a canonical path .
14450	Validate an instance against a schema .
14451	Return a new masked dictionary .
14452	Check if there is no - global site - packages . txt file in the virtualenv .
14453	Return a dictionary of word frequencies for the given fnames .
14454	Decorator for a view .
14455	Return a list of default aliases for the current system .
14456	Defines an alias .
14457	Define an alias .
14458	Raise an InvalidAliasError if the alias is invalid .
14459	Call an alias .
14460	Transform an alias .
14461	Expand aliases from user input .
14462	Create a directive for the help .
14463	Resets the GSR to 0 .
14464	Split a string into a list of actions .
14465	Return a QColor object for the given color and intensity .
14466	Returns a QTextCharFormat
14467	Generate a random JWT .
14468	Decorator to protects a function with a mutex .
14469	Cleans up expired JWTs .
14470	Checks if a token is already used .
14471	Validates a JWT token .
14472	Create a new semaphore .
14473	Return the common prefix of a list of strings .
14474	Filter the event for the given object .
14475	Return the size of the scrollbar .
14476	Return True if text cursor can be cut .
14477	Return True if clipboard can be pasted .
14478	Clears the input buffer .
14479	Cut the current selection .
14480	Execute the source .
14481	Return the input buffer .
14482	Sets the input buffer .
14483	Sets the font .
14484	Pastes text from the clipboard .
14485	Print the contents of the document .
14486	Set the prompt cursor to the top .
14487	Resets the font .
14488	Append content to the prompt .
14489	Append HTML to the document .
14490	Append HTML fetching plain text to the prompt .
14491	Append plain text to the document .
14492	Removes all text below the input buffer .
14493	Adds items to the completion widget .
14494	Fills the temporary buffer .
14495	Return True if the key is down .
14496	Create the underlying control .
14497	Create a page control .
14498	Filter page key event .
14499	Gets the block as plain text .
14500	Gets the end of the cursor .
14501	Returns the column number of the input buffer .
14502	Get the input buffer cursor line .
14503	Gets the prompt cursor .
14504	Return a selection cursor .
14505	Inserts the Continuation Prompt .
14506	Inserts HTML into the document .
14507	Inserts the given html into the given cursor .
14508	Insert plain text into the cursor .
14509	Keeps the cursor in buffer .
14510	Quit the keyboard .
14511	Add text to the page .
14512	This method is called when the prompt is started .
14513	Read a line from the input buffer .
14514	Sets the continuation prompt .
14515	Sets the top cursor .
14516	Shows the prompt .
14517	Adjusts the scrollbar for the text edit .
14518	Runs the command - line tool .
14519	Copy the config file to the user s home directory .
14520	Create a profile directory by name .
14521	Find a profile directory by name .
14522	Return a key that is greater than or equal to self .
14523	Return the contents of a file .
14524	Read multiple lines from the input file .
14525	Create a temporary file from a source file .
14526	Close the file .
14527	Write data to file .
14528	Add a new heartbeat handler .
14529	Adds a new heart failure handler .
14530	Handles a Pong message .
14531	Return a batch of the elements of a list .
14532	Converts a path file path to a filename .
14533	Walks a directory tree and walks all subdirectories and subdirectories .
14534	Displays the number of loops and number of print statements .
14535	Return a list of time units for the given average and end time .
14536	Extract configuration from a Windows Installer configuration file .
14537	Uncache a directory .
14538	Return a quoted version of an argument .
14539	Check if there are any conflicts in the distribution .
14540	Sets the fetcher options for the given base .
14541	Create the home directory of the user .
14542	Check if a file is an archive file .
14543	Return a copy of an object that is mutable .
14544	Return a ReadonlyProxy for the given object .
14545	Create a heading cell .
14546	Create a new metadata node .
14547	Create a new author node .
14548	Return True if path is a writable directory .
14549	Unquote a filename .
14550	Get the path to a . py file .
14551	Search for filename in the given path_dirs
14552	Return a path to the user s home directory .
14553	Return the XDG configuration directory .
14554	Return the path to XDG .
14555	Return the path to the IPython package .
14556	Return the path to the given module .
14557	Determine if target is outdated .
14558	Return the md5 hash of a file .
14559	Check to see if there is an IPython config file in i_dir .
14560	Updates the suggestions dictionary for the given object .
14561	Return a list of suggestions for the given object .
14562	Return a list of suggestions for the given object .
14563	Return a relative path to this path .
14564	Return a list of files matching the given pattern .
14565	Return a list of lines from the file .
14566	Return the md5 checksum of the file .
14567	Starts a hotshot profile .
14568	Print profiler report .
14569	Close the file .
14570	Handles keyboard interrupts .
14571	Enable wxPython .
14572	Disable wxPython .
14573	Disable Qt4 .
14574	Enable gtk .
14575	Enable a Tkinter application .
14576	Enable pyglet .
14577	Wave - Saver .
14578	Initializes the database .
14579	Runs a SQL query .
14580	Get information about the session .
14581	Returns the last N rows from the database .
14582	Get a list of ranges from a string .
14583	Return the path to the history file .
14584	Sets the session name .
14585	Resets the state of the session .
14586	Get the range of the input histogram .
14587	Store the output for the given line number .
14588	Write the output cache to the database .
14589	Stops the session .
14590	Return the number of CPUs .
14591	Return a list of system wide CPU stats .
14592	Return a list of all partitions on the system .
14593	Returns a list of pids for the current process .
14594	Return a nice pair from start to end .
14595	Format a list of statements and a list of lines .
14596	Return a short stack .
14597	Wraps a function that checks the cache .
14598	Joins a list of regexes .
14599	Ensure that a file is gone .
14600	Update the md5 hash of an object .
14601	Add profiles to the cluster .
14602	Start a new cluster .
14603	Stops a running cluster .
14604	Return the full path to a command .
14605	Return the body of the process .
14606	Return a list of code units that match the given configuration .
14607	Call report_fn on each file in morfs .
14608	Decorator that raises a list of exceptions .
14609	Sets the current stack trace .
14610	Decorator that raises an exception if the time limit is exceeded .
14611	Load IPython extensions .
14612	Run the init code .
14613	Run code from IPythonApp . exec_lines
14614	Runs the startup files .
14615	Run files in IPythonApp . exec_files
14616	Run code at command line .
14617	Runs the module_to_run .
14618	Decorator to add a method that will be called for the given types .
14619	Returns the filename of a static file .
14620	Return the data of a file .
14621	Converts HTML special characters to HTML entities .
14622	Generate HTML reports for the given morfs .
14623	Copy static report files to the user s home directory .
14624	Writes HTML to fname .
14625	Return the hash of the given source file .
14626	Write the index . html file .
14627	Reads the status file from disk .
14628	Writes the coverage status to a file .
14629	Compare two lists .
14630	Return a slice of a sequence .
14631	Split a sequence into chunks of size size .
14632	Read configuration from setup . cfg .
14633	Reads the manifest .
14634	Convert glob to regular expression .
14635	Return True if filename matches one of the patterns .
14636	Return a list of all versioned files .
14637	Start a new kernel .
14638	Shuts the kernel .
14639	Kill a kernel .
14640	Get the kernel with the given id .
14641	Get ports for a kernel .
14642	Returns the notebook for the given kernel .
14643	Start a kernel for the given notebook .
14644	Shutdown a kernel .
14645	Interrupts a kernel .
14646	Restart a kernel .
14647	Create iopub stream for kernel_id .
14648	Create a shell stream for the given kernel .
14649	Create HB stream for kernel_id
14650	Removes the OneTimeProperty from the parent class .
14651	Export HTML to PNG .
14652	Export an HTML string to an xhtml file .
14653	Ensures an image tag is UTF - 8 encoded .
14654	Replace empty paragraphs with line breaks .
14655	Exports the document to a file .
14656	Returns a unique instance of klass or None if none is found .
14657	Given a list of terms and a list of search fields return a query that includes the given search terms .
14658	Gets a query based on a query string .
14659	Gets a greater query based on a number of days .
14660	Get a date - less query based on a number of days .
14661	Returns the null or blank query for the given field .
14662	Adds case insensitive fields to fields_dict .
14663	Add command line options to the given parser .
14664	Validate that the attribute of the given method is valid .
14665	Checks if the given method should be called .
14666	Rotates the text edit .
14667	Patch pyzmq .
14668	Create a schema parser from a schema URL .
14669	Return websocket url .
14670	Re - serialize a list of replies .
14671	Injects a cookie message into the request .
14672	Starts the HB .
14673	Re - start the HB callback .
14674	Stops the HB .
14675	Load the contents of the file .
14676	Return the index of the block .
14677	Seek the block at index .
14678	Edit the block at the given index .
14679	Show the contents of the block .
14680	Print all the blocks .
14681	Run a method on each subject in a collection .
14682	Create a batch from a collection .
14683	Run a function in a thread .
14684	Run a method in parallel .
14685	Decorator to wrap a function with an object .
14686	Decorator to wrap a function with a context manager .
14687	Return a list of source lines and index for the given traceback .
14688	Find inspectable lines .
14689	Count the number of seconds between start and end dates .
14690	Cleans up the controller and engines .
14691	Pre - call hook .
14692	This method is called at the end of the call .
14693	Saves all outstanding messages .
14694	Synchronize the results of a function .
14695	Spawns after a function call .
14696	Return a list of all messages in the queue .
14697	Get a single message from the queue .
14698	Decorator to define a property on an object .
14699	Returns a tuple containing only the given fields .
14700	Parse a URL into a dictionary .
14701	Return a list of modules in the given path .
14702	Return a list of all the root modules .
14703	Quick completion .
14704	Return a list of imports for the given line .
14705	Return a completer for the given event .
14706	Return a list of completions for the given event .
14707	Helper function to quote an attribute .
14708	Configure the plugin .
14709	Write the error report to the given stream .
14710	Add an error to the test .
14711	Add a failure to the test .
14712	Adds a test to the test list .
14713	Return a random twobin from a list of loads .
14714	Return a random value from a list of loads .
14715	Register a new engine .
14716	Unregisters an engine .
14717	Handles stranded tasks .
14718	Dispatches an invaid task message .
14719	Fail unreachable task timeouts .
14720	Fail unreachable dependencies .
14721	Check if the job should be run .
14722	Save unmet jobs .
14723	Submit a new job to the engine .
14724	Dispatch the result of an invaid result .
14725	Handles a result message .
14726	Handles unmet dependencies .
14727	Update the graph of jobs that depend on dep_id .
14728	Start a new log file .
14729	Return the state of the logging .
14730	Write a line to the log .
14731	Write data to the log .
14732	Stops the log .
14733	Create a new notebook node .
14734	Add a string to the command chain .
14735	Adds an object to the command chain .
14736	Return a generator for the given key .
14737	Return a generator of values that match the given key .
14738	Called when a notebook dir is changed .
14739	Return a list of all notebooks .
14740	Create a new notebook id for the given name .
14741	Delete an existing notebook .
14742	Checks if a notebook exists .
14743	Return the path for the given notebook .
14744	Return the path to the file with the given name .
14745	Get a notebook .
14746	Gets the notebook object for the given notebook_id .
14747	Save a new notebook .
14748	Save a notebook .
14749	Saves a notebook object .
14750	Delete a notebook .
14751	Create a new notebook .
14752	Copy a notebook .
14753	Return a list of tokens from a list of tokens .
14754	Generates a list of tokens for each line in a source file .
14755	Load the default configuration .
14756	Return a list of the default classes for this application .
14757	Parse command line .
14758	Initializes the IPython application .
14759	Initializes the shell .
14760	Initializes the banner .
14761	Return a string representation of the given object .
14762	Parse a name into a list of strings .
14763	Set the default value of the object .
14764	This method is called when a trait is changed .
14765	Return a dictionary of class traits .
14766	Return the metadata for a given trait .
14767	Validate that value is a subclass of self . klass .
14768	Return the default value .
14769	Check whether or not this object is disjoint .
14770	Return True if this node is unreachable .
14771	Return a dictionary representation of the dependency .
14772	Return the depth of n in a tree .
14773	Print a bintree .
14774	Disambiguated DNS URL .
14775	Return True if all elements of f are contained in value .
14776	Validate that the targets list is valid .
14777	Dispatch monitor traffic .
14778	Dispatch a query message .
14779	Handle a new heart .
14780	Handles a heart failure .
14781	Saves a task request .
14782	Saves a task result message .
14783	Save an IOPub message .
14784	Send a connection request to the client .
14785	Register a new engine .
14786	Unregisters an engine .
14787	Finish a registration .
14788	Send a shutdown request to the server .
14789	Purge results from the database .
14790	Extract content and buffers from a record .
14791	Get all results for a message .
14792	Get the history for a client .
14793	Perform a query on the database .
14794	Context manager to temporarily change the working directory .
14795	Decode the output of a command .
14796	Run a command under the root .
14797	Executes the Rscript script .
14798	Dispatch a message to the appropriate handler .
14799	Checks if a message is from this session .
14800	Reports annotated files .
14801	Annotates the given analysis into a file .
14802	Return installed version from apt - cache policy .
14803	Squash all non - unicode characters in a dictionary .
14804	Extracts the header from a message or header .
14805	Checks the output of the packer and unpacks it .
14806	Create a message for a given message type .
14807	Sign a list of messages .
14808	Serialize a message to a list of bytes .
14809	Send a message to a stream .
14810	Send a list of messages to the given stream .
14811	Receive a multipart message from the given socket .
14812	Feed identities from a list of messages .
14813	Unpacks a list of messages into a dictionary .
14814	Save SVG document to file .
14815	Convert SVG to clipboard .
14816	Convert SVG data to QImage .
14817	Return a dictionary of object information .
14818	Return the documentation for the given object .
14819	Returns the source for the given object .
14820	Returns a list of arguments and keyword arguments for a Python function .
14821	Return the call line and docstring for the given object .
14822	Return the absolute path of the given object .
14823	Return the line number of the source of the given object .
14824	Return the definition for the given object .
14825	Return the header of the table .
14826	Print a message if there is no message for oname
14827	Print the definition of an object .
14828	Print documentation for the given object .
14829	Print the source of an object .
14830	Print the contents of the given file .
14831	Formats a list of fields .
14832	Display information about an object .
14833	Search namespaces in ns_table .
14834	Run twisted . internet . reactor in a separate thread .
14835	Decorator to wrap a function as a Deferred .
14836	Find the best string match for the given query .
14837	Converts the object to a string .
14838	Convert the document to XML .
14839	Load all modules in a list of packages .
14840	Inverts data into a dictionary .
14841	Merge the contents of this struct into a new struct .
14842	Convert an object to a Python primitive .
14843	Format 2 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1 . 1
14844	Return a list of figures .
14845	Print a matplotlib figure .
14846	Wrapper around_execfile .
14847	Select the format to be used in the IPython notebook .
14848	Find the appropriate gui and backend for the given gui .
14849	Activate a matplotlib backend .
14850	Configure inline support for the given backend .
14851	Activate a user - defined pylab environment .
14852	Trace the given frame .
14853	Start the trace .
14854	Stops tracing .
14855	Start a new tracer .
14856	Install the real trace function .
14857	Start the collector .
14858	Stops the current collector .
14859	Pauses coverage . py .
14860	Resumes all the tracers .
14861	Return a dictionary of line data for each branch .
14862	Return a list of RemoteError objects from a list of RemoteError objects .
14863	Render a traceback .
14864	Start the coverage process .
14865	Return the canonical directory of the file .
14866	Return the source for the given filename .
14867	Determine whether the given filename should be traced .
14868	Determine whether tracing should be performed .
14869	Writes a warning to stderr .
14870	Check if any of the source packages have been imported .
14871	Start the test suite .
14872	Stop and save the data .
14873	Exclude regex from config .
14874	Return the exclude regex for the given exclude regex .
14875	Saves the harvesting data .
14876	Combine parallel data into a single data set .
14877	Harvest data from the collector .
14878	Returns the analysis for the given morf .
14879	Return a list of statements and missing statements from a morf .
14880	Analyze a CodeUnit .
14881	Report the harvine data to a file .
14882	Annotate harvesting data .
14883	Generate HTML report of harvesting data .
14884	Generate XML report of coverage data .
14885	Display a list of objects .
14886	Display a list of objects as HTML .
14887	Display a list of SVG objects .
14888	Display a list of objects as PNG .
14889	Display a list of objects in JPEG format .
14890	Display a list of objects in LaTeX .
14891	Display a list of objects as JSON .
14892	Display a list of script objects .
14893	Reload data from file or URL .
14894	Return the path to the given command .
14895	Runs a system command .
14896	Forward read events from a file descriptor .
14897	Send a line of data to the socket .
14898	Find the launcher class for the given class name and kind .
14899	Starts the cluster .
14900	Build a new launcher for the given classname .
14901	Start the IPython cluster .
14902	Start the cluster .
14903	Return an instance of wx . PySimpleApp
14904	Check if the application is running in event loop .
14905	Starts the event loop .
14906	Return an instance of QtGui . QApplication .
14907	Return True if the application is running in an event loop .
14908	Start event loop for Qt4 .
14909	Create a blank canvas of size width and height .
14910	Draw a cross .
14911	Draw a line between two points .
14912	Sets the text at the given position .
14913	Create an image from a grayscale image .
14914	Return a UUID of length length .
14915	Return a unique key from a get dictionary .
14916	Return the domain of the given URL .
14917	Return a dictionary of query parameters from a URL .
