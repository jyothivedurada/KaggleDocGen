283	Feature Engineering through Aggregations
466	Count game trainsition
154	Meter Readings over time
151	Weekday and Meter Reading
85	Prepare Training Data
49	Saving the model
42	See sample image
474	process test images
219	China scenario since first entry
520	Mix region and education
74	Apply Logistic Regression
213	Now we can read the masks for the specific image
419	Import the modules
440	Fast data loading
510	Set Model for prediction
107	Load the pre processed data
58	Download rate by hour
567	The method for training is borrowed from
86	Divide features into groups
276	Families without Heads of Household
158	Encoding Categorical Variable
66	What are their top categories
416	Infer using trained model
371	This images from validation data seem to be really strange labeled ...
104	Define X and y
464	Making Vocabulary and Text Conversion
583	That is the size of one test example that we ought to predict
134	Test on the data that is not seen by the network during training
578	NOTE Even tough it is automatic , we can incorporate some manual features
584	Save some memory
345	Split into training and validation groups
372	Process test data in parallel
326	Distribution of Search Values
130	Define some constants for data location
229	most important or common positive words
390	Adding mode as feature
570	Function which creates final video from list of images
516	Check null data
498	Hugging Face pretrained Bert model names
145	Word map for most frequent Tags
531	Null data check
91	Create a Dataframe containing all images
192	At What Day Of The Week People Order
455	Train Our Linear Regression Model
22	The data is not balanced
302	Test Time Features
549	Write a problem file
569	Add leak to test
152	Time of Day and Meter Reading
312	Standard imports for data science work
165	Librairies and data
499	Choose the model to use
392	Plotting some random images to check how cleaning works
270	Start by pivoting the DataFrame to explore the label distribution over slices
300	Explore Time Variables
415	Load Test dataframe
446	At first , I made Europe future
443	Leak Data loading and concat
299	Use More Features
380	Load Model into TPU
114	How to make a generator run infinitely
546	Use machine learning model
436	Fast data loading
215	Prediction on test set
291	Filling missing and infinite data by zeroes
447	There is a gap between them
15	Importing all Libraries
249	Transpose the dataframes
505	Check oversampled dataset
408	Will need those folders later for storing our jpegs
87	Code from notebook
317	Merge with the main dataframe
196	Visualizing Interest Level Vs Bedrooms
287	Comparing Model Performance
178	Types Of Features
483	Make a Baseline model
35	Count occurance of words
482	These have their kitchen area larger than the total area of the house
73	Import Required Libraries
200	No Of Storey Over The Years
72	Graph Representation of RNA structure
492	Hugging Face pretrained Bert model names
75	Comparison of the all feature importance diagrams
50	You can state below link to your copy of this MMDetection repo
465	Making Feature Matrices
24	The data is not balanced
119	Load data files
172	Document Vectors with HashingVectorizer
181	Merging the bureau dataset along with application train dataset to do more analysis
529	Onehot encoding for categorical data
70	Can the length of the description give us some informations
456	Next , we will make prediction with our LR Model
210	Let us read the masks
316	Combined Aggregation Function
332	Align Train and Test Sets
413	Save results as CSV files
17	Defining DataBunch for FastAI
121	Genetic program model , main code loop
102	Train Test Split
133	Idea is to use clustering on images of one type to group data
67	Does shipping depends of price
575	Explore distribution of single variable
526	Moving average is so simple
193	When Do People Generally Reorder
224	Select the models to run setting bool variables below
126	Its also builds on kernel functions but is appropriate for unsupervised learning
40	Using embedding in NN we can change dimensionality of categorical features
68	Can we get some informations out of the item description
160	Variable Description , Identification , and Correction
337	Putting it all Together
177	Function for find out Numerical and categeical Variables
76	Thanks to Automatic FE The main code for basic FE
558	If you like the content of this notebook , please consider upvoting it
268	All Zero Features
37	Convert to lower case Clean contractions Clean special charactor Convert small caps
539	Predict all province greater than
327	Testing Results on Full Data
46	Split the data into train and validation parts
475	process submission images
517	Make new features using continuous feature
314	Identify Correlated Variables
292	Submitting our Predictions
161	Encoding Street Names
359	Prepare for training
398	Load text data into memory
377	OSIC training data Example
141	Confusion Matrix for Test Data Predictions
330	Visualize Distribution of Correlated Variables
251	filtering out outliers
13	Getting to Know the Data
261	High cardinality features
379	TPU Strategy and other configs
349	Income distribution and target value
346	Prediction for one image
478	Convert an array of values into a dataset matrix
209	Text Processing of text data easily
191	When Do People Generally Order
341	Aggregated Stats of Bureau Balance by Client
559	Composition of functions
9	And now we embed each chunk individually
198	Main Config Variables
355	Loading the data
47	Create and set up the model
431	This plot shows summarized information about feature impact against shap output
296	The test distribution seems to be similar to the training distribution
242	Bookings by year
458	targets in labels.csv
101	Balance the target distribution
396	Load model into the TPU
203	Room Count Vs Log Error
562	Ensure determinism in the results
221	Iran since first case
582	Let us split the variables one more time
125	Some stats using jpg exif
468	View Single Image
350	Read the data
387	Padding process and resizing with OpenCV
309	Applied to Full Dataset
55	Zoom on this IP
222	USA since first case
297	Create Training and Validation Set
378	Predict Test Set and Submit Result
507	Data transformation and helper functions
422	Display the dropped images
556	What are Lung Opacities
382	First downsize all the images
336	Properly Representing Variable Types
501	Check saved checkpoints
65	Prices of the first level of categories
248	Read the csv files on the Johns Hopkins CSSE database on github
417	Comparing various kappa scoring
266	Price Variance Within Identified Items
462	Get Model into TPU
319	Aggregate Installments Data
587	Applying it on text
153	Primary Use and Meter Reading
61	Dealing with color
547	This notebook will deal with positive , negative and neutral samples independently
340	Putting the Functions Together
548	For neutral samples , use original texts as they are
381	Create fake filepaths dataframe
493	Make TF record file for test dataset
131	Code from here and below is commented out because the kernel dies
284	Next we can rename the columns to make it easier to keep track
156	Square feet size is positively Skewed
521	Remove feature with only one value
241	Bookings per day of week
328	DFS with Default Primitives
540	Age distribution of male and female patients
36	All contraction are known
352	Define helper functions
463	Loading and Visualization of Data
78	FS with SelectFromModel and LinearSVR
519	combination using three features
260	Import necessary libraries
220	Spain since first recorded case
420	Other columns are the digital value of pixels of kannada mnist
106	Thanks for the example of ensemling different models from
273	Combinations of TTA
62	Deriving individual masks for each object
139	Using RandomForest Classifier
59	Importation of a entire day data
374	Outlier Analysis and Feature Scaling
39	Using LabelEncoding we just change string values to numbers
227	Full data Analysis
472	Get Tabular Data
246	a quick check if demand distribution changes week to week
264	Remove Extreme Prices
553	Disable fastai randomness
188	Load data and fit some models
393	Load and process data
19	Predicting for test data
111	Process the Predictions
551	Import libraries and data , reduce memory usage
369	load mapping dictionaries
537	Predict by Specify Country
100	Create Binary Targets
233	Import Packages and Functions
579	Feature primitives Basically which functions are we going to use to create features
254	Non physical data augmentation
394	Load text data into memory
228	Seperating the data into different data frame based on the labels
69	What words do people use
168	MERGE , MISSING VALUE , FILL NA
320	Aggregate Cash previous loans
421	Drop the blurry image
497	Run on test dataset
479	Create dataset with look back
484	Create dataset for training and Validation
541	Difference varialbes were created to describe the difference beween maximum and minimum value
333	Distribution of Scores
495	Run on validation dataset
44	Prepare Testing Data
324	Grid Search Implementation
244	Interactive booking , click , and percentage of booking trends with Bokeh
115	Thanks to Automatic FE The main code for basic FE
211	So a unique operator will give us the unique filenames that contain ships
265	Use Ad Image to Identify Item Category
293	Data Exploration and Data Cleaning
543	Explore ip counts
269	Show Original Image
163	Seting X and Y
18	Unfreeze all layers and find best learning rate
253	Check Unique Label
564	SAVE DATASET TO DISK
555	What Does a Normal Image Look Like
29	Preparing the training data
169	Loading the data
250	Join all dataframes
236	Build the Model
461	TPU Strategy and other configs
459	targets in train.csv
391	Refit and Submit
450	Importing Library Files
313	Now we want to combine the data without creating any duplicate rows
79	Parameters and LB score visualization
452	Then transform to a datetime object supposing that it is an ordinal datetime
2	Impute any values will significantly affect the RMSE score for test set
357	load mapping dictionaries
358	extract different column types
127	Thanks for the example of ensemling different models from
8	Model Validation on train data set
524	Check null data
137	Confusion Matrix for Train Data Predictions
280	In most cases , the values are very similar
593	We can safely store the two types into separate dataframes
138	Confusion Matrix for Test Data Predictions
405	Unhide below to see all trials results
238	Random Forest Regressor
214	For the same window we superimpose the masks above the image
167	Loading the data
437	Leak Data loading and concat
432	Plotting errors for one sample
142	Converting the Input images to plot using plt
523	Load and preprocess data
288	Recursive Feature Elimination with Random Forest
239	Feature Agglomeration Results
427	Ensemble with my historical best
235	Create the embedding layer
231	Most important or common words in neutral data
410	Pad and resize all the images
376	Add the actors to the renderer , set the background and size
576	We can see above the counts of higher damageDealt smoothly decrease
306	Now we can evaluate the baseline model on the testing data
500	Get variables to apply weight decay in AdamW optimizer
95	Create a Classification Report
470	Number of Patients and Images in Test Images Folder
93	Set Up the Generators
3	Detect and Correct Outliers
325	First , we need to put our data into a long format dataframe
439	Leak Data loading and concat
409	Create new labels
207	Loading and preprocessing data
423	Creating submission file
272	Demonstration how it works
425	Predict with pure text models
230	Most important or common negative words
383	Create real file paths dataframe
503	Get labels and their countings
71	Is there a correlation between description length and price
140	Confusion Matrix for Train Data Predictions
467	Visualize by heatmap
97	Set up the generator
518	Ratio feature can have infinite values
310	Random Search on the Full Dataset
258	y hist with defferent timestamps are similar
189	Bounded region of parameter space
25	Take a look at predictions
84	Parameters and LB score visualization
411	Create test generator
237	Imputing missing values
574	Lib and Load data
496	Get metrics for validation dataset
274	Read in Data and Look at Summary Information
370	inspect datagen output
491	Compare timing for GridMask
435	All train tasks predictions
444	what already is known
149	Variable Description and Identification
402	Load and preprocess data
368	Gaussian Approximation of Active Cases
128	Manager function to call the create features functions in multiple processes
96	MAKE A TEST SET PREDICTION
331	Remove Low Importance Features
460	These labels are not in train
57	Attributed time analysis
404	Load and preprocess data
490	Compare timing for MixUp
335	First we need to format the data and extract the labels
51	Make a simple restart of runtime at this point
132	Lets validate the test files
6	Read data set
430	Split Trian and Valid
527	Find Null data
1	Imputations and Data Transformation
186	Rescaling the Image Most image preprocessing functions want the image as grayscale
34	FVC Progression by SmokingStatus
82	Its also builds on kernel functions but is appropriate for unsupervised learning
386	Save model and weights
7	Text preprosesing source
80	Ensembling the solutions and submission
429	Pick some frames to display
385	Creating and Training the Model
23	Apply Underbalancing Techinique
278	Creating Ordinal Variables
373	Load Packages and Data
99	Create a submission file
205	Gaussian Noise on Target
585	What should good EDA be capable of
448	Model Evaluation and Validation
88	My upgrade of parameters
52	Hist Graph of scores
442	Fast data loading
504	Define the number of repetitions for each class
259	Save objects for next step
184	Group signals metadata accroding to target
588	Read and Explore
592	Load CSV files
342	Calculate Information for Testing Data
182	analyzing the numerical features disturbion in previous application dataset
116	FS with the Pearson correlation
171	Document Vectors with TfidfVectorizer
113	What is a python generator
308	Learning Rate Distribution
197	Correlation Between Price and Other Features
146	Featurization of Training Data
190	Lets Read In Data Files
202	Bathroom Count Vs Log Error
375	and background color definition
412	Reducing Image Size
318	Aggregate previous loans at Home Credit
395	Build datasets objects
469	Number of Patients and Images in Training Images Folder
217	Now a look at Italy
550	Plot the obtained tour
216	Replacing Mainland china with just China
388	Pad and resize all the images
477	Split into train and test sets
453	Most of the dates overlap
571	Loading libraries and data
43	See how our generator work
433	train solved tasks
185	Apply reduction on some samples and visualize the results
528	Predict null data based on statistical method
247	Read the csv files from kaggle
170	Create Document Vectors
511	Test data preparation
175	Creating the Model
445	make hour column from transactionDT
488	Prediction for test
5	Now there appears to be one feature that is not gaussian
334	Plots of Hyperparameters vs Score
20	Data is still small enough for memory so read to memory using pandas
10	And it looks like a fairly nice distribution , albeit still fairly asymetrical
476	we add some squared features for some model flexability
294	Empirical Cumulative Distribution Function Plot
53	I updated importation for a faster version
245	expanding the aggregate
256	missing value statistics
157	Imputing Missing variable
108	Initialize the generators
148	Importing Packages and Collecting Data
428	This is a simple modify from
323	Learning Rate Domain
449	They are very similar to each other
304	Visualize Validation Predicted Target
360	Initialize train and test DataFrames to access IDs and depth information
275	Addressing Wrong Labels
434	evaluation solved tasks
384	Load and freeze DenseNet
485	CNN Model for multiclass classification
321	Aggregate Credit previous loans
223	Getting population for each country
473	process training images
64	So , some categories are expensive , but most are cheap
451	OUTPUT OF AUGMENTATED IMAGES
494	Choose the model to use
122	Get the dupplicate clicks with different target values
589	Replace infs and imputing missing values by mean
426	Predict with mixed language models
173	Document Vectors with hashing trick
533	Logistic Regression seems to be a good classification algorithm for this dataset
103	Set Up the Generators
573	The competition metric relies only on the order of recods ignoring IDs
257	y的异常值 drop samples which have exception value in y
480	Make prediction and apply invert scaling
424	Build the original and translated test data
560	The evaluation method
554	Load train and test dataframes and add length columns for Description and Name
159	Prediction and Submission
263	Predict test set and make submission
187	Interpreting ROC Plot
351	Check the typical length of a comment
305	Evaluate Best Model from Random Search
112	Create the submission csv file
183	Paths to data and metadata
195	Visuallizing Interest Level Vs Bathroom
90	How many images are in each folder
348	Granted applications per number of children
290	Lets first check the Train Target Distribution
362	Perform check on randomly chosen mask and prediction
180	Checking the Correlation Between The Features for Application Train Dataset
406	Save model and best hyperparams
545	Preparing the data
81	Implementing the SIR model
367	Exponential Growth Curves
486	Create Inference Dataset
407	Load Model into TPU
89	Using my notebook
530	Target , prediction process
150	Meter Reading and Meter Type
204	No Of Storeys Vs Log Error
94	What is the AUC Score
271	As a Neuroradiologist , this distribution looks pretty true to daily practice
508	Show influence of economical factors on housing prices
538	Predict all country greater than
329	DFS with Selected Aggregation Primitives
577	Getting Prime Cities
27	Loading data etc
542	Here is a base model without parameter tuning .
56	Does bots download the app
16	Seed everything for reproducibility
397	Create fast tokenizer
502	An example usage
32	Unique value counts
118	FS with SelectFromModel and RandomForestRegressor
234	Load and Explore Data
343	Monthly Cash Data
285	Machine Learning Modeling
438	Fast data loading
565	LOAD DATASET FROM DISK
365	SHAP Interaction Values
481	Using all features for model training
109	Plot the Loss Curves
120	Set up the folds for cross validation
514	Predictions class distribution
590	RF for feature selection
401	Inference on Test Set
105	Its also builds on kernel functions but is appropriate for unsupervised learning
513	Convert DCM to PNG
301	We can make the same plot by day of the week
174	Keras Tokenizer API
535	Add active column
544	Conversions by Device
363	Create DFs imitating public and private test subsets
403	Evaluate training history
77	FS with the Pearson correlation
240	Predict on test set
255	Check if valid data looks all right
279	Per Capita Features
166	MERGE , MISSING VALUE , FILL NA
534	You only have two areas to work on
515	Check the dataset
339	Function to Handle Categorical Variables
194	How many orders users generally made
123	Basic skin detection
295	Rides on Map of NYC
506	Random Forest model
586	Reading in the data , as usual
389	Group and Reduce
28	Show and save column comparision matrix and save row sets
561	Solve the task
147	Fitting Logistic Regression with OneVsRest Classifier
199	Create final submission DF
591	Evaluate the Model
54	How many different values does our categorial variables take
457	Sampling the train data since too much data
4	No surprises , since this is all presumably artificial data
311	Bayesian Optimization on the Full Dataset
155	Meter Readings over time And Primary Use
206	Composition of Augmentations
282	For example , we can divide the years of schooling by the age
110	Make a Prediction
208	Preprocessing of features
117	FS with SelectFromModel and LinearSVR
563	LOAD PROCESSED TRAINING DATA FROM DISK
164	Loading the data
129	How many different cars in train dataset
201	Bedroom Count Vs Log Error
162	Encoding Cordinal Direction
344	Monthly Credit Data
83	Thanks for the example of ensemling different models from
218	Comparison between Brazil and Italy
322	Hyperparameter Tuning Implementation
487	Define dataset and model
581	NaN imputation will be skipped in this tutorial
21	And finally lets look at the class distribution
361	Set data loading parameters
489	Compare timing for CutMix
566	The mean of the two is used as the final embedding matrix
418	Relevant attributes of identified objects are stored
356	and batch aggregations examples for the rest of the tables ..
441	Find Best Weight
12	Look at the data types and some basic info about the different columns
572	You can choose many palettes , which makes the graphs visually nice
509	Best parameters are searched by GridSearchCV on my Laptop
92	Balance the target distribution
454	Rolling monthly and yearly store means
277	Redundant Household Variables
286	The data has no missing values and is scaled between zero and one
41	Prepare Traning Data
307	Example of Sampling from the Domain
347	Train and validate
26	Ability to Detect Face
243	Bookings by month
0	Seems like a very wide range of values , relatively spaking
143	Data load and process functions
338	Correlations of Aggregated Values with Target
176	Importing The Dataset
45	Create Testing Generator
525	Check the dataset
144	CatBoost is RAM expensive so I prefer to utilize GPU
225	Calculating the day when the number of infected individuals is max
31	Data loading and checking
364	Distribution of months in train and test
63	Convert each labeled object to Run Line Encoding
267	Affected Surface Object
354	Train the LGBM model
399	Build datasets objects
226	Lets gets started
136	Using DecisionTree Classifier
60	We can now print the results
212	Let us load one image and its masks
315	Drop Correlated Variables
471	Create Image Augmentation Generator
252	using outliers column as labels instead of target column
414	Training the model
30	Training on the complete Dataset now
532	It seems Goblins are a little similar to Ghouls
289	Visualize Tree with No Maximum Depth
512	Data preparation for test
353	Predict validation and test set masks
552	At the scale of stores
124	Apply skin segmentation on all training data and visualize the result
536	Predict by Specify Province
14	The Shape of the Data
262	Ordinal features mapping
179	Analysis based Averages values
303	Try with All Time Variables
568	Add train leak
400	Load model into the TPU
135	The number of samples in each cluster is the following
38	Predict submission dates
33	FVC Progression by Sex
298	Train with Simple Features
366	Get important features according to SHAP
232	and target vector that correspond to the test data size
557	Opacities That Are Not Related to Pneumonia
48	Counting the metric score
522	Feature selection using shap
580	Label encoding Making it machine readable
281	Redundant Individual Variables
98	Make a prediction on the test images
11	Maybe if we used the log plot things would be better
