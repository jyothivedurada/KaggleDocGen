258	Analysis Based on EXter Source Types
681	Merge seed for each team
458	Aggregate previous loans at Home Credit
33	Check Validation Log Loss
421	Lets first check the Train Target Distribution
88	Convert each labeled object to Run Line Encoding
610	Training the model
606	Interest based on geographical location
279	Best Selling Products
652	Fast data loading
363	Create variables of interest
434	Test Time Features
446	Random Search on the Full Dataset
817	Start positions and end positions of selected texts in tokenized source texts
292	Create final submission DF
611	Load Test dataframe
564	A simple function from stack overflow that crops the image
721	Prediction for test
831	Disable fastai randomness
36	Take a look at predictions
592	Load and preprocess data
822	Made a mask using the tour
478	Plots of Hyperparameters vs Score
739	Try to load the latest checkpoint
694	Count game trainsition
211	CatBoost is RAM expensive so I prefer to utilize GPU
136	Create a Dataframe containing all images
131	Code from notebook
855	Loading libraries and data
810	Conversions by OS
854	Predict on test
370	Check Unique Label
95	What are their top categories
358	Read the csv files from kaggle
280	Top Reordered Products
748	Results from my own training
247	Document Vectors with HashingVectorizer
58	Prepare Traning Data
467	The following code repeats this plot for all the of the numeric hyperparameters
440	Complete Bayesian Domain
747	Common things for training
176	Display all test images
435	Try with All Time Variables
294	Dependent variable logerror follows nice normal distribution
99	What words do people use
754	Starting importance variables evaluation
763	Now , we can downcast numeric columns in the same way
160	Initialize the generators
72	How many different values does our categorial variables take
466	Distribution of Search Values
758	Data preparation for test
181	Thanks for the example of ensemling different models from
375	The following is features with fine hist
263	Paths to data and metadata
67	Saving the model
432	Explore Time Variables
41	Training on the complete Dataset now
300	Gaussian Noise on Target
654	Adding some lag feature
877	Read and Explore
658	Fast data loading
571	Load and freeze DenseNet
852	Function which creates final video from list of images
100	Can the length of the description give us some informations
110	Apply Logistic Regression
761	Predictions class distribution
687	These labels are not in train
814	Calculate extra features for test set
149	Create Binary Targets
756	Set Model for prediction
128	Showing Confusion Matrices
582	Load and process data
460	Aggregate Cash previous loans
257	Types Of Features
429	Create Training and Validation Set
509	Read the data
59	See sample image
271	Visualize the feature interaction
249	Keras Tokenizer API
87	Deriving individual masks for each object
715	These have their kitchen area larger than the total area of the house
86	Dealing with color
49	Count occurance of words
856	You can choose many palettes , which makes the graphs visually nice
866	Label encoding Making it machine readable
673	Dense Added Model
105	Loading the files
697	Number of Patients and Images in Training Images Folder
680	Fitting the trend on the yearly time series
659	Leak Data loading and concat
225	Square feet size is positively Skewed
486	Putting it all Together
148	Create a submission file
859	Lib and Load data
60	See how our generator work
502	Monthly Credit Data
557	Load Packages and Data
320	Replacing Mainland china with just China
297	Bathroom Count Vs Log Error
477	Hyperparameters versus Iteration
830	Inspect the data at different time scale
349	Feature Agglomeration Results
366	Data Exploration The label distribution shows clear label imbalance
861	We can see above the counts of higher damageDealt smoothly decrease
625	Predict with pure text models
278	How many orders users generally made
19	The Shape of the Data
586	Create fast tokenizer
749	Random Forest model
134	Using my notebook
168	Thanks to Automatic FE The main code for basic FE
447	Bayesian Optimization on the Full Dataset
224	Meter Readings over time And Primary Use
238	Librairies and data
876	Applying it on text
719	Create Inference Dataset
464	Grid Search Implementation
93	Which brands are most expensive
523	Prepare for training
197	Now , the clusters will be created using just the test set
419	Recursive Feature Elimination with Random Forest
344	Looks like there are no missing values in the dataframe
253	Importing The Dataset
256	Checking the Imbalance of Target Variable
303	Preprocessing of features
437	Evaluate Best Model from Random Search
630	Pick some frames to display
820	Write a problem file
650	Train model by each meter type
42	Data loading and checking
553	Visualize processed samples , resize
48	FVC Progression by SmokingStatus
594	Load and preprocess data
841	Solve the task
627	Blend and smooth for submission
133	Using my notebook
12	Roc AUC curve
767	Make new features using continuous feature
379	Save objects for next step
647	Leak Data loading and concat
602	Pad and resize all the images
127	Divide features into groups
669	They are very similar to each other
289	Correlation Between Price and Other Features
222	Primary Use and Meter Reading
517	Train the LGBM model
226	Imputing Missing variable
329	Calculating the day when the number of infected individuals is max
418	Comparing Model Performance
574	Padding process and resizing with OpenCV
415	Next we can rename the columns to make it easier to keep track
192	Load tabular data and create new features
431	Use More Features
840	Is a program solution
764	Check the dataset
45	test prediction by LGBM and feature importance check
646	Fast data loading
772	phone per family features
150	Balance the target distribution
821	Plot the obtained tour
628	Ensemble with my historical best
325	Iran since first case
381	Density plot of numeric features
665	At first , I made Europe future
219	Meter Reading and Meter Type
217	Importing Packages and Collecting Data
32	The data is not balanced
298	Room Count Vs Log Error
304	Text Processing of text data easily
773	combination using three features
317	removing columns where correlation is high
488	Correlations of Aggregated Values with Target
83	Importation of a entire day data
254	Function for find out Numerical and categeical Variables
77	Does standard users download the app
614	Comparing various kappa scoring
51	Convert to lower case Clean contractions Clean special charactor Convert small caps
569	First downsize all the images
359	Read the csv files on the Johns Hopkins CSSE database on github
487	Kernel Density Estimate Plots
29	Data is still small enough for memory so read to memory using pandas
793	It seems Goblins are a little similar to Ghouls
837	If you like the content of this notebook , please consider upvoting it
159	Load the pre processed data
781	Credit day prolong
156	Create a submission file
529	Run length encoding to reduce predictions size
355	expanding the aggregate
568	Create fake filepaths dataframe
180	Its also builds on kernel functions but is appropriate for unsupervised learning
701	process training images
795	You only have two areas to work on
456	Aggregate Grandchild Data Tables
608	Save results as CSV files
468	Sequence of Search Values
424	Data Exploration and Data Cleaning
302	Loading and preprocessing data
205	Transformations and Data Augmentation
613	Reproducing simple baseline
335	Most important or common words in neutral data
848	Find final Thresshold
656	Leak Data Validation
700	Get Tabular Data
155	Define X and y
655	Train model by each meter type
376	y的异常值 drop samples which have exception value in y
158	Thanks for the example of ensemling different models from
779	Check null data
462	Hyperparameter Tuning Implementation
430	Train with Simple Features
825	Stacking models and training
34	Apply Underbalancing Techinique
71	I updated importation for a faster version
575	Pad and resize all the images
74	Zoom on this IP
519	and batch aggregations examples for the rest of the tables ..
664	make hour column from transactionDT
769	Room per family features
448	Standard imports for data science work
170	FS with SelectFromModel and LinearSVR
137	Display a random sample of train images by class
412	Redundant Individual Variables
615	Relevant attributes of identified objects are stored
104	Graph Representation of RNA structure
508	Income distribution and target value
685	targets in labels.csv
154	Plot the Training Curves
409	Creating Ordinal Variables
743	Define the number of repetitions for each class
879	RF for feature selection
746	Check oversampled dataset
667	We will also evaluate the position of the data points using the coordinates
838	Composition of functions
638	evaluation solved tasks
374	Exception value processing
679	Rolling monthly and yearly store means
787	Onehot encoding for categorical data
846	The mean of the two is used as the final embedding matrix
391	Price Variance in param
179	Some stats using jpg exif
634	Some correlation is indeed present
545	Finally , we are ready to load the whole series into one matrix
803	Impact of bmi over old and young patients
639	All train tasks predictions
383	High cardinality features
365	Show one Example of landmark images
439	The number of leaves on the other hand is a discrete uniform distribution
784	Moving average is so simple
15	Maybe if we used the log plot things would be better
235	Seting X and Y
339	Load and Explore Data
306	Let us read the masks
392	Affected Surface Object
603	Focal loss is good for unbalanced datasets , like this one
839	The evaluation method
864	Relationships betweeen the sets
579	Refit and Submit
22	Seed everything for reproducibility
482	Properly Representing Variable Types
860	Explore distribution of single variable
455	Combined Aggregation Function
65	Create and set up the model
399	Start by pivoting the DataFrame to explore the label distribution over slices
390	Price Variance Within Identified Items
54	Using LabelEncoding we just change string values to numbers
576	Load Model into TPU
2	Seems like a very wide range of values , relatively spaking
433	We can make the same plot by day of the week
7	Now there appears to be one feature that is not gaussian
198	The number of samples in each cluster is the following
577	Group and Reduce
798	Predict by Specify Province
260	Checking the Correlation Between The Features for Application Train Dataset
878	Replace infs and imputing missing values by mean
407	Families without Heads of Household
540	Gaussian Approximation of Active Cases
172	Load data files
768	Ratio feature can have infinite values
726	Visualising the distribution of each product by age by boxplot
740	Check saved checkpoints
123	Thanks for the example of ensemling different models from
807	Only a small proportion of clicks were followed by a download
97	Does shipping depends of price
565	TPU Strategy and other configs
689	TPU Strategy and other configs
301	Composition of Augmentations
398	Show Original Image
200	Confusion Matrix for Train Data Predictions
601	Create new labels
47	FVC Progression by Sex
382	Let take some small visualizations with these bool features
626	Predict with mixed language models
692	Making Vocabulary and Text Conversion
202	Using RandomForest Classifier
572	Creating and Training the Model
199	Using DecisionTree Classifier
426	Rides on Map of NYC
84	The magical function
618	Other columns are the digital value of pixels of kannada mnist
120	Add country details
113	FS with the Pearson correlation
125	Prepare Training Data
212	Use of Bayesian Block in Santander Customer Transaction Prediction Challenge
420	Visualize Tree with No Maximum Depth
771	Tabulet per family features
79	Attributed time analysis
880	Evaluate the Model
873	What should good EDA be capable of
68	You can state below link to your copy of this MMDetection repo
403	Combinations of TTA
870	That is the size of one test example that we ought to predict
162	Plot the Loss Curves
580	Plotting some random images to check how cleaning works
842	Ensure determinism in the results
731	Try to load the latest checkpoint
709	Create dataset with look back
8	Read data set
570	Create real file paths dataframe
619	Check some augmentation effect
867	NaN imputation will be skipped in this tutorial
621	Drop the blurry image
347	Random Forest Regressor
208	Use the images from our validation dataset to check the precdictions
741	An example usage
214	Word map for most frequent Tags
377	Divide the test set and the training set
94	More details on brands with a treemap
405	Exploring Label Distribution
847	The method for training is borrowed from
248	Document Vectors with hashing trick
178	Apply skin segmentation on all training data and visualize the result
163	Make a Prediction
61	Prepare Testing Data
495	Function to Aggregate Numeric Data
753	Dealing with missed variables
512	Choose and train a classifier
653	FIX Time Zone
46	Submission data prediction
812	Conversions by Channel
135	How many images are in each folder
705	we add some squared features for some model flexability
26	Load pneumonia locations
643	Adding some lag feature
276	At What Day Of The Week People Order
677	Most of the dates overlap
316	Display train and test signals
333	most important or common positive words
562	OSIC training data Example
826	cut down features to avoid the kernel die
259	Analysis based Averages values
106	plotting the scan
284	Visualizing Interest Level Vs Price
246	Document Vectors with TfidfVectorizer
165	Create the submission csv file
536	Get important features according to SHAP
236	Which Team Wins And Lost The Most Championships
314	Prediction on test set
27	GPU version It is just function verification , not for performance evaluation
774	Mix region and education
206	Converting the Input images to plot using plt
17	Do some simple plots for exploration
778	Wiki News FastText Embeddings
469	Testing Results on Full Data
657	Find Best Weight
122	Its also builds on kernel functions but is appropriate for unsupervised learning
683	Next , we will make prediction with our LR Model
309	Let us load one image and its masks
729	Make TF record file for test dataset
690	Get Model into TPU
43	Unique value counts
364	Compare our forecast with actual evolution both for training and validation sets
378	y hist with defferent timestamps are similar
506	Locating a face within an image
835	The Definition of Opacity
649	Adding some lag feature
66	Counting the metric score
554	Visualize test processed samples , resize
56	Using embedding in NN we can change dimensionality of categorical features
752	Show influence of economical factors on housing prices
485	Create Custom Feature Primitives
96	What are the most expensive items
534	Distribution of months in train and test
315	We can now create a submission file
869	Train the model , predict , etc
40	Preparing the training data
282	Visualizing Distribution Of Price Before and After Removing Outliers
184	Display a single car with its mask
539	Exponential Growth Curves
670	Importing Library Files
331	Full data Analysis
414	Feature Engineering through Aggregations
851	Function which creates set of images for each axis
78	How many times , each categories of clickers download the app
730	Choose the model to use
829	Other special events
875	Now that we have dataset in desired form , i.e
233	Encoding Street Names
353	Bookings by month
3	Imputations and Data Transformation
161	Set up the Model Architecture
445	Applied to Full Dataset
287	Visualizing Interest Level Vs Hour
541	load mapping dictionaries
480	First we need to format the data and extract the labels
63	See predicted result with images
5	Detect and Correct Outliers
239	MERGE , MISSING VALUE , FILL NA
261	Merging the bureau dataset along with application train dataset to do more analysis
394	Initial Position and Momentum
776	Feature selection using shap
442	Learning Rate Distribution
590	Running the model on a Sample Image
791	Show some examples of different mask
24	Unfreeze all layers and find best learning rate
522	extract different column types
166	What is a python generator
343	Imputing missing values
243	Training the model on CPU
662	Replace to UCF data
800	Predict all country greater than
23	Defining DataBunch for FastAI
182	Manager function to call the create features functions in multiple processes
790	the difficuly of training different mask type is different
712	Function to convert series to supervised learning
250	Creating the Model
102	Data Info Method
427	Calculate Distance between points using Haversine distance
682	Train Our Linear Regression Model
338	Import Packages and Functions
240	Loading the data
285	Visuallizing Interest Level Vs Bathroom
290	Main Config Variables
853	Create Magic features
31	Initialize Mobilenet Face Extractor
273	Bounded region of parameter space
686	targets in train.csv
775	Remove feature with only one value
164	Process the Predictions
119	Compute lags and trends
221	Time of Day and Meter Reading
286	Visualizing Interest Level Vs Bedrooms
760	Split training set
832	Load train and test dataframes and add length columns for Description and Name
863	NOTE Even tough it is automatic , we can incorporate some manual features
884	After we impute it , we can observe standard fluctuation
114	FS with SelectFromModel and LinearSVR
73	What proportion of click generate downloads
112	Thanks to Automatic FE The main code for basic FE
527	Define data loading
231	City and Time features
142	What is the AUC Score
525	Initialize train and test DataFrames to access IDs and depth information
410	Per Capita Features
548	Load Model into TPU
441	Example of Sampling from the Domain
597	Create Dataset objects
204	Confusion Matrix for Test Data Predictions
341	Build the Model
408	Redundant Household Variables
783	Check the dataset
37	Ability to Detect Face
356	a quick check if demand distribution changes week to week
53	Predict submission dates
550	Mismatches on a validation data
808	Explore ip counts
723	Compare timing for MixUp
513	Now train the models with a partial fit approach
703	process submission images
671	Binary Focal Loss
786	Predict null data based on statistical method
755	Best parameters are searched by GridSearchCV on my Laptop
404	Read in Data and Look at Summary Information
295	No Of Storey Over The Years
589	Load model into the TPU
369	using outliers column as labels instead of target column
789	Target , prediction process
346	Modeling and Prediction
132	Training prediction result visualization
563	Predict Test Set and Submit Result
644	Train model by each meter type
538	New Daily Cases
167	How to make a generator run infinitely
770	BedRoom per family features
275	When Do People Generally Order
270	Fit an XGBoost classifier model
244	Splitting train into training and validation set
422	Filling missing and infinite data by zeroes
307	So a unique operator will give us the unique filenames that contain ships
516	Predict validation and test set masks
578	Adding mode as feature
39	Show and save column comparision matrix and save row sets
130	My upgrade of parameters
724	Compare timing for GridMask
788	Prediction with xgboost
497	Function for KDE Plots of Variable
220	Weekday and Meter Reading
267	Rescaling the Image Most image preprocessing functions want the image as grayscale
799	Predict by Specify Country
118	Join data , filter dates and clean missings
765	Check null data
153	Set Up the Generators
549	Finding best alpha
490	Function to Handle Categorical Variables
836	Opacities That Are Not Related to Pneumonia
9	Target varaible distribution
251	Convolutional Neural Network
479	Now for the next four hyperparameters versus the score
868	Let us split the variables one more time
636	Ploting one sample with the corresponding error as error bars
203	Confusion Matrix for Train Data Predictions
501	Monthly Cash Data
305	Thx Stackoverflow for realization
500	Function to Aggregate Stats at the Client Level
69	Make a simple restart of runtime at this point
255	Identifying Missing Value Present in Application Train Dataset
533	differences between public and private test
708	Convert an array of values into a dataset matrix
651	Replace to UCF and UCL data
780	Credit day overdue
228	Prediction and Submission
313	Training and callbacs
850	Add leak to test
308	Let us plot some bounding boxes right from the dictionary we just created
688	train valid split
237	Loading the data
684	Sampling the train data since too much data
732	Run on validation dataset
845	LOAD DATASET FROM DISK
496	Function to Calculate Categorical Counts
299	No Of Storeys Vs Log Error
716	Make a Baseline model
336	and target vector that correspond to the test data size
13	And now we embed each chunk individually
524	KFold LGB model training
782	This parted was taken from the helpful kernel
750	Data transformation and helper functions
707	Split into train and test sets
600	Saving as JPEG
342	We can finally define the CNN architecture
82	Number of clicks from the IP during the last minute
216	Fitting Logistic Regression with OneVsRest Classifier
691	Loading and Visualization of Data
92	Prices of the first level of categories
834	What are Lung Opacities
762	Divide data into training and validation sets
457	Merge with the main dataframe
872	Save some memory
268	Interpreting ROC Plot
738	Get variables to apply weight decay in AdamW optimizer
16	Look at the data types and some basic info about the different columns
264	Group signals metadata accroding to target
555	Process train data in parallel
115	Parameters and LB score visualization
811	Conversions by Device
117	Implementing the SIR model
266	Hit Rate Bar Chart
416	Machine Learning Modeling
401	Examples of different hemorrhage subtypes
711	Using all features for model training
742	Get labels and their countings
668	Model Evaluation and Validation
210	CatBoost Pool and Regression
296	Bedroom Count Vs Log Error
766	roof and electricity
50	All contraction are known
704	process tabular features
544	inspect datagen output
465	First , we need to put our data into a long format dataframe
695	Visualize by heatmap
209	Data load and process functions
535	SHAP Interaction Values
702	process test images
801	Predict all province greater than
660	Adding some lag feature
605	Inference on test set
857	Plot several examples of input images
70	Hist Graph of scores
151	Train Test Split
713	Split into train and test sets
241	MERGE , MISSING VALUE , FILL NA
491	Putting the Functions Together
20	Visualizing Raw Variables
444	Evolution of Search
388	A good item price binning should be based on the price distribution
757	Test data preparation
371	Non physical data augmentation
328	Select the models to run setting bool variables below
234	Encoding Cordinal Direction
116	Ensembling the solutions and submission
75	What proportion of IP download the app
559	Outlier Analysis and Feature Scaling
591	Inference on Test Set
64	Split the data into train and validation parts
350	Predict on test set
751	Putting the principles in practice
312	Train a simple CNN architecture
319	Some сustom Loss functions
436	Visualize Validation Predicted Target
395	Correlation with Deal Probability
556	Process test data in parallel
28	Define a Convolutional Neural Network following Yoon Kim model
583	Load text data into memory
332	Seperating the data into different data frame based on the labels
449	Now we want to combine the data without creating any duplicate rows
573	Save model and weights
693	Making Feature Matrices
207	Defining our Model
874	Reading in the data , as usual
144	Create a Classification Report
476	Score versus Iteration
616	Result of my new models
373	missing value statistics
547	This images from validation data seem to be really strange labeled ...
124	Parameters and LB score visualization
310	Now we can read the masks for the specific image
567	Load Model into TPU
471	DFS with Selected Aggregation Primitives
530	Map extracted timestamps to columns
89	Combine it into a single function
108	Read the data
4	Impute any values will significantly affect the RMSE score for test set
475	Distribution of Scores
537	Examining the Growth Curves
272	Visualize the default split and gains for all models
598	Load Model into TPU
542	inspect training samples
215	Featurization of Training Data
461	Aggregate Credit previous loans
362	Join all dataframes
139	Create a Directory Structure
510	Check the typical length of a comment
223	Meter Readings over time
417	The data has no missing values and is scaled between zero and one
52	Train on full data
368	filtering out outliers
451	Identify Correlated Variables
454	Categorical Aggregation Function
661	Train model by each meter type
645	Replace to Leak data
111	Comparison of the all feature importance diagrams
384	Ordinal features mapping
393	Hit Rate and Charge Distribution
871	Let us proceede with further interesting EDA
400	As a Neuroradiologist , this distribution looks pretty true to daily practice
361	Create dataframe listing the starting date of lockdowns
717	Create dataset for training and Validation
146	Set up the generator
6	No surprises , since this is all presumably artificial data
18	Getting to Know the Data
515	Define helper functions
337	It fills our perfect submission with n randomly distributed random answers i.e
428	The test distribution seems to be similar to the training distribution
367	How much does this trust interval change over the real value for kappa
507	Granted applications per number of children
62	Create Testing Generator
321	Now a look at Italy
518	Loading the data
561	Add the actors to the renderer , set the background and size
824	Some Feature Engineering
624	Build the original and translated test data
492	Aggregated Stats of Bureau Balance by Client
882	We can safely store the two types into separate dataframes
438	Now we can evaluate the baseline model on the testing data
334	Most important or common negative words
883	Displaying sample image by host
474	Align Train and Test Sets
76	Does bots download the app
484	Previous Credit and Cash
862	Getting Prime Cities
493	An important consideration is the missing values in the dataframe
828	Perspective of Time
1	Testing Time Augmentation
14	And it looks like a fairly nice distribution , albeit still fairly asymetrical
736	Try the demo model
623	Creating submission file
185	How many different cars in train dataset
843	LOAD PROCESSED TRAINING DATA FROM DISK
452	Drop Correlated Variables
802	Age distribution of male and female patients
666	There is a gap between them
710	Make prediction and apply invert scaling
511	Split comments into array of words
727	Distribution of product among different genders
696	View Single Image
109	Test Input Pipeline
218	Variable Description and Identification
101	Is there a correlation between description length and price
813	Preparing the data
809	Conversions by App
190	Code from here and below is commented out because the kernel dies
143	Create a Confusion Matrix
385	Predict test set and make submission
796	Get data from
311	For the same window we superimpose the masks above the image
815	Judge machine learning model
648	FIX Time Zone
819	For neutral samples , use original texts as they are
194	Idea is to use clustering on images of one type to group data
330	Lets gets started
387	Remove Extreme Prices
720	Define dataset and model
21	Importing all Libraries
718	CNN Model for multiclass classification
453	Numeric Aggregation Function
737	Choose the model to use
138	Balance the target distribution
397	Here is the distribution of the maximum value for the remaining features
637	train solved tasks
588	Build datasets objects
55	We should split our dataset to create validation and train parts
177	Basic skin detection
44	Unique count of Categorical values
98	Can we get some informations out of the item description
269	Load data and fit some models
288	Bedrooms Vs Bathrooms Vs Interest Level
425	Empirical Cumulative Distribution Function Plot
674	OUTPUT OF AUGMENTATED IMAGES
145	MAKE A TEST SET PREDICTION
352	Bookings by year
560	and background color definition
632	This plot shows summarized information about feature impact against shap output
318	Trivial segmentation stuff
472	Visualize Distribution of Correlated Variables
792	Null data check
345	Exploratory Data Analysis
107	Import Required Libraries
324	Spain since first recorded case
326	USA since first case
733	Get metrics for validation dataset
402	Demonstration how it works
140	Set Up the Generators
785	Find Null data
340	Create the embedding layer
245	Create Document Vectors
242	Loading the data
520	load mapping dictionaries
38	Loading data etc
351	Bookings per day of week
413	For example , we can divide the years of schooling by the age
274	Lets Read In Data Files
816	Use machine learning model
528	Perform check on randomly chosen mask and prediction
187	Display some of similar cars
865	Feature primitives Basically which functions are we going to use to create features
642	FIX Time Zone
103	Generating Graph Matrices from the Structures
169	FS with the Pearson correlation
552	Inspection of created samples , with normalization
81	Last click from the IP analysis
635	Averaging over all instances with standard deviation as errorbar
463	Learning Rate Domain
521	add breed mapping
593	Evaluate training history
672	Efficient Net Architecture
587	Load text data into memory
678	Adding categorical features
481	Read in Data and Create Smaller Datasets
609	Losses and Metrics
633	Plotting errors for one sample
494	Calculate Information for Testing Data
551	Inspection of created samples , without normalization
498	Function to Convert Data Types
566	Create Dataset objects
818	This notebook will deal with positive , negative and neutral samples independently
406	Addressing Wrong Labels
546	Custom LR schedule
141	Plot the Training Curves
706	Random Search Confidence
631	Split Trian and Valid
357	Same series of charts but for returns
503	Split into training and validation groups
531	Create DFs imitating public and private test subsets
389	Use Ad Image to Identify Item Category
90	So , some categories are expensive , but most are cheap
833	What Does a Normal Image Look Like
191	Lets validate the test files
277	When Do People Generally Reorder
281	Which item do people put into the cart first
745	A method to get oversampled training dataset
354	Interactive booking , click , and percentage of booking trends with Bokeh
291	Resnext initialize functions
489	Function for Numeric Aggregations
734	Run on test dataset
483	Plot for a sanity check
735	Hugging Face pretrained Bert model names
25	Predicting for test data
581	The filtration step for RGB images may take a lot of time
728	Hugging Face pretrained Bert model names
152	Key No Diabetic Retinopathy Has Diabetic Retinopathy
596	Save model and best hyperparams
504	Prediction for one image
171	FS with SelectFromModel and RandomForestRegressor
11	Model Validation on train data set
450	Admit and Correct Mistakes
175	Get the dupplicate clicks with different target values
620	Validation on real world data
526	Set data loading parameters
759	Convert DCM to PNG
806	this graph is adapted from
663	what already is known
558	Exploratory Data Analysis
372	Check if valid data looks all right
230	Variable Description , Identification , and Correction
322	Comparison between Brazil and Italy
640	Fast data loading
607	Reducing Image Size
629	This is a simple modify from
157	Its also builds on kernel functions but is appropriate for unsupervised learning
121	Ridge Regression for one country
595	Unhide below to see all trials results
323	China scenario since first entry
293	Top Features Selection
473	Remove Low Importance Features
0	Load the metadata of each file
229	Importing Packages and Collecting Data
858	The competition metric relies only on the order of recods ignoring IDs
725	Data Loading and Cleaning
30	And finally lets look at the class distribution
195	Test on the data that is not seen by the network during training
189	Define some constants for data location
262	analyzing the numerical features disturbion in previous application dataset
676	Then transform to a datetime object supposing that it is an ordinal datetime
505	Train and validate
265	Apply reduction on some samples and visualize the results
543	inspect validation samples
698	Number of Patients and Images in Test Images Folder
327	Getting population for each country
252	Recurrent Neural Network
604	Create test generator
699	Create Image Augmentation Generator
599	Will need those folders later for storing our jpegs
777	Load and preprocess data
186	Display similar cars
612	Infer using trained model
622	Display the dropped images
514	Now predict the result for each toxic level
213	Importing necessary libraries
849	Add train leak
797	Add active column
85	We can now print the results
380	Import necessary libraries
411	In most cases , the values are very similar
827	At the scale of stores
91	Zoom on the second level
126	Showing Confusion Matrices
188	Display some of similar cars
227	Encoding Categorical Variable
805	Here is a base model without parameter tuning .
57	We should give CatBoost names of categorical features
129	Code from notebook
844	SAVE DATASET TO DISK
794	Logistic Regression seems to be a good classification algorithm for this dataset
532	train and test rows fraction intersection
675	Construct the graph and plot it
617	Import the modules
804	Difference varialbes were created to describe the difference beween maximum and minimum value
396	All Zero Features
196	Newer products or products from newer stores are shorter than the oldest ones
443	Distribution of all Numeric Hyperparameters
499	Function to Calculate Missing Values
147	Make a prediction on the test images
470	DFS with Default Primitives
348	Dimensionality Reduction Techniques
360	Transpose the dataframes
714	Apply invert scaling
722	Compare timing for CutMix
423	Submitting our Predictions
201	Confusion Matrix for Test Data Predictions
10	Text preprosesing source
386	Draw network graph to see which ingredients are linked together
183	Here is a plot of sorted category counts
744	Define the number of repetitions for each training example
584	Build datasets objects
459	Aggregate Installments Data
80	Download rate by hour
881	Load CSV files
173	Set up the folds for cross validation
35	The data is not balanced
641	Leak Data loading and concat
283	Visualizing Outliers In Data
232	Total Time Stopped
585	Load model into the TPU
193	Visualization of a single batch
823	Import libraries and data , reduce memory usage
174	Genetic program model , main code loop
