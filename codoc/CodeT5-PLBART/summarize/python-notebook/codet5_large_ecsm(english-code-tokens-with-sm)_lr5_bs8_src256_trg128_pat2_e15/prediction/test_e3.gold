829	Other special events
65	Create and set up the model
506	Locating a face within an image
373	missing value statistics
440	Complete Bayesian Domain
172	Load data files
111	Comparison of the all feature importance diagrams
432	Explore Time Variables
591	Inference on Test Set
633	Plotting errors for one sample
221	Time of Day and Meter Reading
104	Graph Representation of RNA structure
220	Weekday and Meter Reading
34	Apply Underbalancing Techinique
318	Trivial segmentation stuff
429	Create Training and Validation Set
179	Some stats using jpg exif
884	After we impute it , we can observe standard fluctuation
319	Some —Åustom Loss functions
367	How much does this trust interval change over the real value for kappa
678	Adding categorical features
182	Manager function to call the create features functions in multiple processes
47	FVC Progression by Sex
393	Hit Rate and Charge Distribution
262	analyzing the numerical features disturbion in previous application dataset
671	Binary Focal Loss
216	Fitting Logistic Regression with OneVsRest Classifier
195	Test on the data that is not seen by the network during training
778	Wiki News FastText Embeddings
663	what already is known
371	Non physical data augmentation
589	Load model into the TPU
391	Price Variance in param
382	Let take some small visualizations with these bool features
130	My upgrade of parameters
781	Credit day prolong
269	Load data and fit some models
665	At first , I made Europe future
558	Exploratory Data Analysis
569	First downsize all the images
64	Split the data into train and validation parts
170	FS with SelectFromModel and LinearSVR
232	Total Time Stopped
726	Visualising the distribution of each product by age by boxplot
601	Create new labels
746	Check oversampled dataset
333	most important or common positive words
467	The following code repeats this plot for all the of the numeric hyperparameters
615	Relevant attributes of identified objects are stored
753	Dealing with missed variables
28	Define a Convolutional Neural Network following Yoon Kim model
575	Pad and resize all the images
822	Made a mask using the tour
596	Save model and best hyperparams
365	Show one Example of landmark images
243	Training the model on CPU
603	Focal loss is good for unbalanced datasets , like this one
690	Get Model into TPU
695	Visualize by heatmap
521	add breed mapping
455	Combined Aggregation Function
629	This is a simple modify from
355	expanding the aggregate
717	Create dataset for training and Validation
616	Result of my new models
798	Predict by Specify Province
197	Now , the clusters will be created using just the test set
608	Save results as CSV files
600	Saving as JPEG
266	Hit Rate Bar Chart
486	Putting it all Together
181	Thanks for the example of ensemling different models from
664	make hour column from transactionDT
423	Submitting our Predictions
192	Load tabular data and create new features
136	Create a Dataframe containing all images
471	DFS with Selected Aggregation Primitives
125	Prepare Training Data
621	Drop the blurry image
323	China scenario since first entry
184	Display a single car with its mask
865	Feature primitives Basically which functions are we going to use to create features
79	Attributed time analysis
574	Padding process and resizing with OpenCV
420	Visualize Tree with No Maximum Depth
821	Plot the obtained tour
19	The Shape of the Data
188	Display some of similar cars
313	Training and callbacs
50	All contraction are known
551	Inspection of created samples , without normalization
464	Grid Search Implementation
424	Data Exploration and Data Cleaning
210	CatBoost Pool and Regression
630	Pick some frames to display
69	Make a simple restart of runtime at this point
855	Loading libraries and data
712	Function to convert series to supervised learning
734	Run on test dataset
875	Now that we have dataset in desired form , i.e
204	Confusion Matrix for Test Data Predictions
42	Data loading and checking
710	Make prediction and apply invert scaling
547	This images from validation data seem to be really strange labeled ...
434	Test Time Features
635	Averaging over all instances with standard deviation as errorbar
769	Room per family features
571	Load and freeze DenseNet
155	Define X and y
11	Model Validation on train data set
452	Drop Correlated Variables
509	Read the data
583	Load text data into memory
492	Aggregated Stats of Bureau Balance by Client
96	What are the most expensive items
70	Hist Graph of scores
404	Read in Data and Look at Summary Information
598	Load Model into TPU
838	Composition of functions
544	inspect datagen output
619	Check some augmentation effect
686	targets in train.csv
627	Blend and smooth for submission
730	Choose the model to use
684	Sampling the train data since too much data
462	Hyperparameter Tuning Implementation
305	Thx Stackoverflow for realization
360	Transpose the dataframes
773	combination using three features
25	Predicting for test data
771	Tabulet per family features
38	Loading data etc
83	Importation of a entire day data
661	Train model by each meter type
828	Perspective of Time
369	using outliers column as labels instead of target column
716	Make a Baseline model
116	Ensembling the solutions and submission
81	Last click from the IP analysis
387	Remove Extreme Prices
722	Compare timing for CutMix
556	Process test data in parallel
411	In most cases , the values are very similar
552	Inspection of created samples , with normalization
444	Evolution of Search
336	and target vector that correspond to the test data size
803	Impact of bmi over old and young patients
410	Per Capita Features
524	KFold LGB model training
566	Create Dataset objects
593	Evaluate training history
801	Predict all province greater than
528	Perform check on randomly chosen mask and prediction
607	Reducing Image Size
418	Comparing Model Performance
475	Distribution of Scores
744	Define the number of repetitions for each training example
388	A good item price binning should be based on the price distribution
164	Process the Predictions
454	Categorical Aggregation Function
86	Dealing with color
685	targets in labels.csv
100	Can the length of the description give us some informations
120	Add country details
783	Check the dataset
293	Top Features Selection
514	Now predict the result for each toxic level
199	Using DecisionTree Classifier
840	Is a program solution
350	Predict on test set
863	NOTE Even tough it is automatic , we can incorporate some manual features
489	Function for Numeric Aggregations
297	Bathroom Count Vs Log Error
767	Make new features using continuous feature
287	Visualizing Interest Level Vs Hour
165	Create the submission csv file
381	Density plot of numeric features
253	Importing The Dataset
80	Download rate by hour
503	Split into training and validation groups
650	Train model by each meter type
94	More details on brands with a treemap
308	Let us plot some bounding boxes right from the dictionary we just created
159	Load the pre processed data
611	Load Test dataframe
624	Build the original and translated test data
732	Run on validation dataset
251	Convolutional Neural Network
392	Affected Surface Object
719	Create Inference Dataset
90	So , some categories are expensive , but most are cheap
599	Will need those folders later for storing our jpegs
289	Correlation Between Price and Other Features
550	Mismatches on a validation data
864	Relationships betweeen the sets
529	Run length encoding to reduce predictions size
570	Create real file paths dataframe
349	Feature Agglomeration Results
252	Recurrent Neural Network
505	Train and validate
623	Creating submission file
553	Visualize processed samples , resize
727	Distribution of product among different genders
59	See sample image
842	Ensure determinism in the results
35	The data is not balanced
114	FS with SelectFromModel and LinearSVR
639	All train tasks predictions
157	Its also builds on kernel functions but is appropriate for unsupervised learning
134	Using my notebook
586	Create fast tokenizer
115	Parameters and LB score visualization
699	Create Image Augmentation Generator
472	Visualize Distribution of Correlated Variables
682	Train Our Linear Regression Model
545	Finally , we are ready to load the whole series into one matrix
715	These have their kitchen area larger than the total area of the house
873	What should good EDA be capable of
782	This parted was taken from the helpful kernel
565	TPU Strategy and other configs
264	Group signals metadata accroding to target
830	Inspect the data at different time scale
286	Visualizing Interest Level Vs Bedrooms
324	Spain since first recorded case
345	Exploratory Data Analysis
275	When Do People Generally Order
466	Distribution of Search Values
402	Demonstration how it works
296	Bedroom Count Vs Log Error
538	New Daily Cases
811	Conversions by Device
809	Conversions by App
743	Define the number of repetitions for each class
437	Evaluate Best Model from Random Search
572	Creating and Training the Model
758	Data preparation for test
597	Create Dataset objects
564	A simple function from stack overflow that crops the image
482	Properly Representing Variable Types
625	Predict with pure text models
698	Number of Patients and Images in Test Images Folder
670	Importing Library Files
143	Create a Confusion Matrix
484	Previous Credit and Cash
200	Confusion Matrix for Train Data Predictions
651	Replace to UCF and UCL data
209	Data load and process functions
765	Check null data
214	Word map for most frequent Tags
655	Train model by each meter type
320	Replacing Mainland china with just China
8	Read data set
755	Best parameters are searched by GridSearchCV on my Laptop
854	Predict on test
587	Load text data into memory
641	Leak Data loading and concat
270	Fit an XGBoost classifier model
764	Check the dataset
288	Bedrooms Vs Bathrooms Vs Interest Level
849	Add train leak
378	y hist with defferent timestamps are similar
470	DFS with Default Primitives
705	we add some squared features for some model flexability
697	Number of Patients and Images in Training Images Folder
110	Apply Logistic Regression
879	RF for feature selection
235	Seting X and Y
646	Fast data loading
148	Create a submission file
140	Set Up the Generators
31	Initialize Mobilenet Face Extractor
413	For example , we can divide the years of schooling by the age
580	Plotting some random images to check how cleaning works
282	Visualizing Distribution Of Price Before and After Removing Outliers
442	Learning Rate Distribution
283	Visualizing Outliers In Data
93	Which brands are most expensive
845	LOAD DATASET FROM DISK
662	Replace to UCF data
680	Fitting the trend on the yearly time series
98	Can we get some informations out of the item description
30	And finally lets look at the class distribution
198	The number of samples in each cluster is the following
223	Meter Readings over time
770	BedRoom per family features
675	Construct the graph and plot it
433	We can make the same plot by day of the week
792	Null data check
218	Variable Description and Identification
380	Import necessary libraries
585	Load model into the TPU
559	Outlier Analysis and Feature Scaling
356	a quick check if demand distribution changes week to week
761	Predictions class distribution
459	Aggregate Installments Data
795	You only have two areas to work on
438	Now we can evaluate the baseline model on the testing data
1	Testing Time Augmentation
174	Genetic program model , main code loop
358	Read the csv files from kaggle
787	Onehot encoding for categorical data
33	Check Validation Log Loss
26	Load pneumonia locations
634	Some correlation is indeed present
683	Next , we will make prediction with our LR Model
604	Create test generator
169	FS with the Pearson correlation
530	Map extracted timestamps to columns
17	Do some simple plots for exploration
52	Train on full data
824	Some Feature Engineering
263	Paths to data and metadata
668	Model Evaluation and Validation
76	Does bots download the app
774	Mix region and education
802	Age distribution of male and female patients
276	At What Day Of The Week People Order
132	Training prediction result visualization
166	What is a python generator
701	process training images
648	FIX Time Zone
112	Thanks to Automatic FE The main code for basic FE
73	What proportion of click generate downloads
515	Define helper functions
153	Set Up the Generators
280	Top Reordered Products
92	Prices of the first level of categories
48	FVC Progression by SmokingStatus
508	Income distribution and target value
480	First we need to format the data and extract the labels
463	Learning Rate Domain
138	Balance the target distribution
344	Looks like there are no missing values in the dataframe
789	Target , prediction process
5	Detect and Correct Outliers
306	Let us read the masks
135	How many images are in each folder
412	Redundant Individual Variables
851	Function which creates set of images for each axis
311	For the same window we superimpose the masks above the image
439	The number of leaves on the other hand is a discrete uniform distribution
254	Function for find out Numerical and categeical Variables
75	What proportion of IP download the app
543	inspect validation samples
542	inspect training samples
21	Importing all Libraries
168	Thanks to Automatic FE The main code for basic FE
239	MERGE , MISSING VALUE , FILL NA
537	Examining the Growth Curves
258	Analysis Based on EXter Source Types
95	What are their top categories
154	Plot the Training Curves
206	Converting the Input images to plot using plt
498	Function to Convert Data Types
300	Gaussian Noise on Target
818	This notebook will deal with positive , negative and neutral samples independently
522	extract different column types
579	Refit and Submit
62	Create Testing Generator
334	Most important or common negative words
852	Function which creates final video from list of images
44	Unique count of Categorical values
145	MAKE A TEST SET PREDICTION
749	Random Forest model
66	Counting the metric score
606	Interest based on geographical location
779	Check null data
702	process test images
733	Get metrics for validation dataset
881	Load CSV files
617	Import the modules
351	Bookings per day of week
261	Merging the bureau dataset along with application train dataset to do more analysis
672	Efficient Net Architecture
707	Split into train and test sets
868	Let us split the variables one more time
359	Read the csv files on the Johns Hopkins CSSE database on github
659	Leak Data loading and concat
577	Group and Reduce
502	Monthly Credit Data
14	And it looks like a fairly nice distribution , albeit still fairly asymetrical
326	USA since first case
152	Key No Diabetic Retinopathy Has Diabetic Retinopathy
833	What Does a Normal Image Look Like
281	Which item do people put into the cart first
406	Addressing Wrong Labels
667	We will also evaluate the position of the data points using the coordinates
536	Get important features according to SHAP
656	Leak Data Validation
453	Numeric Aggregation Function
816	Use machine learning model
242	Loading the data
384	Ordinal features mapping
520	load mapping dictionaries
523	Prepare for training
714	Apply invert scaling
859	Lib and Load data
128	Showing Confusion Matrices
834	What are Lung Opacities
533	differences between public and private test
97	Does shipping depends of price
825	Stacking models and training
315	We can now create a submission file
335	Most important or common words in neutral data
183	Here is a plot of sorted category counts
347	Random Forest Regressor
99	What words do people use
331	Full data Analysis
20	Visualizing Raw Variables
609	Losses and Metrics
763	Now , we can downcast numeric columns in the same way
376	yÁöÑÂºÇÂ∏∏ÂÄº drop samples which have exception value in y
322	Comparison between Brazil and Italy
626	Predict with mixed language models
794	Logistic Regression seems to be a good classification algorithm for this dataset
202	Using RandomForest Classifier
652	Fast data loading
237	Loading the data
398	Show Original Image
820	Write a problem file
119	Compute lags and trends
474	Align Train and Test Sets
330	Lets gets started
640	Fast data loading
298	Room Count Vs Log Error
249	Keras Tokenizer API
525	Initialize train and test DataFrames to access IDs and depth information
419	Recursive Feature Elimination with Random Forest
13	And now we embed each chunk individually
205	Transformations and Data Augmentation
636	Ploting one sample with the corresponding error as error bars
55	We should split our dataset to create validation and train parts
272	Visualize the default split and gains for all models
850	Add leak to test
496	Function to Calculate Categorical Counts
861	We can see above the counts of higher damageDealt smoothly decrease
696	View Single Image
27	GPU version It is just function verification , not for performance evaluation
706	Random Search Confidence
49	Count occurance of words
725	Data Loading and Cleaning
735	Hugging Face pretrained Bert model names
843	LOAD PROCESSED TRAINING DATA FROM DISK
815	Judge machine learning model
669	They are very similar to each other
874	Reading in the data , as usual
341	Build the Model
691	Loading and Visualization of Data
435	Try with All Time Variables
377	Divide the test set and the training set
309	Let us load one image and its masks
241	MERGE , MISSING VALUE , FILL NA
328	Select the models to run setting bool variables below
494	Calculate Information for Testing Data
700	Get Tabular Data
768	Ratio feature can have infinite values
416	Machine Learning Modeling
399	Start by pivoting the DataFrame to explore the label distribution over slices
460	Aggregate Cash previous loans
831	Disable fastai randomness
401	Examples of different hemorrhage subtypes
291	Resnext initialize functions
539	Exponential Growth Curves
848	Find final Thresshold
208	Use the images from our validation dataset to check the precdictions
368	filtering out outliers
77	Does standard users download the app
284	Visualizing Interest Level Vs Price
674	OUTPUT OF AUGMENTATED IMAGES
142	What is the AUC Score
807	Only a small proportion of clicks were followed by a download
776	Feature selection using shap
748	Results from my own training
10	Text preprosesing source
397	Here is the distribution of the maximum value for the remaining features
207	Defining our Model
126	Showing Confusion Matrices
247	Document Vectors with HashingVectorizer
488	Correlations of Aggregated Values with Target
677	Most of the dates overlap
694	Count game trainsition
234	Encoding Cordinal Direction
268	Interpreting ROC Plot
823	Import libraries and data , reduce memory usage
23	Defining DataBunch for FastAI
337	It fills our perfect submission with n randomly distributed random answers i.e
105	Loading the files
555	Process train data in parallel
618	Other columns are the digital value of pixels of kannada mnist
594	Load and preprocess data
751	Putting the principles in practice
231	City and Time features
332	Seperating the data into different data frame based on the labels
666	There is a gap between them
158	Thanks for the example of ensemling different models from
827	At the scale of stores
872	Save some memory
511	Split comments into array of words
24	Unfreeze all layers and find best learning rate
127	Divide features into groups
876	Applying it on text
194	Idea is to use clustering on images of one type to group data
175	Get the dupplicate clicks with different target values
408	Redundant Household Variables
880	Evaluate the Model
660	Adding some lag feature
443	Distribution of all Numeric Hyperparameters
426	Rides on Map of NYC
704	process tabular features
841	Solve the task
857	Plot several examples of input images
203	Confusion Matrix for Train Data Predictions
846	The mean of the two is used as the final embedding matrix
379	Save objects for next step
67	Saving the model
362	Join all dataframes
162	Plot the Loss Curves
316	Display train and test signals
43	Unique value counts
396	All Zero Features
277	When Do People Generally Reorder
425	Empirical Cumulative Distribution Function Plot
786	Predict null data based on statistical method
835	The Definition of Opacity
567	Load Model into TPU
133	Using my notebook
361	Create dataframe listing the starting date of lockdowns
229	Importing Packages and Collecting Data
747	Common things for training
775	Remove feature with only one value
160	Initialize the generators
146	Set up the generator
493	An important consideration is the missing values in the dataframe
512	Choose and train a classifier
430	Train with Simple Features
800	Predict all country greater than
366	Data Exploration The label distribution shows clear label imbalance
294	Dependent variable logerror follows nice normal distribution
383	High cardinality features
742	Get labels and their countings
632	This plot shows summarized information about feature impact against shap output
273	Bounded region of parameter space
562	OSIC training data Example
797	Add active column
409	Creating Ordinal Variables
720	Define dataset and model
171	FS with SelectFromModel and RandomForestRegressor
796	Get data from
357	Same series of charts but for returns
213	Importing necessary libraries
60	See how our generator work
592	Load and preprocess data
507	Granted applications per number of children
447	Bayesian Optimization on the Full Dataset
407	Families without Heads of Household
731	Try to load the latest checkpoint
813	Preparing the data
561	Add the actors to the renderer , set the background and size
740	Check saved checkpoints
131	Code from notebook
688	train valid split
117	Implementing the SIR model
54	Using LabelEncoding we just change string values to numbers
519	and batch aggregations examples for the rest of the tables ..
581	The filtration step for RGB images may take a lot of time
375	The following is features with fine hist
186	Display similar cars
102	Data Info Method
810	Conversions by OS
692	Making Vocabulary and Text Conversion
469	Testing Results on Full Data
676	Then transform to a datetime object supposing that it is an ordinal datetime
244	Splitting train into training and validation set
759	Convert DCM to PNG
4	Impute any values will significantly affect the RMSE score for test set
88	Convert each labeled object to Run Line Encoding
582	Load and process data
108	Read the data
450	Admit and Correct Mistakes
723	Compare timing for MixUp
196	Newer products or products from newer stores are shorter than the oldest ones
826	cut down features to avoid the kernel die
490	Function to Handle Categorical Variables
563	Predict Test Set and Submit Result
250	Creating the Model
681	Merge seed for each team
32	The data is not balanced
878	Replace infs and imputing missing values by mean
0	Load the metadata of each file
481	Read in Data and Create Smaller Datasets
22	Seed everything for reproducibility
739	Try to load the latest checkpoint
260	Checking the Correlation Between The Features for Application Train Dataset
510	Check the typical length of a comment
560	and background color definition
353	Bookings by month
57	We should give CatBoost names of categorical features
576	Load Model into TPU
499	Function to Calculate Missing Values
477	Hyperparameters versus Iteration
856	You can choose many palettes , which makes the graphs visually nice
394	Initial Position and Momentum
421	Lets first check the Train Target Distribution
546	Custom LR schedule
448	Standard imports for data science work
478	Plots of Hyperparameters vs Score
554	Visualize test processed samples , resize
301	Composition of Augmentations
329	Calculating the day when the number of infected individuals is max
637	train solved tasks
711	Using all features for model training
578	Adding mode as feature
257	Types Of Features
372	Check if valid data looks all right
844	SAVE DATASET TO DISK
883	Displaying sample image by host
456	Aggregate Grandchild Data Tables
431	Use More Features
312	Train a simple CNN architecture
177	Basic skin detection
3	Imputations and Data Transformation
620	Validation on real world data
85	We can now print the results
457	Merge with the main dataframe
517	Train the LGBM model
858	The competition metric relies only on the order of recods ignoring IDs
708	Convert an array of values into a dataset matrix
847	The method for training is borrowed from
497	Function for KDE Plots of Variable
191	Lets validate the test files
91	Zoom on the second level
248	Document Vectors with hashing trick
793	It seems Goblins are a little similar to Ghouls
541	load mapping dictionaries
16	Look at the data types and some basic info about the different columns
745	A method to get oversampled training dataset
468	Sequence of Search Values
428	The test distribution seems to be similar to the training distribution
343	Imputing missing values
107	Import Required Libraries
645	Replace to Leak data
693	Making Feature Matrices
527	Define data loading
103	Generating Graph Matrices from the Structures
653	FIX Time Zone
37	Ability to Detect Face
689	TPU Strategy and other configs
238	Librairies and data
805	Here is a base model without parameter tuning .
303	Preprocessing of features
295	No Of Storey Over The Years
374	Exception value processing
274	Lets Read In Data Files
638	evaluation solved tasks
271	Visualize the feature interaction
643	Adding some lag feature
837	If you like the content of this notebook , please consider upvoting it
516	Predict validation and test set masks
614	Comparing various kappa scoring
122	Its also builds on kernel functions but is appropriate for unsupervised learning
679	Rolling monthly and yearly store means
385	Predict test set and make submission
518	Loading the data
479	Now for the next four hyperparameters versus the score
18	Getting to Know the Data
255	Identifying Missing Value Present in Application Train Dataset
540	Gaussian Approximation of Active Cases
101	Is there a correlation between description length and price
871	Let us proceede with further interesting EDA
78	How many times , each categories of clickers download the app
436	Visualize Validation Predicted Target
151	Train Test Split
804	Difference varialbes were created to describe the difference beween maximum and minimum value
58	Prepare Traning Data
785	Find Null data
339	Load and Explore Data
256	Checking the Imbalance of Target Variable
163	Make a Prediction
265	Apply reduction on some samples and visualize the results
224	Meter Readings over time And Primary Use
612	Infer using trained model
161	Set up the Model Architecture
217	Importing Packages and Collecting Data
156	Create a submission file
602	Pad and resize all the images
862	Getting Prime Cities
109	Test Input Pipeline
340	Create the embedding layer
121	Ridge Regression for one country
348	Dimensionality Reduction Techniques
212	Use of Bayesian Block in Santander Customer Transaction Prediction Challenge
228	Prediction and Submission
149	Create Binary Targets
784	Moving average is so simple
9	Target varaible distribution
483	Plot for a sanity check
87	Deriving individual masks for each object
342	We can finally define the CNN architecture
71	I updated importation for a faster version
233	Encoding Street Names
535	SHAP Interaction Values
819	For neutral samples , use original texts as they are
610	Training the model
673	Dense Added Model
757	Test data preparation
549	Finding best alpha
321	Now a look at Italy
189	Define some constants for data location
139	Create a Directory Structure
193	Visualization of a single batch
613	Reproducing simple baseline
461	Aggregate Credit previous loans
180	Its also builds on kernel functions but is appropriate for unsupervised learning
445	Applied to Full Dataset
400	As a Neuroradiologist , this distribution looks pretty true to daily practice
812	Conversions by Channel
738	Get variables to apply weight decay in AdamW optimizer
302	Loading and preprocessing data
240	Loading the data
476	Score versus Iteration
129	Code from notebook
777	Load and preprocess data
737	Choose the model to use
427	Calculate Distance between points using Haversine distance
836	Opacities That Are Not Related to Pneumonia
832	Load train and test dataframes and add length columns for Description and Name
190	Code from here and below is commented out because the kernel dies
605	Inference on test set
658	Fast data loading
866	Label encoding Making it machine readable
531	Create DFs imitating public and private test subsets
74	Zoom on this IP
317	removing columns where correlation is high
41	Training on the complete Dataset now
728	Hugging Face pretrained Bert model names
363	Create variables of interest
465	First , we need to put our data into a long format dataframe
649	Adding some lag feature
327	Getting population for each country
225	Square feet size is positively Skewed
267	Rescaling the Image Most image preprocessing functions want the image as grayscale
790	the difficuly of training different mask type is different
870	That is the size of one test example that we ought to predict
628	Ensemble with my historical best
173	Set up the folds for cross validation
167	How to make a generator run infinitely
113	FS with the Pearson correlation
215	Featurization of Training Data
352	Bookings by year
84	The magical function
526	Set data loading parameters
867	NaN imputation will be skipped in this tutorial
622	Display the dropped images
473	Remove Low Importance Features
51	Convert to lower case Clean contractions Clean special charactor Convert small caps
185	How many different cars in train dataset
29	Data is still small enough for memory so read to memory using pandas
458	Aggregate previous loans at Home Credit
532	train and test rows fraction intersection
279	Best Selling Products
451	Identify Correlated Variables
721	Prediction for test
756	Set Model for prediction
6	No surprises , since this is all presumably artificial data
147	Make a prediction on the test images
736	Try the demo model
187	Display some of similar cars
61	Prepare Testing Data
729	Make TF record file for test dataset
40	Preparing the training data
568	Create fake filepaths dataframe
390	Price Variance Within Identified Items
814	Calculate extra features for test set
222	Primary Use and Meter Reading
548	Load Model into TPU
144	Create a Classification Report
590	Running the model on a Sample Image
176	Display all test images
53	Predict submission dates
389	Use Ad Image to Identify Item Category
246	Document Vectors with TfidfVectorizer
877	Read and Explore
750	Data transformation and helper functions
584	Build datasets objects
417	The data has no missing values and is scaled between zero and one
46	Submission data prediction
415	Next we can rename the columns to make it easier to keep track
89	Combine it into a single function
644	Train model by each meter type
211	CatBoost is RAM expensive so I prefer to utilize GPU
588	Build datasets objects
703	process submission images
573	Save model and weights
860	Explore distribution of single variable
631	Split Trian and Valid
495	Function to Aggregate Numeric Data
259	Analysis based Averages values
534	Distribution of months in train and test
346	Modeling and Prediction
72	How many different values does our categorial variables take
82	Number of clicks from the IP during the last minute
806	this graph is adapted from
780	Credit day overdue
63	See predicted result with images
2	Seems like a very wide range of values , relatively spaking
124	Parameters and LB score visualization
718	CNN Model for multiclass classification
414	Feature Engineering through Aggregations
772	phone per family features
504	Prediction for one image
709	Create dataset with look back
45	test prediction by LGBM and feature importance check
500	Function to Aggregate Stats at the Client Level
39	Show and save column comparision matrix and save row sets
869	Train the model , predict , etc
654	Adding some lag feature
118	Join data , filter dates and clean missings
647	Leak Data loading and concat
285	Visuallizing Interest Level Vs Bathroom
687	These labels are not in train
422	Filling missing and infinite data by zeroes
799	Predict by Specify Country
292	Create final submission DF
290	Main Config Variables
501	Monthly Cash Data
766	roof and electricity
354	Interactive booking , click , and percentage of booking trends with Bokeh
310	Now we can read the masks for the specific image
485	Create Custom Feature Primitives
817	Start positions and end positions of selected texts in tokenized source texts
395	Correlation with Deal Probability
808	Explore ip counts
853	Create Magic features
230	Variable Description , Identification , and Correction
760	Split training set
278	How many orders users generally made
370	Check Unique Label
307	So a unique operator will give us the unique filenames that contain ships
12	Roc AUC curve
137	Display a random sample of train images by class
219	Meter Reading and Meter Type
15	Maybe if we used the log plot things would be better
201	Confusion Matrix for Test Data Predictions
299	No Of Storeys Vs Log Error
364	Compare our forecast with actual evolution both for training and validation sets
245	Create Document Vectors
36	Take a look at predictions
882	We can safely store the two types into separate dataframes
325	Iran since first case
557	Load Packages and Data
449	Now we want to combine the data without creating any duplicate rows
642	FIX Time Zone
754	Starting importance variables evaluation
403	Combinations of TTA
724	Compare timing for GridMask
713	Split into train and test sets
150	Balance the target distribution
226	Imputing Missing variable
141	Plot the Training Curves
386	Draw network graph to see which ingredients are linked together
106	plotting the scan
595	Unhide below to see all trials results
227	Encoding Categorical Variable
123	Thanks for the example of ensemling different models from
178	Apply skin segmentation on all training data and visualize the result
68	You can state below link to your copy of this MMDetection repo
491	Putting the Functions Together
304	Text Processing of text data easily
56	Using embedding in NN we can change dimensionality of categorical features
839	The evaluation method
446	Random Search on the Full Dataset
7	Now there appears to be one feature that is not gaussian
791	Show some examples of different mask
487	Kernel Density Estimate Plots
788	Prediction with xgboost
741	An example usage
657	Find Best Weight
314	Prediction on test set
338	Import Packages and Functions
236	Which Team Wins And Lost The Most Championships
441	Example of Sampling from the Domain
405	Exploring Label Distribution
762	Divide data into training and validation sets
752	Show influence of economical factors on housing prices
513	Now train the models with a partial fit approach
