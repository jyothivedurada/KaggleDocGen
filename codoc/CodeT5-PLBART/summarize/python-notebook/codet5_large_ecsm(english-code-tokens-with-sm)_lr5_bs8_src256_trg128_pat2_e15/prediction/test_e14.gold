321	Now a look at Italy
842	Ensure determinism in the results
284	Visualizing Interest Level Vs Price
32	The data is not balanced
223	Meter Readings over time
659	Leak Data loading and concat
710	Make prediction and apply invert scaling
861	We can see above the counts of higher damageDealt smoothly decrease
794	Logistic Regression seems to be a good classification algorithm for this dataset
345	Exploratory Data Analysis
341	Build the Model
351	Bookings per day of week
656	Leak Data Validation
608	Save results as CSV files
154	Plot the Training Curves
569	First downsize all the images
818	This notebook will deal with positive , negative and neutral samples independently
521	add breed mapping
478	Plots of Hyperparameters vs Score
849	Add train leak
791	Show some examples of different mask
694	Count game trainsition
149	Create Binary Targets
215	Featurization of Training Data
541	load mapping dictionaries
100	Can the length of the description give us some informations
264	Group signals metadata accroding to target
171	FS with SelectFromModel and RandomForestRegressor
119	Compute lags and trends
234	Encoding Cordinal Direction
560	and background color definition
307	So a unique operator will give us the unique filenames that contain ships
610	Training the model
329	Calculating the day when the number of infected individuals is max
702	process test images
322	Comparison between Brazil and Italy
700	Get Tabular Data
4	Impute any values will significantly affect the RMSE score for test set
403	Combinations of TTA
99	What words do people use
680	Fitting the trend on the yearly time series
175	Get the dupplicate clicks with different target values
198	The number of samples in each cluster is the following
543	inspect validation samples
633	Plotting errors for one sample
325	Iran since first case
492	Aggregated Stats of Bureau Balance by Client
266	Hit Rate Bar Chart
731	Try to load the latest checkpoint
43	Unique value counts
647	Leak Data loading and concat
349	Feature Agglomeration Results
534	Distribution of months in train and test
620	Validation on real world data
69	Make a simple restart of runtime at this point
24	Unfreeze all layers and find best learning rate
85	We can now print the results
657	Find Best Weight
231	City and Time features
599	Will need those folders later for storing our jpegs
530	Map extracted timestamps to columns
850	Add leak to test
637	train solved tasks
815	Judge machine learning model
813	Preparing the data
276	At What Day Of The Week People Order
782	This parted was taken from the helpful kernel
364	Compare our forecast with actual evolution both for training and validation sets
875	Now that we have dataset in desired form , i.e
250	Creating the Model
11	Model Validation on train data set
747	Common things for training
53	Predict submission dates
590	Running the model on a Sample Image
641	Leak Data loading and concat
698	Number of Patients and Images in Test Images Folder
763	Now , we can downcast numeric columns in the same way
579	Refit and Submit
872	Save some memory
167	How to make a generator run infinitely
640	Fast data loading
867	NaN imputation will be skipped in this tutorial
121	Ridge Regression for one country
92	Prices of the first level of categories
695	Visualize by heatmap
82	Number of clicks from the IP during the last minute
496	Function to Calculate Categorical Counts
60	See how our generator work
232	Total Time Stopped
737	Choose the model to use
613	Reproducing simple baseline
556	Process test data in parallel
439	The number of leaves on the other hand is a discrete uniform distribution
812	Conversions by Channel
290	Main Config Variables
353	Bookings by month
733	Get metrics for validation dataset
139	Create a Directory Structure
696	View Single Image
361	Create dataframe listing the starting date of lockdowns
324	Spain since first recorded case
430	Train with Simple Features
429	Create Training and Validation Set
182	Manager function to call the create features functions in multiple processes
128	Showing Confusion Matrices
295	No Of Storey Over The Years
757	Test data preparation
408	Redundant Household Variables
442	Learning Rate Distribution
841	Solve the task
174	Genetic program model , main code loop
107	Import Required Libraries
529	Run length encoding to reduce predictions size
323	China scenario since first entry
95	What are their top categories
227	Encoding Categorical Variable
242	Loading the data
643	Adding some lag feature
779	Check null data
554	Visualize test processed samples , resize
15	Maybe if we used the log plot things would be better
669	They are very similar to each other
746	Check oversampled dataset
479	Now for the next four hyperparameters versus the score
291	Resnext initialize functions
433	We can make the same plot by day of the week
46	Submission data prediction
761	Predictions class distribution
859	Lib and Load data
767	Make new features using continuous feature
494	Calculate Information for Testing Data
163	Make a Prediction
762	Divide data into training and validation sets
427	Calculate Distance between points using Haversine distance
493	An important consideration is the missing values in the dataframe
271	Visualize the feature interaction
753	Dealing with missed variables
326	USA since first case
807	Only a small proportion of clicks were followed by a download
300	Gaussian Noise on Target
382	Let take some small visualizations with these bool features
238	Librairies and data
193	Visualization of a single batch
787	Onehot encoding for categorical data
103	Generating Graph Matrices from the Structures
185	How many different cars in train dataset
278	How many orders users generally made
306	Let us read the masks
360	Transpose the dataframes
550	Mismatches on a validation data
638	evaluation solved tasks
160	Initialize the generators
362	Join all dataframes
832	Load train and test dataframes and add length columns for Description and Name
676	Then transform to a datetime object supposing that it is an ordinal datetime
195	Test on the data that is not seen by the network during training
721	Prediction for test
155	Define X and y
500	Function to Aggregate Stats at the Client Level
236	Which Team Wins And Lost The Most Championships
823	Import libraries and data , reduce memory usage
51	Convert to lower case Clean contractions Clean special charactor Convert small caps
764	Check the dataset
438	Now we can evaluate the baseline model on the testing data
839	The evaluation method
101	Is there a correlation between description length and price
881	Load CSV files
735	Hugging Face pretrained Bert model names
504	Prediction for one image
848	Find final Thresshold
40	Preparing the training data
432	Explore Time Variables
252	Recurrent Neural Network
201	Confusion Matrix for Test Data Predictions
404	Read in Data and Look at Summary Information
576	Load Model into TPU
497	Function for KDE Plots of Variable
677	Most of the dates overlap
565	TPU Strategy and other configs
582	Load and process data
409	Creating Ordinal Variables
771	Tabulet per family features
724	Compare timing for GridMask
751	Putting the principles in practice
674	OUTPUT OF AUGMENTATED IMAGES
821	Plot the obtained tour
304	Text Processing of text data easily
369	using outliers column as labels instead of target column
517	Train the LGBM model
570	Create real file paths dataframe
308	Let us plot some bounding boxes right from the dictionary we just created
397	Here is the distribution of the maximum value for the remaining features
183	Here is a plot of sorted category counts
475	Distribution of Scores
604	Create test generator
285	Visuallizing Interest Level Vs Bathroom
116	Ensembling the solutions and submission
542	inspect training samples
622	Display the dropped images
105	Loading the files
462	Hyperparameter Tuning Implementation
275	When Do People Generally Order
491	Putting the Functions Together
181	Thanks for the example of ensemling different models from
115	Parameters and LB score visualization
402	Demonstration how it works
672	Efficient Net Architecture
132	Training prediction result visualization
567	Load Model into TPU
607	Reducing Image Size
36	Take a look at predictions
634	Some correlation is indeed present
876	Applying it on text
254	Function for find out Numerical and categeical Variables
64	Split the data into train and validation parts
824	Some Feature Engineering
743	Define the number of repetitions for each class
230	Variable Description , Identification , and Correction
586	Create fast tokenizer
507	Granted applications per number of children
862	Getting Prime Cities
274	Lets Read In Data Files
76	Does bots download the app
244	Splitting train into training and validation set
712	Function to convert series to supervised learning
629	This is a simple modify from
348	Dimensionality Reduction Techniques
368	filtering out outliers
739	Try to load the latest checkpoint
652	Fast data loading
257	Types Of Features
31	Initialize Mobilenet Face Extractor
617	Import the modules
465	First , we need to put our data into a long format dataframe
795	You only have two areas to work on
288	Bedrooms Vs Bathrooms Vs Interest Level
172	Load data files
65	Create and set up the model
687	These labels are not in train
428	The test distribution seems to be similar to the training distribution
395	Correlation with Deal Probability
775	Remove feature with only one value
685	targets in labels.csv
495	Function to Aggregate Numeric Data
722	Compare timing for CutMix
609	Losses and Metrics
407	Families without Heads of Household
537	Examining the Growth Curves
503	Split into training and validation groups
825	Stacking models and training
874	Reading in the data , as usual
528	Perform check on randomly chosen mask and prediction
619	Check some augmentation effect
124	Parameters and LB score visualization
70	Hist Graph of scores
642	FIX Time Zone
742	Get labels and their countings
639	All train tasks predictions
804	Difference varialbes were created to describe the difference beween maximum and minimum value
186	Display similar cars
200	Confusion Matrix for Train Data Predictions
688	train valid split
44	Unique count of Categorical values
208	Use the images from our validation dataset to check the precdictions
593	Evaluate training history
546	Custom LR schedule
10	Text preprosesing source
563	Predict Test Set and Submit Result
768	Ratio feature can have infinite values
331	Full data Analysis
612	Infer using trained model
451	Identify Correlated Variables
152	Key No Diabetic Retinopathy Has Diabetic Retinopathy
220	Weekday and Meter Reading
588	Build datasets objects
615	Relevant attributes of identified objects are stored
67	Saving the model
717	Create dataset for training and Validation
566	Create Dataset objects
170	FS with SelectFromModel and LinearSVR
396	All Zero Features
202	Using RandomForest Classifier
484	Previous Credit and Cash
880	Evaluate the Model
137	Display a random sample of train images by class
192	Load tabular data and create new features
559	Outlier Analysis and Feature Scaling
691	Loading and Visualization of Data
553	Visualize processed samples , resize
14	And it looks like a fairly nice distribution , albeit still fairly asymetrical
110	Apply Logistic Regression
765	Check null data
819	For neutral samples , use original texts as they are
74	Zoom on this IP
508	Income distribution and target value
509	Read the data
544	inspect datagen output
645	Replace to Leak data
741	An example usage
519	and batch aggregations examples for the rest of the tables ..
281	Which item do people put into the cart first
148	Create a submission file
366	Data Exploration The label distribution shows clear label imbalance
463	Learning Rate Domain
577	Group and Reduce
644	Train model by each meter type
728	Hugging Face pretrained Bert model names
830	Inspect the data at different time scale
653	FIX Time Zone
603	Focal loss is good for unbalanced datasets , like this one
79	Attributed time analysis
255	Identifying Missing Value Present in Application Train Dataset
611	Load Test dataframe
797	Add active column
22	Seed everything for reproducibility
153	Set Up the Generators
313	Training and callbacs
416	Machine Learning Modeling
387	Remove Extreme Prices
727	Distribution of product among different genders
524	KFold LGB model training
203	Confusion Matrix for Train Data Predictions
843	LOAD PROCESSED TRAINING DATA FROM DISK
786	Predict null data based on statistical method
549	Finding best alpha
78	How many times , each categories of clickers download the app
883	Displaying sample image by host
801	Predict all province greater than
806	this graph is adapted from
699	Create Image Augmentation Generator
618	Other columns are the digital value of pixels of kannada mnist
159	Load the pre processed data
301	Composition of Augmentations
8	Read data set
793	It seems Goblins are a little similar to Ghouls
555	Process train data in parallel
168	Thanks to Automatic FE The main code for basic FE
312	Train a simple CNN architecture
177	Basic skin detection
625	Predict with pure text models
72	How many different values does our categorial variables take
511	Split comments into array of words
282	Visualizing Distribution Of Price Before and After Removing Outliers
650	Train model by each meter type
318	Trivial segmentation stuff
729	Make TF record file for test dataset
513	Now train the models with a partial fit approach
2	Seems like a very wide range of values , relatively spaking
759	Convert DCM to PNG
828	Perspective of Time
343	Imputing missing values
621	Drop the blurry image
532	train and test rows fraction intersection
118	Join data , filter dates and clean missings
194	Idea is to use clustering on images of one type to group data
144	Create a Classification Report
417	The data has no missing values and is scaled between zero and one
540	Gaussian Approximation of Active Cases
61	Prepare Testing Data
573	Save model and weights
449	Now we want to combine the data without creating any duplicate rows
97	Does shipping depends of price
267	Rescaling the Image Most image preprocessing functions want the image as grayscale
1	Testing Time Augmentation
525	Initialize train and test DataFrames to access IDs and depth information
690	Get Model into TPU
134	Using my notebook
538	New Daily Cases
120	Add country details
338	Import Packages and Functions
66	Counting the metric score
707	Split into train and test sets
50	All contraction are known
392	Affected Surface Object
636	Ploting one sample with the corresponding error as error bars
458	Aggregate previous loans at Home Credit
467	The following code repeats this plot for all the of the numeric hyperparameters
866	Label encoding Making it machine readable
401	Examples of different hemorrhage subtypes
732	Run on validation dataset
869	Train the model , predict , etc
34	Apply Underbalancing Techinique
574	Padding process and resizing with OpenCV
133	Using my notebook
90	So , some categories are expensive , but most are cheap
708	Convert an array of values into a dataset matrix
239	MERGE , MISSING VALUE , FILL NA
527	Define data loading
431	Use More Features
20	Visualizing Raw Variables
367	How much does this trust interval change over the real value for kappa
7	Now there appears to be one feature that is not gaussian
624	Build the original and translated test data
423	Submitting our Predictions
697	Number of Patients and Images in Training Images Folder
224	Meter Readings over time And Primary Use
179	Some stats using jpg exif
464	Grid Search Implementation
218	Variable Description and Identification
77	Does standard users download the app
790	the difficuly of training different mask type is different
750	Data transformation and helper functions
273	Bounded region of parameter space
157	Its also builds on kernel functions but is appropriate for unsupervised learning
42	Data loading and checking
141	Plot the Training Curves
873	What should good EDA be capable of
390	Price Variance Within Identified Items
515	Define helper functions
864	Relationships betweeen the sets
592	Load and preprocess data
214	Word map for most frequent Tags
461	Aggregate Credit previous loans
545	Finally , we are ready to load the whole series into one matrix
668	Model Evaluation and Validation
822	Made a mask using the tour
725	Data Loading and Cleaning
776	Feature selection using shap
844	SAVE DATASET TO DISK
740	Check saved checkpoints
809	Conversions by App
23	Defining DataBunch for FastAI
0	Load the metadata of each file
852	Function which creates final video from list of images
26	Load pneumonia locations
413	For example , we can divide the years of schooling by the age
660	Adding some lag feature
207	Defining our Model
189	Define some constants for data location
673	Dense Added Model
564	A simple function from stack overflow that crops the image
158	Thanks for the example of ensemling different models from
547	This images from validation data seem to be really strange labeled ...
701	process training images
303	Preprocessing of features
319	Some сustom Loss functions
522	extract different column types
434	Test Time Features
632	This plot shows summarized information about feature impact against shap output
498	Function to Convert Data Types
405	Exploring Label Distribution
884	After we impute it , we can observe standard fluctuation
162	Plot the Loss Curves
580	Plotting some random images to check how cleaning works
6	No surprises , since this is all presumably artificial data
292	Create final submission DF
19	The Shape of the Data
135	How many images are in each folder
877	Read and Explore
176	Display all test images
117	Implementing the SIR model
490	Function to Handle Categorical Variables
706	Random Search Confidence
811	Conversions by Device
651	Replace to UCF and UCL data
531	Create DFs imitating public and private test subsets
516	Predict validation and test set masks
437	Evaluate Best Model from Random Search
399	Start by pivoting the DataFrame to explore the label distribution over slices
769	Room per family features
871	Let us proceede with further interesting EDA
440	Complete Bayesian Domain
835	The Definition of Opacity
226	Imputing Missing variable
614	Comparing various kappa scoring
598	Load Model into TPU
487	Kernel Density Estimate Plots
190	Code from here and below is commented out because the kernel dies
616	Result of my new models
562	OSIC training data Example
262	analyzing the numerical features disturbion in previous application dataset
589	Load model into the TPU
845	LOAD DATASET FROM DISK
802	Age distribution of male and female patients
715	These have their kitchen area larger than the total area of the house
89	Combine it into a single function
868	Let us split the variables one more time
726	Visualising the distribution of each product by age by boxplot
127	Divide features into groups
142	What is the AUC Score
243	Training the model on CPU
219	Meter Reading and Meter Type
800	Predict all country greater than
635	Averaging over all instances with standard deviation as errorbar
857	Plot several examples of input images
357	Same series of charts but for returns
816	Use machine learning model
792	Null data check
102	Data Info Method
480	First we need to format the data and extract the labels
831	Disable fastai randomness
523	Prepare for training
380	Import necessary libraries
846	The mean of the two is used as the final embedding matrix
665	At first , I made Europe future
222	Primary Use and Meter Reading
212	Use of Bayesian Block in Santander Customer Transaction Prediction Challenge
56	Using embedding in NN we can change dimensionality of categorical features
459	Aggregate Installments Data
188	Display some of similar cars
606	Interest based on geographical location
94	More details on brands with a treemap
317	removing columns where correlation is high
259	Analysis based Averages values
297	Bathroom Count Vs Log Error
483	Plot for a sanity check
327	Getting population for each country
283	Visualizing Outliers In Data
720	Define dataset and model
241	MERGE , MISSING VALUE , FILL NA
385	Predict test set and make submission
539	Exponential Growth Curves
258	Analysis Based on EXter Source Types
675	Construct the graph and plot it
49	Count occurance of words
628	Ensemble with my historical best
623	Creating submission file
448	Standard imports for data science work
378	y hist with defferent timestamps are similar
705	we add some squared features for some model flexability
253	Importing The Dataset
548	Load Model into TPU
752	Show influence of economical factors on housing prices
474	Align Train and Test Sets
865	Feature primitives Basically which functions are we going to use to create features
365	Show one Example of landmark images
536	Get important features according to SHAP
789	Target , prediction process
16	Look at the data types and some basic info about the different columns
63	See predicted result with images
684	Sampling the train data since too much data
38	Loading data etc
424	Data Exploration and Data Cleaning
879	RF for feature selection
217	Importing Packages and Collecting Data
485	Create Custom Feature Primitives
109	Test Input Pipeline
520	load mapping dictionaries
453	Numeric Aggregation Function
654	Adding some lag feature
481	Read in Data and Create Smaller Datasets
316	Display train and test signals
784	Moving average is so simple
783	Check the dataset
96	What are the most expensive items
502	Monthly Credit Data
320	Replacing Mainland china with just China
426	Rides on Map of NYC
374	Exception value processing
339	Load and Explore Data
837	If you like the content of this notebook , please consider upvoting it
626	Predict with mixed language models
662	Replace to UCF data
678	Adding categorical features
858	The competition metric relies only on the order of recods ignoring IDs
470	DFS with Default Primitives
140	Set Up the Generators
57	We should give CatBoost names of categorical features
73	What proportion of click generate downloads
302	Loading and preprocessing data
39	Show and save column comparision matrix and save row sets
738	Get variables to apply weight decay in AdamW optimizer
670	Importing Library Files
123	Thanks for the example of ensemling different models from
882	We can safely store the two types into separate dataframes
136	Create a Dataframe containing all images
602	Pad and resize all the images
75	What proportion of IP download the app
594	Load and preprocess data
601	Create new labels
248	Document Vectors with hashing trick
111	Comparison of the all feature importance diagrams
9	Target varaible distribution
745	A method to get oversampled training dataset
151	Train Test Split
755	Best parameters are searched by GridSearchCV on my Laptop
263	Paths to data and metadata
205	Transformations and Data Augmentation
419	Recursive Feature Elimination with Random Forest
211	CatBoost is RAM expensive so I prefer to utilize GPU
587	Load text data into memory
798	Predict by Specify Province
788	Prediction with xgboost
337	It fills our perfect submission with n randomly distributed random answers i.e
591	Inference on Test Set
114	FS with SelectFromModel and LinearSVR
597	Create Dataset objects
246	Document Vectors with TfidfVectorizer
3	Imputations and Data Transformation
83	Importation of a entire day data
452	Drop Correlated Variables
410	Per Capita Features
93	Which brands are most expensive
441	Example of Sampling from the Domain
268	Interpreting ROC Plot
412	Redundant Individual Variables
335	Most important or common words in neutral data
143	Create a Confusion Matrix
68	You can state below link to your copy of this MMDetection repo
772	phone per family features
661	Train model by each meter type
756	Set Model for prediction
372	Check if valid data looks all right
406	Addressing Wrong Labels
450	Admit and Correct Mistakes
436	Visualize Validation Predicted Target
196	Newer products or products from newer stores are shorter than the oldest ones
552	Inspection of created samples , with normalization
826	cut down features to avoid the kernel die
28	Define a Convolutional Neural Network following Yoon Kim model
445	Applied to Full Dataset
27	GPU version It is just function verification , not for performance evaluation
261	Merging the bureau dataset along with application train dataset to do more analysis
29	Data is still small enough for memory so read to memory using pandas
734	Run on test dataset
501	Monthly Cash Data
204	Confusion Matrix for Test Data Predictions
247	Document Vectors with HashingVectorizer
471	DFS with Selected Aggregation Primitives
781	Credit day prolong
718	CNN Model for multiclass classification
853	Create Magic features
716	Make a Baseline model
460	Aggregate Cash previous loans
778	Wiki News FastText Embeddings
80	Download rate by hour
138	Balance the target distribution
584	Build datasets objects
421	Lets first check the Train Target Distribution
785	Find Null data
384	Ordinal features mapping
810	Conversions by OS
352	Bookings by year
147	Make a prediction on the test images
249	Keras Tokenizer API
646	Fast data loading
58	Prepare Traning Data
713	Split into train and test sets
334	Most important or common negative words
631	Split Trian and Valid
773	combination using three features
855	Loading libraries and data
47	FVC Progression by Sex
754	Starting importance variables evaluation
571	Load and freeze DenseNet
216	Fitting Logistic Regression with OneVsRest Classifier
71	I updated importation for a faster version
709	Create dataset with look back
655	Train model by each meter type
197	Now , the clusters will be created using just the test set
376	y的异常值 drop samples which have exception value in y
605	Inference on test set
377	Divide the test set and the training set
472	Visualize Distribution of Correlated Variables
394	Initial Position and Momentum
526	Set data loading parameters
381	Density plot of numeric features
131	Code from notebook
447	Bayesian Optimization on the Full Dataset
18	Getting to Know the Data
328	Select the models to run setting bool variables below
206	Converting the Input images to plot using plt
269	Load data and fit some models
561	Add the actors to the renderer , set the background and size
466	Distribution of Search Values
311	For the same window we superimpose the masks above the image
468	Sequence of Search Values
679	Rolling monthly and yearly store means
693	Making Feature Matrices
344	Looks like there are no missing values in the dataframe
41	Training on the complete Dataset now
418	Comparing Model Performance
551	Inspection of created samples , without normalization
774	Mix region and education
166	What is a python generator
342	We can finally define the CNN architecture
37	Ability to Detect Face
595	Unhide below to see all trials results
91	Zoom on the second level
663	what already is known
581	The filtration step for RGB images may take a lot of time
649	Adding some lag feature
169	FS with the Pearson correlation
578	Adding mode as feature
178	Apply skin segmentation on all training data and visualize the result
161	Set up the Model Architecture
469	Testing Results on Full Data
310	Now we can read the masks for the specific image
808	Explore ip counts
150	Balance the target distribution
363	Create variables of interest
251	Convolutional Neural Network
627	Blend and smooth for submission
863	NOTE Even tough it is automatic , we can incorporate some manual features
371	Non physical data augmentation
383	High cardinality features
5	Detect and Correct Outliers
260	Checking the Correlation Between The Features for Application Train Dataset
379	Save objects for next step
796	Get data from
575	Pad and resize all the images
557	Load Packages and Data
415	Next we can rename the columns to make it easier to keep track
457	Merge with the main dataframe
87	Deriving individual masks for each object
314	Prediction on test set
847	The method for training is borrowed from
683	Next , we will make prediction with our LR Model
836	Opacities That Are Not Related to Pneumonia
130	My upgrade of parameters
54	Using LabelEncoding we just change string values to numbers
62	Create Testing Generator
476	Score versus Iteration
443	Distribution of all Numeric Hyperparameters
330	Lets gets started
506	Locating a face within an image
233	Encoding Street Names
165	Create the submission csv file
455	Combined Aggregation Function
286	Visualizing Interest Level Vs Bedrooms
777	Load and preprocess data
736	Try the demo model
17	Do some simple plots for exploration
277	When Do People Generally Reorder
225	Square feet size is positively Skewed
833	What Does a Normal Image Look Like
851	Function which creates set of images for each axis
860	Explore distribution of single variable
585	Load model into the TPU
48	FVC Progression by SmokingStatus
692	Making Vocabulary and Text Conversion
456	Aggregate Grandchild Data Tables
240	Loading the data
359	Read the csv files on the Johns Hopkins CSSE database on github
489	Function for Numeric Aggregations
817	Start positions and end positions of selected texts in tokenized source texts
309	Let us load one image and its masks
184	Display a single car with its mask
473	Remove Low Importance Features
667	We will also evaluate the position of the data points using the coordinates
106	plotting the scan
358	Read the csv files from kaggle
256	Checking the Imbalance of Target Variable
704	process tabular features
435	Try with All Time Variables
446	Random Search on the Full Dataset
568	Create fake filepaths dataframe
228	Prediction and Submission
535	SHAP Interaction Values
33	Check Validation Log Loss
210	CatBoost Pool and Regression
658	Fast data loading
294	Dependent variable logerror follows nice normal distribution
145	MAKE A TEST SET PREDICTION
723	Compare timing for MixUp
820	Write a problem file
191	Lets validate the test files
280	Top Reordered Products
108	Read the data
558	Exploratory Data Analysis
770	BedRoom per family features
55	We should split our dataset to create validation and train parts
229	Importing Packages and Collecting Data
518	Loading the data
333	most important or common positive words
180	Its also builds on kernel functions but is appropriate for unsupervised learning
272	Visualize the default split and gains for all models
199	Using DecisionTree Classifier
221	Time of Day and Meter Reading
514	Now predict the result for each toxic level
711	Using all features for model training
838	Composition of functions
386	Draw network graph to see which ingredients are linked together
388	A good item price binning should be based on the price distribution
126	Showing Confusion Matrices
393	Hit Rate and Charge Distribution
356	a quick check if demand distribution changes week to week
780	Credit day overdue
113	FS with the Pearson correlation
414	Feature Engineering through Aggregations
299	No Of Storeys Vs Log Error
486	Putting it all Together
689	TPU Strategy and other configs
213	Importing necessary libraries
45	test prediction by LGBM and feature importance check
346	Modeling and Prediction
681	Merge seed for each team
630	Pick some frames to display
13	And now we embed each chunk individually
805	Here is a base model without parameter tuning .
749	Random Forest model
730	Choose the model to use
398	Show Original Image
209	Data load and process functions
129	Code from notebook
803	Impact of bmi over old and young patients
296	Bedroom Count Vs Log Error
760	Split training set
315	We can now create a submission file
298	Room Count Vs Log Error
370	Check Unique Label
666	There is a gap between them
854	Predict on test
766	roof and electricity
146	Set up the generator
84	The magical function
420	Visualize Tree with No Maximum Depth
340	Create the embedding layer
510	Check the typical length of a comment
444	Evolution of Search
834	What are Lung Opacities
389	Use Ad Image to Identify Item Category
411	In most cases , the values are very similar
499	Function to Calculate Missing Values
293	Top Features Selection
164	Process the Predictions
88	Convert each labeled object to Run Line Encoding
840	Is a program solution
350	Predict on test set
856	You can choose many palettes , which makes the graphs visually nice
505	Train and validate
86	Dealing with color
512	Choose and train a classifier
287	Visualizing Interest Level Vs Hour
482	Properly Representing Variable Types
336	and target vector that correspond to the test data size
744	Define the number of repetitions for each training example
682	Train Our Linear Regression Model
375	The following is features with fine hist
12	Roc AUC curve
422	Filling missing and infinite data by zeroes
758	Data preparation for test
122	Its also builds on kernel functions but is appropriate for unsupervised learning
355	expanding the aggregate
235	Seting X and Y
664	make hour column from transactionDT
30	And finally lets look at the class distribution
686	targets in train.csv
870	That is the size of one test example that we ought to predict
347	Random Forest Regressor
265	Apply reduction on some samples and visualize the results
533	differences between public and private test
81	Last click from the IP analysis
878	Replace infs and imputing missing values by mean
425	Empirical Cumulative Distribution Function Plot
125	Prepare Training Data
583	Load text data into memory
305	Thx Stackoverflow for realization
572	Creating and Training the Model
703	process submission images
799	Predict by Specify Country
600	Saving as JPEG
289	Correlation Between Price and Other Features
488	Correlations of Aggregated Values with Target
400	As a Neuroradiologist , this distribution looks pretty true to daily practice
187	Display some of similar cars
391	Price Variance in param
719	Create Inference Dataset
814	Calculate extra features for test set
35	The data is not balanced
648	FIX Time Zone
59	See sample image
454	Categorical Aggregation Function
354	Interactive booking , click , and percentage of booking trends with Bokeh
173	Set up the folds for cross validation
245	Create Document Vectors
279	Best Selling Products
332	Seperating the data into different data frame based on the labels
98	Can we get some informations out of the item description
104	Graph Representation of RNA structure
21	Importing all Libraries
714	Apply invert scaling
52	Train on full data
237	Loading the data
596	Save model and best hyperparams
827	At the scale of stores
25	Predicting for test data
477	Hyperparameters versus Iteration
373	missing value statistics
112	Thanks to Automatic FE The main code for basic FE
671	Binary Focal Loss
748	Results from my own training
270	Fit an XGBoost classifier model
156	Create a submission file
829	Other special events
