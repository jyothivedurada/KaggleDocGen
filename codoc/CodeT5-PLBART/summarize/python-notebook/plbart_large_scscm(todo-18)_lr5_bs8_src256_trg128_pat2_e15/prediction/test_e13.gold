220	FS with the Pearson correlation
1700	For each fitness function
1568	Pinball loss for multiple quantiles
1507	Iterate over the whole training dataset
159	Deriving individual masks for each object
1676	What are Lung Opacities
503	scale pixel values to grayscale
294	Create a submission file
1009	Remove id variables other than grouping variable
1108	Load image file
1738	Lib and Load data
1364	There is a gap between them
366	Its also builds on kernel functions but is appropriate for unsupervised learning
1391	left and lower right corners
1539	create testing series
668	Read the csv files from kaggle
1519	Define the number of repetitions for each class
1438	Create Image Augmentation Generator
789	Filter out warnings from models
468	Loading the data
68	if augment then horizontal flip half the time
354	Genetic program model , main code loop
1235	Adds a bounding box to an image
299	destination path to image
1623	Logistic Regression seems to be a good classification algorithm for this dataset
949	Density plots of the learning rate distributions
10	merge weather data
464	MERGE , MISSING VALUE , FILL NA
1601	checking missing data
594	Text Processing of text data easily
515	calculates the Conference RPI
353	Set up the folds for cross validation
892	Identify missing values above threshold
611	optionally save augmented images to disk for debugging purposes
584	Create final submission DF
1027	Record the best score
322	Thanks for the example of ensemling different models from
1773	for numerical stability in the loss
125	Predict submission dates
321	Extra Trees Regressor
1410	Try other columns to experiment
8	merge with building info
1288	Load dataset info
985	Select one loan and plot
266	DisplayName remove Outlier
396	Confusion Matrix for Test Data Predictions
698	Check if valid data looks all right
779	For example , we can divide the years of schooling by the age
1554	Train a model
677	filtering out outliers
656	combining categorical attributes from training and test datasets
13	Loading Train and Test Data
1306	This is a simple modify from
773	Use only training data
545	Lets test out the predictive power of the individual models themselves
333	for patientId in batch
1171	render gif and cleanup
79	resize with random interpolation
826	Read the image on which data augmentaion is to be performed
1007	Calculate medians for repaid vs not repaid
820	Visualize Tree with No Maximum Depth
1041	Remove variables to free memory
1455	Invert scaling for actual
651	create a submission
1324	Change namedtuple defaults
1411	How it should look
344	This is a simple example of a generator
1492	Run on validation dataset
1129	Set data loading parameters
189	Can the length of the description give us some informations
202	Determine current pixel spacing
901	Create the model
782	Rename the columns
311	create a list of the target columns
89	Take a look at predictions
1045	Merge the numeric and categorical
998	Divide the occurences of mode by the total occurrences
1105	load mapping dictionaries
1414	These labels are not in train
567	A simple Keras implementation that mimics that of
268	Divide features into groups
1435	View Single Image
632	Getting population for each country
1072	You can access the actual face itself like this
337	the same batch only once
412	Importing Packages and Collecting Data
21	Check for missing values in training set
1614	Split the train dataset into development and valid based on time
606	Only the classes that are true for each sample will be filled in
966	Label the plots
1663	kick off the animation
1707	Solve the task
1075	Read the data
978	Need to reverse the index to plot most important on top
743	this method also handles duplicates gracefully
721	High cardinality features
710	PRINT CV AUC
769	Roof ordinal variable
447	Defineing the directions
637	Lets gets started
1017	Sort the table by percentage of missing descending
870	Write column names
663	Bookings by year
96	Show and save column comparision matrix and save row sets
140	Sets the random seeds
1465	Define dataset and model
1735	You can choose many palettes , which makes the graphs visually nice
1538	In this implementation I will skip all the datapoint with actual is null
1024	Catch error if label encoding scheme is not valid
742	Start by pivoting the DataFrame to explore the label distribution over slices
919	Aggregate Cash previous loans
386	Decode item length
1029	Dataframe of validation scores
1655	Draw the heatmap using seaborn
1388	Need yxyx format for EfficientDet
1620	checking missing data
57	Seed everything for reproducibility
1449	Convert an array of values into a dataset matrix
1370	Encoding the Categorical Variables
1791	Feature engineering with the date
256	Thanks for the example of ensemling different models from
1486	Choose the model to use
477	Document Vectors with TfidfVectorizer
1739	Explore distribution of single variable
1786	Read and Explore
1733	Loading libraries and data
198	intensify the hair countours in preparation for the inpainting
1446	Order does not matter since we will be shuffling the data anyway
659	Feature Agglomeration Results
1313	plot feature importance
1774	Shuffling happens when splitting for kfolds
1429	first we make the training set
729	Price Variance Within Identified Items
1656	written by MJ Bahmani
381	Check if we can decode
403	CatBoost is RAM expensive so I prefer to utilize GPU
836	Rides on Map of NYC
225	Interactive plot with results of parameters tuning
1265	Training the model
326	Initialize patient entry into parsed
312	Determination categorical features
1540	This is to demo the median model
1795	Model with all data
14	Seems like a very wide range of values , relatively spaking
1713	We used softmax layer to predict a uniform probabilistic distribution of outcomes
1121	Prepare for training
672	define list of models and parameters
1732	Samples which have unique values are real the others are fake
1311	Display current run and time used
759	Families without Heads of Household
64	distribution of continuse variables after log transformation
91	Ability to Detect Face
1038	Calculate aggregate statistics for each numeric column
1014	Free up memory by deleting old objects
1212	Start with negative target
528	Building the pipelines
1593	fill up the missing values
298	destination path to image
274	Code from notebook
499	handle .ahi files
990	Select one loan and plot
1078	Set values for various parameters
1404	check the time frame
623	Replacing Mainland china with just China
1799	shift test predictions for plotting
937	Create file and open connection
888	Now we want to combine the data without creating any duplicate rows
1182	Calculate Kappa score
1665	fill in mean for floats
775	Draw a correlation heatmap
1221	Compute best params and its corresponding score
6	eliminate bad rows
1644	check for hourly patterns
190	The full distribution
1190	unique event code list
1301	Build the original and translated test data
994	Plot of client type when contract was approved
480	estimate the size of the vocabulary
90	fast less accurate
1789	Forceasting with decompasable model
382	How many different cars in train dataset
760	Select heads of household
1482	For local usage
131	Prepare Testing Data
1127	Initialize train and test DataFrames to access IDs and depth information
1191	Predict Test Set and Submit Result
848	Create the random forest
350	FS with SelectFromModel and LinearSVR
795	Using early stopping so do not need number of esimators
1309	sess.run to get data in numpy array
1281	Import the modules
1168	Outlier Analysis and Feature Scaling
747	freeze layers only if pretrained backbone is used
845	Account for y values of
1192	Numeric as float
1238	Initialize the Session
816	Convert into predictions
1008	Correlations of Aggregated Values with Target
1586	Remove useless feature to reduce dimension
30	Read data set
988	Select on loan and plot
665	Interactive booking , click , and percentage of booking trends with Bokeh
1010	Make a new column name for the variable and stat
1392	Save as parquet file
1058	Prediction for one image
756	Plot each poverty level as a separate line
1453	Drop rows with NaN values
1215	Only load those columns in order to save space
1520	LIST DESTINATION PIXEL INDICES
634	Calculating the day when the number of infected individuals is max
380	Decode item length
1406	Get just the digits from the seeding
445	Encoding Street Names
356	Method to get image data as np.array specifying image id and type
939	Dataframe for results
449	Seting X and Y
1434	mode , if unk is set we are doing it for unknown files
1012	Make a new column name
548	Generate predictions and probabilities
1202	Load Model into TPU
547	First loop runs GridSearch and does Cross validation to find the best parameters
1784	Compute the STA and the LTA
1475	MAKE MIXUP IMAGE
1566	Data preparation for test
339	Make a Prediction
1352	Leak Data loading and concat
1368	Function that add the tile background to the map
981	Replace all the day outliers
1366	Loading to a geopandas dataframe
610	add filename relative to directory
1749	Create an entity from the installments dataframe
178	Price by category
184	Brands by price
1187	the previous are scraped
556	Creates a feature dictionary based on the features present in the LGBM model
1734	the same for test
418	Train and test data at a glance
1756	Relationship between applications and previous applications
687	Get a sample from the dataset
324	Load the pre processed data
1671	Load train and test dataframes and add length columns for Description and Name
410	Fitting Logistic Regression with OneVsRest Classifier
530	Generate predictions and probabilities
1332	Depthwise convolution phase
1423	no hyphens and other special characters , split into words
152	Ok we can make our graph now
879	Iterate through each hyperparameter
1255	Load Model into TPU
980	Record ordinal variables
78	save dictionary as csv file
307	initialize the tokenizer
671	Join all dataframes
1574	Check the dataset
1403	Two years was too much for the RAM ..
1717	LOAD PROCESSED TRAINING DATA FROM DISK
1600	Create color map ranging between two colors
1642	temporary table to see ips with their associated count frequencies
318	Decision Tree Regression
1565	from tensorflow.keras import layers as L
1044	Drop the missing columns and return
573	Visuallizing Interest Level Vs Bathroom
1262	Reducing Image Size
1595	Pad the sentences
1563	Set Model for prediction
852	Explore Time Variables
838	Plot the pickups
1106	Load metadata file
460	Here we go
247	Apply exponential transf
36	And it looks like a fairly nice distribution , albeit still fairly asymetrical
1505	ROTATE DESTINATION PIXELS ONTO ORIGIN PIXELS
395	Confusion Matrix for Train Data Predictions
1581	roof and floor
1502	Order does not matter since we will be shuffling the data anyway
212	Create mean column
1765	That is the size of one test example that we ought to predict
1743	EXTRACT DEVELOPTMENT TEST
232	Double check that there are no informed ConfirmedCases and Fatalities after
1798	shift train predictions for plotting
609	optionally save augmented images to disk for debugging purposes
1721	LOAD DATASET FROM DISK
1641	Explore ip counts
213	Apply Logistic Regression
1808	number of transactions
748	Load the trained weights
604	Read all training files and keep them in memory
812	Write column names
891	Drop Correlated Variables
1393	or maybe I am missing something
757	Bar plot of occurrences of each label
1259	Using original generator
204	Remove other air pockets insided body
555	Load data and fit some models
1470	perform scaling if required i.e
473	Loading the data
250	Its also builds on kernel functions but is appropriate for unsupervised learning
375	Manager function to call the create features functions in multiple processes
520	use Logistic regression with Gridsearch for parameter tuning
50	Group date and time counts by hours
1625	Add active column
1491	Construct prediction objects
1082	Parser for Salt Competition
1354	Fast data loading
206	CONVERT DEGREES TO RADIANS
1318	Loop through each molecule type
1390	This is the transforms for the training phase
11	Compute the STA and the LTA
245	Filter Andorra , run the Linear Regression workflow
641	Most important or common negative words
387	Check if we can decode
330	Reads images from a folder , converts the images to a numpy array
510	process remaining batch
1654	check covariance among importance variables
200	from sklearn.manifold import TSNE
975	Put the iteration and score in the hyperparameter dataframe
424	Meter Readings over time
792	Make a submission dataframe
940	Sort with best score on top
620	Cycle through contours and add area to array
290	MAKE A TEST SET PREDICTION
345	How to make a generator run infinitely
1761	Label encode categoricals
1073	Granted applications per number of children
1360	Leak Data loading and concat
639	Seperating the data into different data frame based on the labels
1543	if there is too many zero , just use normal is OK
1771	text version of squash , slight different from original one
1248	Load and preprocess data
600	Now we can read the masks for the specific image
1602	Moving average is so simple
1649	Preparing the data
1149	Choose proper preprocessing function for model
272	configurations and main hyperparammeters
1396	Then transform to a datetime object supposing that it is an ordinal datetime
894	Make sure to average feature importances
54	Print some statistics
99	declare some parameter
359	Apply skin mask
60	Predicting for test data
647	Import Packages and Functions
1769	Save some memory
1211	Pad and resize all the images
1183	Returns the serializable config of the metric
862	Standard deviation of best score
719	Save objects for next step
749	Demonstration how it works
1142	Get important features according to SHAP
1147	Unique IDs from train and test
1338	The first block needs to take care of stride and filter size increase
1274	identify objects first by color then by physical isolation
1509	LIST DESTINATION PIXEL INDICES
438	Dimension of train and test data
1081	we use a partial fit approach
451	Only the classes that are true for each sample will be filled in
1725	The method for training is borrowed from
454	Load the downloaded and resized image and feed into the graph
746	Creating in Label
615	An optimizer for rounding thresholds
1452	Using all features for model training
1680	the time spent in the app so far
1252	Restore previously trained model
902	Train the model
392	Resize train images
373	Compute the STA and the LTA
367	Stochastic Gradient Descent
943	Train and make predictions
1622	Print the feature ranking
1472	size and spacing
882	Random Search on the Full Dataset
320	Gradient Boosting Regression
1445	try moving value up
335	get the number of train and val images
603	Y is the target
726	show one image
1116	Returns the counts of each type of rating that a rater made
531	prints classification report and confusion matrix
332	for patientId in batch
1278	identify objects only by isolation
288	What is the AUC Score
1780	The wordcloud of the raven for Edgar Allen Poe
174	resize the image
513	Lets calculate the number of games a team played in the conference tournament
532	Building the pipelines
536	Building the pipelines
1667	Write predictions to csv
526	Generate predictions and probabilities
897	Cumulative importance plot
1294	warm up model
896	Need to reverse the index to plot most important on top
864	Train and make predicions with model
1744	FITTING THE MODEL
365	Support Vector Machines
1308	Pick some frames to display
1087	because each coverage will occur only once
1569	range of variables
376	mean absolute error
979	Properly Representing Variable Types
1003	Putting it all Together
187	Can we get some informations out of the item description
439	Visulization of IntersectionID
1545	Use column name
739	ratio between line distance and curve distance
830	Lets first check the Train Target Distribution
248	For boosting model
423	Primary Use and Meter Reading
1242	Run our session
1140	Interaction values dependence plot capturing main effects
1233	Build datasets objects
1757	Relationship between applications and credit card balance
876	Put the iteration and score in the hyperparameter dataframe
1591	loss for noisy test data
1339	Final linear layer
714	missing value statistics
191	Is there a correlation between description length and price
931	Grid Search Implementation
434	Import basic modules
348	FS with the Pearson correlation
1427	feature vector for each word we need to do this
217	Comparison of the all feature importance diagrams
492	most correlated features
1277	identify objects only by color
1343	Plotting errors for one sample
428	all other columns
1779	Generate the Mask for EAP
1395	Plotting for only few molecules
1709	Importing sklearn libraries
334	Initialize the generators
1299	Function for coding language information
1065	Model Hyper Parameters
807	Convert to arrays for indexing
878	Dataframe of just scores
1510	ROTATE DESTINATION PIXELS ONTO ORIGIN PIXELS
837	Adjust alpha of legend markers
271	from pykalman import KalmanFilter
1511	An example usage
1050	Catch error if label encoding scheme is not valid
1056	Split into training and validation groups
565	predicting and saving to output file
429	Imputing Missing variable
1102	Prepare submission format and save it
1766	cross validation and metrics
1399	Should there be scale transformation
1331	Loads pretrained weights , and downloads if loading for the first time
569	When Do People Generally Order
653	function to read training data into pandas dataframe
1076	Check the typical length of a comment
138	Make a simple restart of runtime at this point
182	We can now plot it
1378	loads images in a mosaic
77	retrieve x , y , height and width
915	Drop the columns with all duplicated values
1805	Print out the memory usage
1473	MAKE CUTMIX LABEL
260	Find and mark maximum value of LB score
44	Create colors for bars based on bar height
76	load and shuffle filenames
349	Threshold for removing correlated variables
904	Clean up memory
1481	Plot distribution among different province
12	This block is SPPED UP
1244	Load and preprocess data
291	Set up the generator
1440	process training images
819	Add components to training data for visualization and modeling
411	using direct implementation of Logistic Regression
1155	Create strategy from tpu
1690	Sort images by how many non zero pixels are contained
895	Find the features with zero importance
1071	You can access the actual face itself like this
1384	Convert to Numpy array
1745	Getting Prime Cities
1479	ROTATE DESTINATION PIXELS ONTO ORIGIN PIXELS
572	How many orders users generally made
1648	Prepare validation data
803	Plot the confidence by each target
1228	Load text data into memory
1398	Finish implementing this ..
1346	All train tasks predictions
690	get some images
194	intensify the hair countours in preparation for the inpainting
1178	OSIC training data Example
1448	Split into train and test sets
1498	Get variables to apply weight decay in AdamW optimizer
529	First loop runs GridSearch and does Cross validation to find the best parameters
253	split training set to validation set
737	Show Original Image
527	prints classification report and confusion matrix
1226	Plotting some random images to check how cleaning works
1686	Split horizontally an image
472	Precion recall by folds
1137	Distribution of months in train and test
727	Remove Extreme Prices
863	Now we can evaluate the baseline model on the testing data
968	Remove Low Importance Features
1477	Compare timing for MixUp
1245	so that it can be used as an input in keras
397	Using RandomForest Classifier
612	Prediction on test set
1284	Convert dataframe into numpy array
1551	Day of month average
1258	Pad and resize all the images
537	First loop runs GridSearch and does Cross validation to find the best parameters
82	create a submission
1320	downcast back to int
630	SIR model that takes into account the number of deaths
806	Make sure parameters that need to be integers are integers
797	Convert to arrays for indexing
1369	Adding the name of the districts
209	FIND ORIGIN PIXEL VALUES
810	Record the validation fold score
258	Ridge Regression model for basic train
278	Using my notebook
973	Distribution of Scores
48	Create colors for bars based on bar height
1659	For neutral samples , use original texts as they are
965	Need to reset index for loc to workBU
922	Bar plot of n most important features
442	Visualition of Map Plot of Boston city
818	Add components to test data
733	Detect and compute interest points and their descriptors
538	Generate predictions and probabilities
1673	Add box if opacity is present
781	Next we can rename the columns to make it easier to keep track
787	Cumulative importance plot
955	Entities with a unique index
683	convert unicode to str
1759	Feature primitives Basically which functions are we going to use to create features
1518	Get labels and their countings
566	loss function definition courtesy
1227	Load and process data
735	Classify an image with different models
1136	Create DFs imitating public and private test subsets
1092	Define helper functions
783	Machine Learning Modeling
554	Add RUC metric to monitor NN
934	Create , train , test model
927	results to retun
801	Find the class and associated probability
516	Now we assign the Conference Strength back to each team
1375	They are very similar to each other
1530	Min payment for all previous loans
617	reduce amount of data to speed things up
774	Calculate spearman correlation
141	Hist Graph of scores
265	Standardization for regression models
851	Add seconds since start of reference
1373	Model Evaluation and Validation
1363	At first , I made Europe future
849	Extract feature importances
1697	Break if there is no data
458	A parameter grid for XGBoost
173	set unique int value for each unique classes sring
1607	Onehot encoding for categorical data
1037	Return size of dataframe in gigabytes
1764	Separate into train and test
462	Librairies and data
1225	Make a picture format from flat vector
938	Write column names
1557	Creation of the External Marker
592	Loading and preprocessing data
490	Analysis based Averages values
533	First loop runs GridSearch and does Cross validation to find the best parameters
1304	Clear up the memory first
1064	Generate data for the BERT model
285	these must match the folder names
842	The test distribution seems to be similar to the training distribution
1310	Get feature importances
1416	TPU Strategy and other configs
1264	Save results as CSV files
1091	Submission generation based on encoded model predictions
1806	Load in train and test
1109	Unique IDs from train and test
1387	Apply some augmentation on the fly
86	Apply Underbalancing Techinique
893	Need to save the labels because aligning will remove this column
1722	The mean of the two is used as the final embedding matrix
855	Test Time Features
1778	Reading in the data , as usual
111	combine out df
961	DFS with default primitives
875	Iterate through each set of hyperparameters that were evaluated
166	Loop through labels and add each to a DataFrame
323	call the first function
858	Plot the ecdfs on same plot
358	Filter the skin mask
825	Set to instance variables to use this later
9	fill test weather data
1166	Process test data in parallel
986	Make date columns
369	split training set to validation set
1144	Exponential Growth Curves
695	remove layter activation layer and use losvasz loss
1669	gather input and output parts of the pattern
1130	Pin memory for quicker GPU processing
784	The data has no missing values and is scaled between zero and one
948	Distribution of Search Values
1141	Interaction values dependence plot capturing interaction effects
1588	this follows the discussion in
701	ONLY TRAIN WITH DATA WHERE WHEEZY EQUALS I
1812	Redefine the featuresets for Autoencoder
1646	Change the Original CNN extra data MLP
551	First loop runs GridSearch and does Cross validation to find the best parameters
130	See how our generator work
1030	Need to reverse the index to plot most important on top
1167	Load Packages and Data
917	Aggregate previous loans at Home Credit
1624	You only have two areas to work on
172	serialize model to JSON
1489	Read candidates from a single jsonl file
257	Linear Regression model for basic train
1154	into this form
1635	Here is a base model without parameter tuning .
802	Find the class and associated probability
1794	Modelisation with all product
1062	encoder pathway , save outputs for merging
853	We can make the same plot by day of the week
1400	Should there be scale transformation
22	Impute any values will significantly affect the RMSE score for test set
717	y hist with defferent timestamps are similar
1159	LIST DESTINATION PIXEL INDICES
1180	update the values in the original confusion matrix
1636	dummy variable for hour color bands in test
1048	Monthly Credit Data
1236	Reverse list and print from bottom to top
100	code takesn from
1305	Ensemble with my historical best
39	Sample usage to extract batch for training
1531	Sum and mean of minimum payments across all previous loans
1266	Load Test dataframe
945	Put the iteration and score in the hyperparameter dataframe
923	Cumulative importance plot
871	Test the objective function
58	Defining DataBunch for FastAI
557	Plot Gain importances
1152	Initialize validation data generator
185	What are their top categories
1172	vtk reading dicom
1512	size and spacing
1616	Computes gradient of the Lovasz extension w.r.t sorted errors
1069	Write the prediction to file for submission
521	gets the features for the winning team
541	First loop runs GridSearch and does Cross validation to find the best parameters
1802	image coordinate to world coordinate
597	Let us read the masks
1295	creating df with train labels
1754	Relationship between applications and credits bureau
1283	Extract the label from training dataframe and discard the label column
342	Create the submission csv file
932	Evalute the hyperparameters
1276	iterate through training examples
517	Convert string to an integer
847	Use More Features
1526	Default empty prediction
1544	Inplace or Copy
1206	Load and freeze DenseNet
1218	Additional stats on group
433	Ignore deprecation and future , and user warnings
1207	The data , split between train and test sets
440	Visulization of Path
70	add trailing channel dimension
1666	Specify parameters for stacked model and begin training
1611	label encode the categorical variables and convert the numerical variables to float
1164	This images from validation data seem to be really strange labeled ...
560	Plot Gain importances
1767	Tokenize the sentences , as in introductory example
808	Training and validation data
199	inpaint the original image depending on the mask
1000	DFS with custom features
1203	Create fake filepaths dataframe
465	cut tr and val
1768	shuffling the data
706	MODEL AND PREDICT WITH QDA
284	these must match the folder names
153	Ratio global analysis
1741	HANDLE MISSING VALUES
1442	process submission images
1286	Drop the blurry image
909	Only want the numeric variables
631	A modified SEIRD model in order to take into account quarantine
115	Training and score
682	convert unicode to str
502	Rescaling the Image Most image preprocessing functions want the image as grayscale
804	Retrieve the subsample
1762	NaN imputation will be skipped in this tutorial
1224	select proper model parameters
491	Checking the Correlation Between The Features for Application Train Dataset
1209	Save model and weights
1143	Add need fields
741	deform whole image by deform each strokes
1724	text version of squash , slight different from original one
831	Filling missing and infinite data by zeroes
835	Remove latitude and longtiude outliers
1006	Remove low information features
1529	Read candidates with real multiple processes
72	define iou or jaccard loss function
559	Replace values in the dict
957	Relationships between previous apps and cash , installments , and credit
1456	These have their kitchen area larger than the total area of the house
1583	Mix region and education
1497	Choose the model to use
295	Create Binary Targets
1382	Remove Commonly used Words
329	for patientId in batch
576	Main Config Variables
958	List the primitives in a dataframe
658	Random Forest Regressor
92	Loading data etc
170	Head of the model
401	We iter the batch of images to display
1165	Placeholders for global statistics
148	We can now take a first look at those IP
1096	This can be optimized
500	Separate the zone and subject id into a df
1267	Infer using trained model
201	Graph Representation of RNA structure
19	Imputations and Data Transformation
1696	The evaluation method
1185	elif train , needs to be passed throught this clausule
1397	Most of the dates overlap
1500	Check saved checkpoints
1730	Add leak to test
1589	to truncate it
736	All Zero Features
1371	Creating the model
1426	length of largest sentence , and that of the smallest
898	Find the features with zero importance
793	Recursive Feature Elimination with Random Forest
1645	learning rates for corse training
1612	Split the train dataset into development and valid based on time
534	Generate predictions and probabilities
811	Create a file and open a connection
417	Variable Description and Identification
673	join all features
1804	Plot ROC curve
52	Create colors for bars based on bar height
276	sort the validation data
1706	Give some informations by selecting a random candidate
869	Create a new file and open a connection
724	Impute numeric features with mean value and normalize afterward
1204	First downsize all the images
1522	FIND ORIGIN PIXEL VALUES
235	Clean Id columns and keep ForecastId as index
1049	One Hot Encoding
850	Check the time
1459	checking missing data
924	Add vertical line to plot
996	DFS with seed features
1605	Predict null data based on statistical method
1053	Record the best score
704	MODEL AND PREDICT WITH QDA
619	Cycle through contours and add area to array
1584	Remove feature with only one value
1652	import Dataset to play with it
26	No surprises , since this is all presumably artificial data
504	The lineplot of the date columns
132	Create Testing Generator
684	convert unicode to str
1818	update market dataframe to only contain the specific rows with matching indecies
1782	Calling our overwritten Count vectorizer
1222	This method expands a dictionary of lists into
316	Its also builds on kernel functions but is appropriate for unsupervised learning
1653	distribution of targets
1674	Add boxes with random color if present
640	most important or common positive words
1131	Do not shuffle for validation and test
956	Entities that do not have a unique index
207	LIST DESTINATION PIXEL INDICES
1169	Just a check of the dimensions
47	Determine left , right and bottom coordinates of each bar in the plot
1547	Inplace or Copy
1093	Input dictionary for SaltParser
249	Support Vector Machines
1474	Compare timing for CutMix
935	Sort with best score on top
765	Markers for legend
292	Make a prediction on the test images
498	read in header and get dimensions
730	Extracting previous click feature
543	prints classification report and confusion matrix
593	Preprocessing of features
34	Loading Train and Test Data
1359	Fast data loading
255	Extra Trees Regressor
628	Iran since first case
722	Ordinal features mapping
1251	Retrieve desired category
497	Apply reduction on some samples and visualize the results
577	Extract data from dataframe
1698	Evaluate the program on the input
691	Computes gradient of the Lovasz extension w.r.t sorted errors
1112	extract different column types
147	Zoom on this IP
648	Load and Explore Data
394	Using DecisionTree Classifier
767	Redundant Household Variables
7	declare target , categorical and numeric columns
1290	squeeze and excite block
1523	Check oversampled dataset
564	int in description
314	For boosting model
1695	Load my favorite task
1604	Extract columns with null data
1205	Create real file paths dataframe
796	Build the model
930	Dataframes for random and grid search
275	My upgrade of parameters
364	For models from Sklearn
942	Sort with best score on top
574	Visualizing Interest Level Vs Bedrooms
928	Set subsample depending on boosting type
121	this methods help to clean up some memory while improve the coverage
1496	Hugging Face pretrained Bert model names
81	Original Yoon Kim model
427	first column only
1232	Load text data into memory
1409	Sampling the train data since too much data
1317	Set up GPU preferences
1219	Adding mode as feature
1101	Train the LGBM model
1122	LGB model parameters
660	Computes and stores the average and current value
821	No maximum depth
1578	Ratio feature can have infinite values
1079	vocaublary , add its feature vector to the total
461	Here we go
713	STRATIFIED K FOLD
407	of bayesian block bins
305	Here the best epoch will be used
581	in smaller ones
175	load images data and classes id
523	reorder column to make it easier to group features together
1723	missing entries in the embedding are set using np.random.normal
952	Extract the test ids and train labels
755	Fill in the values with the correct mapping
1672	Initialize patient entry into parsed
1776	What should good EDA be capable of
1777	plot the heatmap
1026	Train the model
124	Daily percentage increase
907	Return size of dataframe in gigabytes
1585	fill all na as
629	USA since first case
279	fit X and apply the reduction to X
512	a little housekeeping to make easier to graph correlation matrix
144	get the data fields ready for stacking
1110	Extract processed data and format them as DFs
1422	making a list of total sentences
1433	Visualize by heatmap
75	create train and validation generators
107	Unique value counts
772	In most cases , the values are very similar
1436	Number of Patients and Images in Training Images Folder
1208	Creating and Training the Model
1716	FUNCTIONS TAKEN FROM
1054	Clean up memory
360	Apply skin segmentation on all training data and visualize the result
1462	Create dataset for training and Validation
1157	numpy and matplotlib defaults
38	Look at the data types and some basic info about the different columns
95	column indices from set S in row k
1336	Skip connection and drop connect
1340	samples with good confidence
145	I updated importation for a faster version
109	raw price data
1750	Create an entity from the previous applications dataframe
1084	Specify if image should be loaded in grayscale
872	Create a file and open a connection
283	Balance the target distribution
347	Thanks to Automatic FE The main code for basic FE
1705	For each best candidate , we look if we have an answer
1629	All Country Confirmed Greater than
203	For every slice we determine the largest solid structure
1156	watch out for overfitting
984	Drop the time offset columns
1598	Check the dataset
1608	Parameter optimization is needed
1792	Draw a heatmap with the numeric values in each cell
1271	identify all objects by physical isolation on the given image
361	Some stats using jpg exif
1389	to find a better one
1457	checking missing data
43	Determine left , right and bottom coordinates of each bar in the plot
1189	unique title list
1501	Detect hardware , return appropriate distribution strategy
686	sample n pictures
1679	get some sessions information
328	for patientId in batch
1597	checking missing data
269	concat all features
374	Avoid division by zero by setting zero values to tiny float
1347	iterate through all the columns of a dataframe and modify the data type
1677	Opacities That Are Not Related to Pneumonia
1408	Next , we will make prediction with our LR Model
317	Stochastic Gradient Descent
1458	checking missing data
1675	What Does a Normal Image Look Like
911	Remove duplicate columns by values
87	The data is not balanced
1480	Compare timing for GridMask
1499	if a checkpoint exists , restore the latest checkpoint
1575	load prepared train data and test data
139	Check mmcv installation
156	Importation of a entire day data
1201	TPU Strategy and other configs
1335	Squeeze and Excitation
436	Variable Description , Identification , and Correction
1013	Putting the Functions Together
1634	Difference varialbes were created to describe the difference beween maximum and minimum value
815	Create model and train
135	Counting the metric score
969	Align Train and Test Sets
1241	Load the image string
489	Types Of Features
61	functions to get new parameters from the column
336	Set the batch sizes
1287	Display the dropped images
1592	some config values
692	Non physical data augmentation
1323	Parameters for an individual model block
1134	Perform check on randomly chosen mask and prediction
1139	Raw dependence plot
1412	targets in labels.csv
925	Train and make predicions with model
642	Most important or common words in neutral data
1333	Squeeze and Excitation layer , if desired
390	Set some parameters
508	Interpreting ROC Plot
1793	Draw a heatmap with the numeric values in each cell
890	Identify Correlated Variables
590	Gaussian Noise on Target
123	Convert to lower case Clean contractions Clean special charactor Convert small caps
1561	Choose significant macroeconomical features by their correlation
416	Read the dataset from csv file
1034	Remove the columns with all redundant values
1330	Encodes a list of BlockArgs to a list of strings
446	Encoding Cordinal Direction
1704	Remove previous best candidate and add the new one
169	Inter block part
1138	SHAP Interaction Values
219	Thanks to Automatic FE The main code for basic FE
899	One Hot Encoding
854	Plot each of the fractional times
481	Keras Tokenizer API
420	Meter Reading and Meter Type
1485	Convert test examples to tf records
196	Convert the original image to grayscale
906	Plot the cumulative variance explained
1748	Create an entity from the bureau balance dataframe
165	Mask out background and extract connected objects
183	Brands sorted by number of item
1175	Add the actors to the renderer , set the background and size
596	if not bird
1688	Make sure everybody have the same shape
667	a quick check if demand distribution changes week to week
1158	size and spacing
370	Gradient Boosting Regression
868	Example of Sampling from the Domain
1031	Suppress warnings from pandas
644	and target vector that correspond to the test data size
1610	Target , prediction process
1246	Evaluate training history
1090	Perform mask predictions binarization and RLEncoding
1570	Convert DCM to PNG
1193	Predict out of fold
768	Creating Ordinal Variables
539	prints classification report and confusion matrix
1487	if a checkpoint exists , restore the latest checkpoint
1322	Split all our input and targets by train and cv indexes
1515	For local usage
989	Create time column and drop
467	Precion recall by folds
1303	Predict with mixed language models
116	Training and score
104	Training on the complete Dataset now
913	Aggregate the categorical variables at the parent level
1718	Tokenize the sentences
712	ADD PSEUDO LABELED DATA
887	Original features will be in both datasets
302	destination path to image
69	add trailing channel dimension
705	ONLY TRAIN WITH DATA WHERE WHEEZY EQUALS I
351	FS with SelectFromModel and RandomForestRegressor
1580	wall and floor
1548	Add weather info
1797	Plot rolling statistics
1503	of the TPU while the TPU itself is computing gradients
511	calculates wins and losses to get winning percentage
766	Legend and formatting
233	Create date columns
1197	Build new dataframe
661	Predict on test set
1060	Train and validate
146	How many different values does our categorial variables take
28	MODEL WITH SUPPORT VECTOR MACHINE
960	DFS with specified primitives
770	Owns a refrigerator , computer , tablet , and television
494	analyzing the numerical features disturbion in previous application dataset
1015	Read in new copies of all the dataframes
1269	else use the most frequent pixel color
110	Sales volume per year
1803	call this function before chage the dtype
186	Does shipping depends of price
309	create a weight matrix
1307	Dequantize the feature from the byte format to the float format
976	Plots of Hyperparameters vs Score
1300	Function for cutting off the middle part of long texts
1094	for model training
448	Seting X and Y
1358	iterate through all the columns of a dataframe and modify the data type
41	The Shape of the Data
1068	Print CV scores , as well as score on the test data
453	Adds a bounding box to an image
118	FVC Progression by Sex
40	Getting to Know the Data
1577	Make new features using continuous feature
1321	Set up GPU preferences
1527	Computes official answer key from raw logits
282	Create a Dataframe containing all images
744	As a Neuroradiologist , this distribution looks pretty true to daily practice
430	Encoding Categorical Variable
1001	Return the most recent occurence
267	PlayerCollegeName remove Outlier
264	Prepare Training Data
1685	Usual numpy , panda , matplotlib and python libraries imports
346	This is how to do that
363	For boosting model
496	Group signals metadata accroding to target
484	Convolutional Neural Network
1210	Padding process and resizing with OpenCV
1689	Sort pictures by increasing color id
999	Iterate through the iterable
962	DFS with Selected Aggregation Primitives
273	get lead and lags features
1579	wall and roof
195	inpaint the original image depending on the mask
1257	Create new labels
177	Size of each category
1046	Merge to get the client id in dataframe
1460	checking missing data
236	Filter Spain , run the Linear Regression workflow
699	ONLY TRAIN WITH DATA WHERE WHEEZY EQUALS I
16	To plot pretty figures
1089	They must be resized again to their original size before encoding
1162	Order does not matter since we will be shuffling the data anyway
1376	Importing Library Files
83	Data is still small enough for memory so read to memory using pandas
1516	Detect hardware , return appropriate distribution strategy
1405	Rolling monthly and yearly store means
546	Building the pipelines
840	Calculate distribution by each fare bin
435	Display markdown formatted output like bold , italic bold etc
128	Prepare Traning Data
164	Read in data and convert to grayscale
1314	This plot shows summarized information about feature impact against shap output
1535	Load the data
1711	Read data from the CSV file
926	Hyperparameter Tuning Implementation
237	Filter Spain , run the Linear Regression workflow
1755	Relationship between applications and credits bureau
693	This will load a stored trained model or the last trained model
1573	Get the categorical and numeric columns
1100	Show best AUC per fold based on GBM training history
192	Convert the original image to grayscale
1437	Number of Patients and Images in Test Images Folder
1292	warm up model
1562	Best parameters are searched by GridSearchCV on my Laptop
790	Comparing Model Performance
1553	Day week average
627	Spain since first recorded case
230	Implementing the SIR model
1807	Load in other files
1763	Let us split the variables one more time
697	Precision helper function
388	Idea is to use clustering on images of one type to group data
4	Remove Unused Columns
1726	for numerical stability in the loss
1691	Composition of functions
1115	Check if columns between the two DFs are the same
425	Meter Readings over time And Primary Use
1379	Combined rotation matrix
970	Align dataframes on the columns
452	For drawing onto the image
552	Generate predictions and probabilities
404	arrays needed for the iteration
160	Create a random colormap
1467	we assign frequency of zero to them
1493	Get metrics for validation dataset
1385	suppose all instances are not crowd
362	Method to get image data as np.array specifying image id and type
371	Extra Trees Regressor
1421	Making Vocabulary and Text Conversion
142	get the data fields ready for stacking
1430	now we make the testing set
85	The data is not balanced
1775	This enables operations which are only applied during training like dropout
391	Test on the data that is not seen by the network during training
49	Draw one bar for each month
419	Dimension of train and test data
944	Iterate through each set of hyperparameters that were evaluated
188	What words do people use
1021	Keep track of columns already examined
466	Roc curve by folds
1631	check the old format
575	Correlation Between Price and Other Features
1270	identify obeject by the color only
822	Read the image on which data augmentaion is to be performed
595	select running device
59	Unfreeze all layers and find best learning rate
1325	Calculate and round number of filters based on depth multiplier
1521	ROTATE DESTINATION PIXELS ONTO ORIGIN PIXELS
482	Activation functions are defined separately from layers
1471	Order does not matter since we will be shuffling the data anyway
181	Prices of the first level of categories
112	combine out df
1002	DFS with custom feature
652	packages for visualiztion and exploratory analysis
1151	Initialize training data generator
168	Exponential moving average of squared gradient values
485	Sequence of two convolutional and pooling layers as feature extractors
997	DFS with specified seed feature
1280	Relevant attributes of identified objects are stored
562	Bounded region of parameter space
1715	Ensure determinism in the results
1781	Applying it on text
1123	Create Dataset objects for lgb model
1494	Run on test dataset
224	Find and mark maximum value of LB score
1377	OUTPUT OF AUGMENTATED IMAGES
105	Data loading and checking
670	Transpose the dataframes
1432	Count game trainsition
1627	Predict by Specify Country
738	choose a random image
1419	importing the dependencies
1043	Print some summary information
1729	Add train leak
1746	A lot of the continuous days variables have integers as missing value indicators
900	Catch error if label encoding scheme is not valid
824	Applies the cutout augmentation on the given image
734	Classify image and return top matches
1312	Split Trian and Valid
1747	NOTE Even tough it is automatic , we can incorporate some manual features
1124	Save predictions for each fold
84	And finally lets look at the class distribution
1790	For marchine Learning Approach
20	Check for missing values in training set
1282	Other columns are the digital value of pixels of kannada mnist
1022	Only want to remove one in a pair
1104	and batch aggregations examples for the rest of the tables ..
2	Add new Features
605	Nice helper functions for padding , random sampling L samples
688	Draw bounding box around character , and unicode character next to it
884	Standard imports for data science work
1374	Drop target , fill in NaNs
614	Weight of the class is inversely proportional to the population of the class
1243	we have to truncate it
1638	visualize distribution of attributions by minute
910	Remove the columns with all redundant values
1603	Find Null data
544	This sets up the data so we can make predictions year by year
216	Standardization for regression models
1348	Fast data loading
1424	tokenising the lowered corpus
66	load and shuffle filenames
522	gets the features for the losing team
171	Final part of the model
456	import required dependencies
114	combine out df
149	Does bots download the app
844	Train with Simple Features
1254	Make prediction and add to output dataframe
1263	Using original generator
42	Group date and time counts by years , months and days
750	Combinations of TTA
443	Visualition of Map Plot of Philadelphia city
745	build a dict to convert surface names into numbers
1386	These are needed as well by the efficientdet model
505	The KDE of the numeric columns
244	Filter Andorra , run the Linear Regression workflow
1811	Print confusion matrix and plot ROC curve
74	cosine learning rate annealing
908	Remove id variables other than grouping variable
155	Download rate by hour
23	Detect and Correct Outliers
1630	Predict all province greater than
553	prints classification report and confusion matrix
1632	for some countries , data is spread over several Provinces
1813	Evaluate the Model
1796	Show Rolling mean , Rolling Std and Test for the stationnarity
158	Dealing with color
1670	Disable fastai randomness
254	Gradient Boosting Regression
108	Sales volume per year
933	Sort with best score on top
469	Data processing , metrics and modeling
635	Defining the deterministic formulation of the problem
1660	Write a problem file
972	Kdeplot of model scores
1590	Load and preprocess data
1469	split the binary representation into different bit of digits
1402	Why does that start
645	Number of tries for each group of samples
602	Read necessary files and folders
929	Learning Rate Domain
133	Split the data into train and validation parts
1576	Check null data
778	Redundant Individual Variables
524	Building the pipelines
437	Train and Test data at a glance
1337	Update block input and output filters based on depth multiplier
798	Training and validation data
1619	Null data check
1683	left nearest neighbor
251	Stochastic Gradient Descent
626	China scenario since first entry
1441	process test images
540	Building the pipelines
1550	Week of year average
780	Feature Engineering through Aggregations
157	We can now print the results
1572	Predictions class distribution
1351	Fast data loading
791	Train on the data
1085	Resize or pad image and mask
763	Put text with appropriate offsets
1692	Lift the function
1174	and background color definition
1099	Predict validation and test data and store them in oof sets
393	The number of samples in each cluster is the following
716	Train model with continuous value
1758	Relationship between applications and POS cash balance
1196	Save current fold values
1542	This is to demo the facebook prophet model
242	Filter Albania , run the Linear Regression workflow
62	distribution of categorical variables
167	Only the classes that are true for each sample will be filled in
1097	Helper variable to index oof
1249	Unhide below to see all trials results
583	Or models are blend with simple Mean
535	prints classification report and confusion matrix
591	Composition of Augmentations
3	Reset Index for Fast Update
1365	Downloading the shapefile of the area
117	concat val data and eval data
1273	start identifying a new object
1582	combination using three features
1664	Import libraries and data , reduce memory usage
5	Encode Categorical Data
696	Exclude background from the analysis
1217	and reduced using summation and other summary stats
1504	LIST DESTINATION PIXEL INDICES
1177	Set the furniture colors
259	Parameters and LB score visualization
723	Replace a character with its ASCII value
1617	remove model activation layer and use losvasz loss
53	Draw one bar for each hour
303	Set Up the Generators
1727	Shuffling happens when splitting for kfolds
834	Empirical Cumulative Distribution Function Plot
1153	inspect datagen output
740	a little move
1148	Image size for training
319	split training set to validation set
1508	Iterate over the whole training dataset
1682	An optimizer for rounding thresholds
599	Let us load one image and its masks
1694	Show each image contained in a list
953	matplotlit and seaborn for visualizations
1564	Test data preparation
762	Scatter plot sized by percent
297	Train Test Split
1268	Comparing various kappa scoring
301	destination path to image
995	Plot of client type where contract was refused
280	Compute cluster centers and predict cluster indices
252	Decision Tree Regression
306	combine the train and test sets for encoding and padding
400	Converting the Input images to plot using plt
325	load the pickled dataframes
1088	score will be bad
1135	From timestamps set
654	function to read test data into pandas dataframe
946	First , we need to put our data into a long format dataframe
1150	but avoid situations where pet is completely removed from the crop
136	Saving the model
889	Match the columns in the dataframes
1260	Combine the filename column with the variable column
1801	k is camera instrinsic matrix
832	Submitting our Predictions
1118	Manually adjusted coefficients
1615	show mask class example
1179	compute the new values of the confusion matrix
761	Plot of the home ownership variables for home missing rent payments
883	Bayesian Optimization on the Full Dataset
1240	Inference on Test Set
856	Try with All Time Variables
675	run grid search
231	Merge train and test , exclude overlap
1816	Load CSV files
886	Read in data
1004	Run and create the features
1113	Subset text features
73	create network and compiler
1451	Make prediction and apply invert scaling
1095	Predict validation and test set masks
1160	ROTATE DESTINATION PIXELS ONTO ORIGIN PIXELS
558	Create ordered dict to perform and easy sort
874	Train and make predictions
32	Model Validation on train data set
470	MERGE , MISSING VALUE , FILL NA
1223	Refit and Submit
860	Evaluate Best Model from Random Search
1720	SAVE DATASET TO DISK
1247	to truncate it
222	FS with SelectFromModel and LinearSVR
405	evaluate fitness function for these possibilities
1195	Predict on test set based on current fold model
1814	Copy predictions to submission file
1800	plot baseline and predictions
649	Create the embedding layer
1080	Divide the result by the number of words to get the average
715	y的异常值 drop samples which have exception value in y
1173	convert to HU
718	LOAD model , preprocess
1298	Creating submission file
1220	Drop target , fill in NaNs
1011	Function to Handle Categorical Variables
732	Detect and compute interest points and their descriptors
1490	Read candidates with real multiple processes
1810	RF for feature selection
1650	Use machine learning model
689	functions to show an image
1633	Age distribution of male and female patients
1678	convert text into datetime
94	value set for row n
408	Word map for most frequent Tags
1753	Relationship between applications and credits bureau
239	Filter Italy , run the Linear Regression workflow
1319	Split all our input and targets by train and cv indexes
313	Encoding categorical features
598	So a unique operator will give us the unique filenames that contain ships
568	Lets Read In Data Files
1042	Sort the table by percentage of missing descending
1107	Load sentiment file
1214	Order does not matter since we will be shuffling the data anyway
27	Now there appears to be one feature that is not gaussian
805	Subsample and subsample frequency to top level keys
1350	iterate through all the columns of a dataframe and modify the data type
228	Ensembling the solutions and submission
379	root mean squared error
479	Document Vectors with hashing trick
406	create a new dataframe to
1051	Create the model
1444	squared features for some model flexability
210	Determination categorical features
29	Loading Train and Test Data
355	Get the dupplicate clicks with different target values
331	for patientId in batch
1342	This function takes a row and return signal to noise
1712	Since the labels are textual , so we encode them categorically
916	Merge with the main dataframe
1817	We can safely store the two types into separate dataframes
308	seperate the train and test sets
1057	eturn img , mask
1752	Create an entity from the POS Cash balance dataframe
1693	Give a nice name to the lifted function
399	Confusion Matrix for Test Data Predictions
622	Super cool Dataset from
93	update before matrix
1558	Creation of the Watershed Marker
1785	Avoid division by zero by setting zero values to tiny float
1415	Number of labels for each instance
709	STRATIFIED K FOLD
1114	Remove missing target column from test
662	Bookings per day of week
1019	Calculate Information for Testing Data
1740	We can see above the counts of higher damageDealt smoothly decrease
1658	restore original text
586	Bedroom Count Vs Log Error
1188	Generate average accuracy of each assessment
1327	Convolutions like TensorFlow , for a fixed image size
1120	Rename columns after grouping for easy merge and access
1341	for figure Legend
625	Comparison between Brazil and Italy
708	Use Private as Pseudo Label to see LB
1117	Compute QWK based on OOF train predictions
1353	iterate through all the columns of a dataframe and modify the data type
1170	del X , y , cols , tscv
1439	Get Tabular Data
992	Relationships between previous apps and cash , installments , and credit
1362	make hour column from transactionDT
809	Train with early stopping
993	Calculate the features with intereseting values
843	Create Training and Validation Set
37	Maybe if we used the log plot things would be better
1534	Plot the standard deviation around the mean ROC
1289	Determine proper input shape
1316	downcast back to int
15	Common data processors
1361	what already is known
991	Entities with a unique index
1420	importing classes helpfull for text processing
827	Read the image on which data augmentaion is to be performed
1820	check if the columns are in the index
1506	FIND ORIGIN PIXEL VALUES
873	Write column names
936	Create , train , test model
343	What is a python generator
707	PRINT CV AUC
1618	average the predictions from different folds
1546	Generate date features
1302	Predict with pure text models
215	split training set to validation set
478	Document Vectors with HashingVectorizer
1329	Encodes a block to a string
493	Merging the bureau dataset along with application train dataset to do more analysis
618	Cycle through contours and add area to array
1643	Conversions by Device
293	split into a list
101	load the image file using cv
1714	cross validation and metrics
1699	For each sample
912	Combined Aggregation Function
1239	Run the graph we just created
310	Define X and y
352	Load data files
1128	Percent of area covered by mask
1176	render gif and cleanup
1098	Create train and validation sets based on KFold indices
1367	Ploting the data
1032	Remove id variables other than grouping variable
63	distribution of continuse variables
1772	always call this before training for deterministic results
655	Imputing missing values
1086	Output information about training set
287	Here the best epoch will be used
1450	Create dataset with look back
1200	Plot box plot of RMSE
1668	At the scale of stores
1070	Continue with the original code
1023	One Hot Encoding
1033	Only want the numeric variables
624	Now a look at Italy
967	Need to reverse the index to plot most important on top
340	Process the Predictions
509	define a function that accepts a threshold and prints sensitivity and specificity
758	Addressing Wrong Labels
1710	Keras Libraries for Neural Networks
1146	load mapping dictionaries
300	Get a list of train and val images
1701	The pool contain a mix of new single instructions programs
129	See sample image
1514	size and spacing
1145	Gaussian Approximation of Active Cases
1077	Convert to lower case , split into individual words
1103	Loading the data
951	Testing Results on Full Data
341	add column names
1552	Day of year average
764	sizes for legend
711	ONLY TRAIN WITH DATA WHERE WHEEZY EQUALS I
1198	Create temporary dataframe
549	prints classification report and confusion matrix
638	Full data Analysis
211	Encoding categorical features
281	How many images are in each folder
694	remove layter activation layer and use losvasz loss
921	Normalize the feature importances to add up to one
561	number of nan values in each column
1549	Add weather hourly
426	Square feet size is positively Skewed
385	Lets validate the test files
238	Filter Italy , run the Linear Regression workflow
1059	predict and show prediction
270	Set weight of models
444	Visualition of Map Plot of Chicago city
459	Here we go
1517	Get labels and their countings
1425	tokens and its count
103	Preparing the training data
1355	iterate through all the columns of a dataframe and modify the data type
154	Attributed time analysis
1213	Create strategy from tpu
1372	Submitting the results
1662	same plane as the original data , cut at the Z axis
214	split training set to validation set
1125	Sigmoid over final convolution map is needed for Binary Crossentropy loss
1297	preparing testing data
833	Data Exploration and Data Cleaning
608	add filename relative to directory
1537	Data transformation and helper functions
501	show the graphs
409	Featurization of Training Data
571	When Do People Generally Reorder
113	combine out df
126	Using LabelEncoding we just change string values to numbers
1637	CUMMULATIVE COUNTS FEATURES
277	reorder the input data
1613	Split the train dataset into development and valid based on time
800	Feature importances dataframe
1532	Random Forest model
1819	get index column
1275	identify objects by isolation in this color only
880	Applied to Full Dataset
963	Specify the aggregation primitives
1186	how many actions the player has done
519	setup the data
859	Create the random search model
414	Seaborn and Matplotlib Visualization
813	Plot the predicted labels
296	Balance the target distribution
1253	Train model only on data for specific category
1626	Predict by Specify Province
525	First loop runs GridSearch and does Cross validation to find the best parameters
45	Draw one bar for each date
1770	missing entries in the embedding are set using np.random.normal
1731	Function which creates final video from list of images
1737	The competition metric relies only on the order of recods ignoring IDs
1126	Load mask for training or evaluation
974	Iterate through each set of hyperparameters that were evaluated
240	Filter Germany , run the Linear Regression workflow
304	These weights can be changed later , if needed
703	STRATIFIED K FOLD
841	Calculate distribution by each fare bin
646	Draw means for each group
1229	Build datasets objects
1067	split training and validation data
1524	Eval data available for a single example
1020	Track columns to remove and columns already examined
441	Visualition of Map Plot of Atlanta city
1703	Compare the new candidate to the existing best candidates
1344	train solved tasks
1328	Gets a block through a string notation of arguments
788	Add vertical line to plot
664	Bookings by month
601	For the same window we superimpose the masks above the image
106	load master data
163	Convert each labeled object to Run Line Encoding
1719	shuffling the data
263	Set weight of models
1047	Monthly Cash Data
905	Dataframe of validation scores
1587	Feature selection using shap
51	Determine left , right and bottom coordinates of each bar in the plot
1234	Load model into the TPU
151	We can plot it
1461	Make a Baseline model
1380	create new boxes
1555	Train a model
262	Interactive plot with results of parameters tuning
506	One more by all counties
681	convert unicode to str
1345	evaluation solved tasks
1039	Calculate value counts for each categorical column
987	Drop the time offset columns
1647	Loop over all Folds
384	Code from here and below is commented out because the kernel dies
1163	Order does not matter since we will be shuffling the data anyway
1357	Find Best Weight
1296	augmentation settings , for now just normalizing
1495	For local usage
1133	Cut off padded parts of images
1349	Leak Data loading and concat
246	Set the dataframe where we will update the predictions
920	Aggregate Credit previous loans
1639	check for hourly patterns
432	Prediction and Submission
243	Filter Albania , run the Linear Regression workflow
1488	Eval data available for a single example
205	Import Required Libraries
1684	If you like the content of this notebook , please consider upvoting it
463	Data processing , metrics and modeling
679	Check Unique Label
903	Record the best score
1326	Round number of filters based on depth multiplier
700	MODEL AND PREDICT WITH QDA
1132	Put prediction on CPU , detach it and transform to a numpy array
357	Basic skin detection
1760	Label encoding Making it machine readable
17	Now extract the data from the new transactions
226	Interactive plot with results of parameters tuning
450	Define search space of hyperparameters
223	Parameters and LB score visualization
829	Read the image on which data augmentaion is to be performed
570	At What Day Of The Week People Order
1525	Span logits minus the cls logits seems to be close to the best
621	Cycle through contours and add area to array
754	Plot each poverty level as a separate line
1606	For ordinal group
752	Read in Data and Look at Summary Information
120	Count occurance of words
1293	Load dataset info
229	Ensembling the solutions
1742	SCALE target variable
1651	create one more submission
372	Thanks for the example of ensemling different models from
35	And now we embed each chunk individually
1285	list to save all the models we are going to train
0	Load the DICOM image and convert to pixel array
1484	Make TF record file for test dataset
137	You can state below link to your copy of this MMDetection repo
666	expanding the aggregate
914	Aggregate the categorical variables at the grandparent level
753	Read in data
261	Interactive plot with results of parameters tuning
1356	meter split based
24	Remove the Outliers if any
1040	Merge in the previous information
455	see the sample image with bounding boxes
483	Creating the Model
413	Importing Data Manipulattion Moduls
1315	use atomic numbers to recode atomic names
777	Bottom is density plot
1466	Prediction for test
55	There is one cluster for noisy examples , labeled as
657	data preparation for modeling and prediction steps
67	split into train and validation filenames
518	quick and dirty to see how good a predictor Seed difference is
977	First we need to format the data and extract the labels
1702	where the key of each program is its fitness score
389	Find empty images
1728	This enables operations which are only applied during training like dropout
982	Convert to timedelta in days
97	show uncertain comparisions
1657	This notebook will deal with positive , negative and neutral samples independently
846	Create list of the same prediction for every observation
643	pip install transformers
1536	Check the data
1063	We will use the most basic of all of them
947	Combine results into one dataframe
1463	CNN Model for multiclass classification
1787	Fetch one signal from xs
585	No Of Storey Over The Years
1261	Create test generator
1237	Create our inference graph
1594	Tokenize the sentences
1272	delete the checked pairs from current object pairs
1184	Resets all of the metric state variables
1687	Make sure everybody have the same shape
119	FVC Progression by SmokingStatus
1005	Run and create the features
580	Logmel feature extractor
475	Create Document Vectors
680	get unique labels
1783	Worldcloud for the first topic
1230	Load model into the TPU
338	Plot the Loss Curves
46	Group date and time counts by months
731	Affected Surface Object
918	Aggregate Installments Data
857	Visualize Validation Predicted Target
579	Calculate logmel spectrogram using pytorch
471	Roc curve by fold
1528	Join examples with features and raw results
1788	An inner plot to show the peak frequency
218	MinMax scale all importances
636	Defining the deterministic formulation of the problem
1559	do here two charts density distribition
983	Create the date columns
1596	Check null data
315	Support Vector Machines
65	save pneumonia location in dictionary
823	Custom Cutout augmentation with handling of bounding boxes
1381	split the dataset in train and test set
1476	MAKE CUTMIX LABEL
1417	Get Model into TPU
234	Filter selected features
613	Any results you write to the current directory are saved as output
179	So , some categories are expensive , but most are cheap
1231	Create fast tokenizer
1018	Print some summary information
1751	Create an entity from the credit card balance dataframe
650	Build the Model
865	Make sure parameters that need to be integers are integers
1028	Clean up memory
1468	calculate the highest numerical value used for numeric encoding
814	Split into validation set
1061	create the encoder pathway and add to a list
162	Get the object indices , and perform a binary opening procedure
550	Building the pipelines
1815	Thanks to Nanashi
127	Using embedding in NN we can change dimensionality of categorical features
1025	Create the model
771	Per Capita Features
1111	Extract processed data and format them as DFs
421	Weekday and Meter Reading
877	Learning Rate Distribution
71	create numpy batch
702	ADD PSEUDO LABELED DATA
785	Normalize the feature importances to add up to one and calculate cumulative importance
542	Generate predictions and probabilities
1640	Loading in the train data
1541	This is to demo the ARIMA model
1609	Convert splited data into XGBoost format
971	Read in data and sort
1443	we add some squared features for some model flexability
1250	Save model and best hyperparams
616	add some noise to reduce overfitting
143	fit the keras model on the dataset
1035	Remove duplicate columns by values
1681	the accurace is the all time wins divided by the all time attempts
587	Bathroom Count Vs Log Error
563	len of description
1256	Will need those folders later for storing our jpegs
685	convert unicode to str
1216	Group and Reduce
176	plot randam images
457	Loading the data
402	Data load and process functions
1401	unlog the data , clip the negative part if smaller than
327	Add box if opacity is present
1708	Importing standard libraries
368	Decision Tree Regression
1066	First dense layer
1334	Expansion and Depthwise Convolution
33	prophet expects the folllwing label names
589	No Of Storeys Vs Log Error
1036	Calculate medians for repaid vs not repaid
839	Adjust alpha of legend markers
1	store the raw image data
1431	saving the numpy arrays
286	Set Up the Generators
776	Create the pairgrid object
1055	Dataframe of validation scores
488	Function for find out Numerical and categeical Variables
227	Interactive plot with results of parameters tuning
161	Check if the label size is too small
588	Room Count Vs Log Error
431	Setting train , test and target for model
1447	Submission from mode
98	Find out which set stands before another
1560	Show influence of economical factors on housing prices
88	import keras.backend as K
514	Now lets do the same thing for the actual tourney
1383	Train and validate Split
476	encode another document
828	Read the image on which data augmentaion is to be performed
122	All contraction are known
678	using outliers column as labels instead of target column
1661	Plot the obtained tour
415	Display markdown formatted output like bold , italic bold etc
208	ROTATE DESTINATION PIXELS ONTO ORIGIN PIXELS
507	Split the train dataset into development and valid based on time
1418	Loading and Visualization of Data
1052	Train the model
1016	Aggregated Stats of Bureau Balance by Client
1571	The model with the lowest validation loss
1599	checking missing data
134	Create and set up the model
56	Importing all Libraries
474	Writing output to file
1074	Income distribution and target value
150	We create some categories to plot
18	impute missing values
378	mean absolute error
941	Evalute the hyperparameters
1279	identify objects by color and isolation
31	Text preprosesing source
487	Importing The Dataset
725	Predict test set and make submission
241	Filter Germany , run the Linear Regression workflow
607	Return a normalized weight vector for the contributions of each class
193	Perform the blackHat filtering on the grayscale image to find the hair countours
1513	Order does not matter since we will be shuffling the data anyway
383	Define some constants for data location
495	Paths to data and metadata
422	Time of Day and Meter Reading
377	root mean squared error
1291	squeeze and excite block
1628	Predict all country greater than
881	Extract the test ids and train labels
728	Use Ad Image to Identify Item Category
197	Perform the blackHat filtering on the grayscale image to find the hair countours
180	Now we can plot it
751	Set a few plotting defaults
486	Recurrent Neural Network
964	Visualize Distribution of Correlated Variables
25	Loading Train and Test Data
786	Bar plot of n most important features
1809	Replace infs and imputing missing values by mean
578	Calculate spectrogram using pytorch
676	save the forecast
1199	Plot validation loss
866	boosting type domain
633	Select the models to run setting bool variables below
1083	Initialize processing by loading .csv files
794	Convert back to dataframe
669	Read the csv files on the Johns Hopkins CSSE database on github
1454	Invert scaling for forecast
1161	FIND ORIGIN PIXEL VALUES
1567	Pinball loss for multiple quantiles
867	Extract the boosting type
1194	Predict on train using all train for each fold
582	Or models are blend with simple Mean
102	grid mask augmentation
1464	Create Inference Dataset
1119	Distribution inspection of original target and predicted train and test
1483	Hugging Face pretrained Bert model names
959	DFS with Default Primitives
817	TSNE has no transform method
1556	For data prep
720	Import necessary libraries
1428	Making Feature Matrices
398	Confusion Matrix for Train Data Predictions
221	Threshold for removing correlated variables
1407	Train Our Linear Regression Model
1394	Filtering images with at least one mask
885	matplotlit and seaborn for visualizations
1621	It seems Goblins are a little similar to Ghouls
1533	Plot the mean ROC
799	Train with early stopping
950	Iterate through each hyperparameter
289	Create a Classification Report
954	Add identifying column
861	Split into training and testing data
1181	Normalize the confusion matrix and outer product
1413	targets in train.csv
1478	LIST DESTINATION PIXEL INDICES
674	define training and validation sets
80	Yoon Kim model
1736	select some columns
